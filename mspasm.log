DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address C000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address E000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address FFFE
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address C000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address E000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address FFFE
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Address column: ['0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0x0200', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None]
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Address column: ['0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', 'C000', 'C000', 'C000', 'C000', 'C000', 'C000', 'C000', 'C000', 'C000', 'C000', 'C000', 'C000', '0xC000', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None]
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Address columnxE000', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None]
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Address columnxFFFE', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None]
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Address column: ['0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0xxFFFE', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None]
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Address column: ['0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', 'C000', 'C000', 'C000', 'C000', 'C000', 'C000', 'C000', 'C000', 'C000', 'C000', 'C000', 'C000', '0xxFFFE', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None]
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Address column: ['0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', 'C000', 'C000', 'C000', 'C000', 'C000', 'C000', 'C000', 'C000', 'C000', 'C000', 'C000', 'C000', 'E000', 'E000', 'E000', 'E000', 'E000', 'E000', 'E000', 'E000', 'E000', 'E000', 'E000', 'E000', 'E000', 'E000', 'E000', 'E000', 'E000', 'E000', 'E000', 'E000', 'E000', 'E000', 'E000', 'E000', 'E000', 'E000', 'E000', 'E000', 'E000', 'E000', 'E000', 'E000', 'E000', 'E000', 'E000', 'E000', 'E000', 'E000', 'E000', 'E000', 'E000', 'E000', 'E000', 'E000', 'E000', 'E000', 'E000', 'E000', 'E000', 'E000', 'E000', 'E000', 'E000', 'E000', 'E000', 'E000', '0xE000', 'FFFE', 'FFFE', 'FFFE', 'FFFE', 'FFFE', 'FFFE', 'FFFE', 'FFFE', 'FFFE', 'FFFE', 'FFFE', 'FFFE', 'FFFE', 'FFFE', 'FFFE', 'FFFE', 'FFFE', '0xFFFE', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None]
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Address columnxFFFE', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None]
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Address column: ['0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None]
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address C000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Address column: ['0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', '0200', 'C000', 'C000', 'C000', 'C000', 'C000', 'C000', 'C000', 'C000', 'C000', 'C000', 'C000', 'C000', 'C000', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None]
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address E000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Address columnone, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None]
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address FFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Address columnone, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None]
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Address columnone, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None]
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address C000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Address columnone, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None]
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address E000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Address columnone, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None]
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address FFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Address columnone, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None]
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address C000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address E000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address FFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address C000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address E000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address FFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address C000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address E000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address FFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Set log level for console.
INFO:BABY ASSEMBLER:Determined there are None lines of code
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
INFO:BABY ASSEMBLER:Determined there are None lines of code
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:Determined there are None lines of code
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:Determined there are None lines of code
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;   Test source code for Advanced Microcontroller Software 

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;   Purpose:  To provide test code for the class Assembler Project

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;   Target: TI MSP430 family - simulation

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;       Date:           July 25, 2017

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;       Last Revision:  1.1  July 26, 2017 - minor updates

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;                       

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;       Written by:     Dr. Michael Helm, ECE dept, Texas Tech University

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;       Adapted from:   earlier example code

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;       Assembler/IDE:  class assembler project

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;       HW I/O assignments: none assigned for this example

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:; Definition of Constants

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:; Watchdog timer definitions

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:WDTCTL     EQU     0x0120

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:WDTPW      EQU     0x5A00

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:WDTHOLD    EQU     0x0080

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:; Definition of Variables

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:                ORG   0x0200     ; beginning of RAM space 

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:LoopCount       DB    0

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:Count           DB    0

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:                               

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;define a table (array) of 8 bytes

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:BufferTable:    DS    8        ; this will allocate 8 bytes of uninitialized

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:                                ; bytes in RAM space

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:BufferTableSize EQU $ - BufferTable   ; capture table size into a constant      

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:                                      ;  literally "Current address minus

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:                                      ;  address of BufferTable"

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:            ORG     0xC000                  ; Program Reset (prog memory start)

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:                                            ; this is Program memory start 

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:                                            ; address for MSP430G2553 (16K)

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:RESET       mov.w   #0x0400, SP       ; Initialize stackpointer(to end of RAM +1)

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:                                     ; RAM is 512 bytes, last position is 3FFh

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:                                     

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:StopWDT     mov.w   #WDTPW+WDTHOLD, &WDTCTL  ; Stop WDT (Watchdog timer)

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:MainProgramStart

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:            ; objective here is clear out the BufferTable in RAM to all zeros

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:            mov #BufferTableSize, R15    ; R15 is a loop counter

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:            mov #BufferTable, R14        ; R14 points to start of RAM table

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:ClearNextByte            

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:            mov.b #0,  0(R14)      ; clear the location to zero

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:  

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:            inc R14                ; point to next byte in table

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:            dec R15                ; done them all yet?

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:            jnz  ClearNextByte     ; if no, do some more

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:FinishedClearingRAMtable

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:; now copy fixed constant table from Program Memory into RAM table

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:            mov #BufferTableSize, R15    ; R15 is a loop counter

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:            mov #BufferTable, R14        ; R14 points to start of RAM table

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:            mov #PatternTable2, R13      ; R13 points to start of ROM table

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:GetNextByte            

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:            mov.b 0(R13),  0(R14)      ; copy byte from ROM table to RAM table                                   

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:                

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:            inc R13                    ;increment source addr

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:            inc R14                ; point to next byte in RAM table

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:            dec R15                ; done them all yet?

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:            jnz  GetNextByte     ; if no, do some more

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:FinishedCopyingTableToRAM

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER: 

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:Done        jz     Done           ;  halt here

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:            jnz    Done

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:                                      

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;           End of main code

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------                                            

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:                                           

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;           Subroutines

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;------------------------------------------------------------------------------- 

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:; none used here

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;           End of all Subroutines

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;           Definition of Program Data Memory 

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:            ORG   0xE000  

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:                            

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:PatternTable1           ; this is just an example table (or perhaps more 

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:Row0    DB  'E'   ; familar concept is this is an array of bytes 

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:Row1    DB  'C'   ; containing 8 bytes as defined here)

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:Row2    DB  'E'   ;  PatternTable1 is the name of the table (or array)

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:Row3    DB  '-'

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:Row4    DB  '3'

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:Row5    DB  '3'

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:Row6    DB  '6'

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:Row7    DB  '2'

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:PatternTable2  DB "EXAMPLES"

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;           Interrupt Vectors

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:            ORG     0xFFFE                  ; MSP430 RESET Vector

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:            DW      RESET                   ; establishes the label RESET as 

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:                                            ; the starting point

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:                                            

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------                                            

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:            END                             ; END of all code for this program

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------

DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------

INFO:BABY ASSEMBLER:Determined there are None lines of code
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;   Test source code for Advanced Microcontroller Software
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;   Purpose:  To provide test code for the class Assembler Project
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;   Target: TI MSP430 family - simulation
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;       Date:           July 25, 2017
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;       Last Revision:  1.1  July 26, 2017 - minor updates
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;       Written by:     Dr. Michael Helm, ECE dept, Texas Tech University
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;       Adapted from:   earlier example code
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;       Assembler/IDE:  class assembler project
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;       HW I/O assignments: none assigned for this example
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:; Definition of Constants
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:; Watchdog timer definitions
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:WDTCTL     EQU     0x0120
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:WDTPW      EQU     0x5A00
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:WDTHOLD    EQU     0x0080
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:; Definition of Variables
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:ORG   0x0200     ; beginning of RAM space
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:LoopCount       DB    0
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:Count           DB    0
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;define a table (array) of 8 bytes
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:BufferTable:    DS    8        ; this will allocate 8 bytes of uninitialized
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:; bytes in RAM space
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:BufferTableSize EQU $ - BufferTable   ; capture table size into a constant
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;  literally "Current address minus
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;  address of BufferTable"
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:ORG     0xC000                  ; Program Reset (prog memory start)
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:; this is Program memory start
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:; address for MSP430G2553 (16K)
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:RESET       mov.w   #0x0400, SP       ; Initialize stackpointer(to end of RAM +1)
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:; RAM is 512 bytes, last position is 3FFh
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:StopWDT     mov.w   #WDTPW+WDTHOLD, &WDTCTL  ; Stop WDT (Watchdog timer)
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:MainProgramStart
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:; objective here is clear out the BufferTable in RAM to all zeros
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:mov #BufferTableSize, R15    ; R15 is a loop counter
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:mov #BufferTable, R14        ; R14 points to start of RAM table
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:ClearNextByte
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:mov.b #0,  0(R14)      ; clear the location to zero
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:inc R14                ; point to next byte in table
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:dec R15                ; done them all yet?
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:jnz  ClearNextByte     ; if no, do some more
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:FinishedClearingRAMtable
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:; now copy fixed constant table from Program Memory into RAM table
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:mov #BufferTableSize, R15    ; R15 is a loop counter
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:mov #BufferTable, R14        ; R14 points to start of RAM table
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:mov #PatternTable2, R13      ; R13 points to start of ROM table
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:GetNextByte
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:mov.b 0(R13),  0(R14)      ; copy byte from ROM table to RAM table
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:inc R13                    ;increment source addr
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:inc R14                ; point to next byte in RAM table
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:dec R15                ; done them all yet?
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:jnz  GetNextByte     ; if no, do some more
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:FinishedCopyingTableToRAM
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:Done        jz     Done           ;  halt here
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:jnz    Done
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;           End of main code
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;           Subroutines
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:; none used here
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;           End of all Subroutines
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;           Definition of Program Data Memory
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:ORG   0xE000
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:PatternTable1           ; this is just an example table (or perhaps more
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:Row0    DB  'E'   ; familar concept is this is an array of bytes
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:Row1    DB  'C'   ; containing 8 bytes as defined here)
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:Row2    DB  'E'   ;  PatternTable1 is the name of the table (or array)
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:Row3    DB  '-'
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:Row4    DB  '3'
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:Row5    DB  '3'
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:Row6    DB  '6'
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:Row7    DB  '2'
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:PatternTable2  DB "EXAMPLES"
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;           Interrupt Vectors
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:ORG     0xFFFE                  ; MSP430 RESET Vector
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:DW      RESET                   ; establishes the label RESET as
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:; the starting point
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:END                             ; END of all code for this program
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
INFO:BABY ASSEMBLER:Determined there are None lines of code
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:WDTCTL
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:WDTPW
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:WDTHOLD
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:WDTCTL
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:WDTPW
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:WDTHOLD
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:ORG
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:LoopCount
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:Count
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;define
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:BufferTable:
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:BufferTableSize
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:ORG
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:RESET
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:StopWDT
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:MainProgramStart
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:mov
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:mov
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:ClearNextByte
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:mov.b
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:inc
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:dec
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:jnz
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:FinishedClearingRAMtable
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:mov
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:mov
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:mov
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:GetNextByte
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:mov.b
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:inc
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:inc
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:dec
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:jnz
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:FinishedCopyingTableToRAM
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:Done
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:jnz
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:ORG
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:PatternTable1
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:Row0
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:Row1
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:Row2
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:Row3
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:Row4
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:Row5
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:Row6
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:Row7
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:PatternTable2
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:ORG
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:DW
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:END
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
INFO:BABY ASSEMBLER:Determined there are None lines of code
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:WDTCTL
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:WDTPW
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:WDTHOLD
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:ORG
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:LoopCount
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:Count
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;define
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:BufferTable:
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:BufferTableSize
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:ORG
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:RESET
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:StopWDT
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:MainProgramStart
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:mov
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:mov
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:ClearNextByte
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:mov.b
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:inc
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:dec
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:jnz
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:FinishedClearingRAMtable
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:mov
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:mov
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:mov
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:GetNextByte
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:mov.b
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:inc
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:inc
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:dec
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:jnz
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:FinishedCopyingTableToRAM
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:Done
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:jnz
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:ORG
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:PatternTable1
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:Row0
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:Row1
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:Row2
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:Row3
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:Row4
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:Row5
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:Row6
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:Row7
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:PatternTable2
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:ORG
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:DW
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:END
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are None lines of code
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:WDTCTL
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:WDTPW
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:WDTHOLD
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:ORG
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:LoopCount
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:Count
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;define
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:BufferTable:
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:BufferTableSize
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:ORG
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:RESET
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:StopWDT
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:MainProgramStart
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:mov
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:mov
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:ClearNextByte
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:mov.b
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:inc
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:dec
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:jnz
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:FinishedClearingRAMtable
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:mov
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:mov
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:mov
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:GetNextByte
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:mov.b
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:inc
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:inc
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:dec
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:jnz
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:FinishedCopyingTableToRAM
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:Done
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:jnz
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:ORG
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:PatternTable1
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:Row0
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:Row1
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:Row2
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:Row3
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:Row4
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:Row5
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:Row6
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:Row7
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:PatternTable2
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:ORG
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:DW
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:END
DEBUG:BABY ASSEMBLER:Found the END directive.
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:WDTCTL
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:WDTPW
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:WDTHOLD
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:ORG
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:LoopCount
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:Count
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;define
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:BufferTable:
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:BufferTableSize
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:ORG
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:RESET
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:StopWDT
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:MainProgramStart
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:mov
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:mov
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:ClearNextByte
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:mov.b
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:inc
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:dec
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:jnz
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:FinishedClearingRAMtable
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:mov
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:mov
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:mov
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:GetNextByte
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:mov.b
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:inc
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:inc
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:dec
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:jnz
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:FinishedCopyingTableToRAM
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:Done
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:jnz
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:ORG
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:PatternTable1
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:Row0
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:Row1
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:Row2
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:Row3
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:Row4
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:Row5
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:Row6
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:Row7
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:PatternTable2
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:ORG
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:DW
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:END
DEBUG:BABY ASSEMBLER:Found the END directive.
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:;-------------------------------------------------------------------------------
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address C000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address E000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address FFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Found the END directive.
DEBUG:BABY ASSEMBLER:Looking for the END directive...
DEBUG:BABY ASSEMBLER:Looking for the END directive...
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address C000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address E000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address FFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address C000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address E000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address FFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 122 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 28, address 0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 41, address C000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 98, address E000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 117, address FFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Address column: None
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address C000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address E000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address FFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Address column: None
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address C000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address E000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address FFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Address column: None
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address C000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address E000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address FFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Address column: None
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address C000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address E000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address FFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Address column: None
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address C000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address E000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address FFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:['0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 'C000',
 'C000',
 'C000',
 'C000',
 'C000',
 'C000',
 'C000',
 'C000',
 'C000',
 'C000',
 'C000',
 'C000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 None,
 None,
 None,
 None]
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Address column: None at index 32
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address C000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address E000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address FFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:['0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 'C000',
 'C000',
 'C000',
 'C000',
 'C000',
 'C000',
 'C000',
 'C000',
 'C000',
 'C000',
 'C000',
 'C000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 None,
 None,
 None,
 None]
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Address column: 0200 at index 32
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address C000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address E000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address FFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:['0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 'C000',
 'C000',
 'C000',
 'C000',
 'C000',
 'C000',
 'C000',
 'C000',
 'C000',
 'C000',
 'C000',
 'C000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 None,
 None,
 None,
 None]
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known ORG directive was address 0200
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known ORG directive was address 0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address C000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address E000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address FFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:['0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 'C000',
 'C000',
 'C000',
 'C000',
 'C000',
 'C000',
 'C000',
 'C000',
 'C000',
 'C000',
 'C000',
 'C000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 None,
 None,
 None,
 None]
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known ORG directive was address 0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address C000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address E000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address FFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:['0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 'C000',
 'C000',
 'C000',
 'C000',
 'C000',
 'C000',
 'C000',
 'C000',
 'C000',
 'C000',
 'C000',
 'C000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 None,
 None,
 None,
 None]
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known ORG directive was address 0200
INFO:BABY ASSEMBLER:Last known ORG directive was address 201
INFO:BABY ASSEMBLER:Last known ORG directive was address 202
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address C000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address E000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known ORG directive was address E000
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known ORG directive was address 0200
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known ORG directive was address 0200
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known ORG directive was address 0200
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known ORG directive was address 0200
INFO:BABY ASSEMBLER:Last known ORG directive was address 513
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known ORG directive was address 0200
INFO:BABY ASSEMBLER:Last known ORG directive was address 513
INFO:BABY ASSEMBLER:Last known ORG directive was address 1300
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address C000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address E000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known ORG directive was address E000
INFO:BABY ASSEMBLER:Last known ORG directive was address 57345
INFO:BABY ASSEMBLER:Last known ORG directive was address 357190
INFO:BABY ASSEMBLER:Last known ORG directive was address 3502481
INFO:BABY ASSEMBLER:Last known ORG directive was address 55583874
INFO:BABY ASSEMBLER:Last known ORG directive was address 1431844981
INFO:BABY ASSEMBLER:Last known ORG directive was address 86730099074
INFO:BABY ASSEMBLER:Last known ORG directive was address 9239280586869
INFO:BABY ASSEMBLER:Last known ORG directive was address 2572386915870826
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address FFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:['0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 '0200',
 'C000',
 'C000',
 'C000',
 'C000',
 'C000',
 'C000',
 'C000',
 'C000',
 'C000',
 'C000',
 'C000',
 'C000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'E000',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 'FFFE',
 None,
 None,
 None,
 None]
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known ORG directive was address 0200
INFO:BABY ASSEMBLER:Last known ORG directive was address 0x201
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known ORG directive was address 0x0200
INFO:BABY ASSEMBLER:Last known ORG directive was address 0x201
INFO:BABY ASSEMBLER:Last known ORG directive was address 0x202
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known ORG directive was address 0xE000
INFO:BABY ASSEMBLER:Last known ORG directive was address 0xe001
INFO:BABY ASSEMBLER:Last known ORG directive was address 0xe002
INFO:BABY ASSEMBLER:Last known ORG directive was address 0xe003
INFO:BABY ASSEMBLER:Last known ORG directive was address 0xe004
INFO:BABY ASSEMBLER:Last known ORG directive was address 0xe005
INFO:BABY ASSEMBLER:Last known ORG directive was address 0xe006
INFO:BABY ASSEMBLER:Last known ORG directive was address 0xe007
INFO:BABY ASSEMBLER:Last known ORG directive was address 0xe008
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:['0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 None,
 None,
 None,
 None]
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known ORG directive was address 0x0200
INFO:BABY ASSEMBLER:Last known ORG directive was address 0x201
INFO:BABY ASSEMBLER:Last known ORG directive was address 0x202
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known ORG directive was address 0xE000
INFO:BABY ASSEMBLER:Last known ORG directive was address 0xe001
INFO:BABY ASSEMBLER:Last known ORG directive was address 0xe002
INFO:BABY ASSEMBLER:Last known ORG directive was address 0xe003
INFO:BABY ASSEMBLER:Last known ORG directive was address 0xe004
INFO:BABY ASSEMBLER:Last known ORG directive was address 0xe005
INFO:BABY ASSEMBLER:Last known ORG directive was address 0xe006
INFO:BABY ASSEMBLER:Last known ORG directive was address 0xe007
INFO:BABY ASSEMBLER:Last known ORG directive was address 0xe008
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:{'BufferTable:': '0x202',
 'Count': '0x201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xe008',
 'Row0': '0xE000',
 'Row1': '0xe001',
 'Row2': '0xe002',
 'Row3': '0xe003',
 'Row4': '0xe004',
 'Row5': '0xe005',
 'Row6': '0xe006',
 'Row7': '0xe007'}
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0x0200
INFO:BABY ASSEMBLER:Last known address was 0x201
INFO:BABY ASSEMBLER:Last known address was 0x202
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0xE000
INFO:BABY ASSEMBLER:Last known address was 0xe001
INFO:BABY ASSEMBLER:Last known address was 0xe002
INFO:BABY ASSEMBLER:Last known address was 0xe003
INFO:BABY ASSEMBLER:Last known address was 0xe004
INFO:BABY ASSEMBLER:Last known address was 0xe005
INFO:BABY ASSEMBLER:Last known address was 0xe006
INFO:BABY ASSEMBLER:Last known address was 0xe007
INFO:BABY ASSEMBLER:Last known address was 0xe008
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x202',
 'Count': '0x201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xe008',
 'Row0': '0xE000',
 'Row1': '0xe001',
 'Row2': '0xe002',
 'Row3': '0xe003',
 'Row4': '0xe004',
 'Row5': '0xe005',
 'Row6': '0xe006',
 'Row7': '0xe007'}
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0x0200
INFO:BABY ASSEMBLER:Last known address was 0x201
INFO:BABY ASSEMBLER:Last known address was 0x202
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0xE000
INFO:BABY ASSEMBLER:Last known address was 0xe001
INFO:BABY ASSEMBLER:Last known address was 0xe002
INFO:BABY ASSEMBLER:Last known address was 0xe003
INFO:BABY ASSEMBLER:Last known address was 0xe004
INFO:BABY ASSEMBLER:Last known address was 0xe005
INFO:BABY ASSEMBLER:Last known address was 0xe006
INFO:BABY ASSEMBLER:Last known address was 0xe007
INFO:BABY ASSEMBLER:Last known address was 0xe008
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x202',
 'Count': '0x201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xe008',
 'Row0': '0xE000',
 'Row1': '0xe001',
 'Row2': '0xe002',
 'Row3': '0xe003',
 'Row4': '0xe004',
 'Row5': '0xe005',
 'Row6': '0xe006',
 'Row7': '0xe007'}
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0x0200
INFO:BABY ASSEMBLER:Last known address was 0x201
INFO:BABY ASSEMBLER:Last known address was 0x202
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0xE000
INFO:BABY ASSEMBLER:Last known address was 0xe001
INFO:BABY ASSEMBLER:Last known address was 0xe002
INFO:BABY ASSEMBLER:Last known address was 0xe003
INFO:BABY ASSEMBLER:Last known address was 0xe004
INFO:BABY ASSEMBLER:Last known address was 0xe005
INFO:BABY ASSEMBLER:Last known address was 0xe006
INFO:BABY ASSEMBLER:Last known address was 0xe007
INFO:BABY ASSEMBLER:Last known address was 0xe008
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x202',
 'Count': '0x201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xe008',
 'Row0': '0xE000',
 'Row1': '0xe001',
 'Row2': '0xe002',
 'Row3': '0xe003',
 'Row4': '0xe004',
 'Row5': '0xe005',
 'Row6': '0xe006',
 'Row7': '0xe007'}
INFO:BABY ASSEMBLER:Flines:
('0          0x0200     None      1          0x0200     None      2          '
 '0x0200     None      3          0x0200     None      4          0x0200     '
 'None      5          0x0200     None      6          0x0200     None      '
 '7          0x0200     None      8          0x0200     None      9          '
 '0x0200     None      10         0x0200     None      11         0x0200     '
 'None      12         0x0200     None      13         0x0200     None      '
 '14         0x0200     None      15         0x0200     None      16         '
 '0x0200     None      17         0x0200     None      18         0x0200     '
 'None      19         0x0200     None      20         0x0200     None      '
 '21         0x0200     None      22         0x0200     None      23         '
 '0x0200     None      24         0x0200     None      25         0x0200     '
 'None      26         0x0200     None      27         0xC000     \t         '
 '28         0xC000     None      29         0xC000     None      30         '
 '0xC000     None      31         0xC000     None      32         0xC000     '
 'None      33         0xC000     None      34         0xC000     None      '
 '35         0xC000     None      36         0xC000     None      37         '
 '0xC000     None      38         0xC000     None      39         '
 '0xE000     \t         40         0xE000     None      41         0xE000     '
 'None      42         0xE000     None      43         0xE000     None      '
 '44         0xE000     None      45         0xE000     None      46         '
 '0xE000     None      47         0xE000     None      48         0xE000     '
 'None      49         0xE000     None      50         0xE000     None      '
 '51         0xE000     None      52         0xE000     None      53         '
 '0xE000     None      54         0xE000     None      55         0xE000     '
 'None      56         0xE000     None      57         0xE000     None      '
 '58         0xE000     None      59         0xE000     None      60         '
 '0xE000     None      61         0xE000     None      62         0xE000     '
 'None      63         0xE000     None      64         0xE000     None      '
 '65         0xE000     None      66         0xE000     None      67         '
 '0xE000     None      68         0xE000     None      69         0xE000     '
 'None      70         0xE000     None      71         0xE000     None      '
 '72         0xE000     None      73         0xE000     None      74         '
 '0xE000     None      75         0xE000     None      76         0xE000     '
 'None      77         0xE000     None      78         0xE000     None      '
 '79         0xE000     None      80         0xE000     None      81         '
 '0xE000     None      82         0xE000     None      83         0xE000     '
 'None      84         0xE000     None      85         0xE000     None      '
 '86         0xE000     None      87         0xE000     None      88         '
 '0xE000     None      89         0xE000     None      90         0xE000     '
 'None      91         0xE000     None      92         0xE000     None      '
 '93         0xE000     None      94         0xE000     None      95         '
 '0xFFFE     \t         96         0xFFFE     None      97         0xFFFE     '
 'None      98         0xFFFE     None      99         0xFFFE     None      '
 '100        0xFFFE     None      101        0xFFFE     None      102        '
 '0xFFFE     None      103        0xFFFE     None      104        0xFFFE     '
 'None      105        0xFFFE     None      106        0xFFFE     None      '
 '107        0xFFFE     None      108        0xFFFE     None      109        '
 '0xFFFE     None      110        0xFFFE     None      111        0xFFFE     '
 'None      112        0xFFFE     None      113        0xFFFE     \t         '
 '114        None       None      115        None       None      116        '
 'None       None      117        None       None      ')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0x0200
INFO:BABY ASSEMBLER:Last known address was 0x201
INFO:BABY ASSEMBLER:Last known address was 0x202
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0xE000
INFO:BABY ASSEMBLER:Last known address was 0xe001
INFO:BABY ASSEMBLER:Last known address was 0xe002
INFO:BABY ASSEMBLER:Last known address was 0xe003
INFO:BABY ASSEMBLER:Last known address was 0xe004
INFO:BABY ASSEMBLER:Last known address was 0xe005
INFO:BABY ASSEMBLER:Last known address was 0xe006
INFO:BABY ASSEMBLER:Last known address was 0xe007
INFO:BABY ASSEMBLER:Last known address was 0xe008
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x202',
 'Count': '0x201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xe008',
 'Row0': '0xE000',
 'Row1': '0xe001',
 'Row2': '0xe002',
 'Row3': '0xe003',
 'Row4': '0xe004',
 'Row5': '0xe005',
 'Row6': '0xe006',
 'Row7': '0xe007'}
INFO:BABY ASSEMBLER:Flines:
('0          0x0200     None      \n'
 '1          0x0200     None      \n'
 '2          0x0200     None      \n'
 '3          0x0200     None      \n'
 '4          0x0200     None      \n'
 '5          0x0200     None      \n'
 '6          0x0200     None      \n'
 '7          0x0200     None      \n'
 '8          0x0200     None      \n'
 '9          0x0200     None      \n'
 '10         0x0200     None      \n'
 '11         0x0200     None      \n'
 '12         0x0200     None      \n'
 '13         0x0200     None      \n'
 '14         0x0200     None      \n'
 '15         0x0200     None      \n'
 '16         0x0200     None      \n'
 '17         0x0200     None      \n'
 '18         0x0200     None      \n'
 '19         0x0200     None      \n'
 '20         0x0200     None      \n'
 '21         0x0200     None      \n'
 '22         0x0200     None      \n'
 '23         0x0200     None      \n'
 '24         0x0200     None      \n'
 '25         0x0200     None      \n'
 '26         0x0200     None      \n'
 '27         0xC000     \t         \n'
 '28         0xC000     None      \n'
 '29         0xC000     None      \n'
 '30         0xC000     None      \n'
 '31         0xC000     None      \n'
 '32         0xC000     None      \n'
 '33         0xC000     None      \n'
 '34         0xC000     None      \n'
 '35         0xC000     None      \n'
 '36         0xC000     None      \n'
 '37         0xC000     None      \n'
 '38         0xC000     None      \n'
 '39         0xE000     \t         \n'
 '40         0xE000     None      \n'
 '41         0xE000     None      \n'
 '42         0xE000     None      \n'
 '43         0xE000     None      \n'
 '44         0xE000     None      \n'
 '45         0xE000     None      \n'
 '46         0xE000     None      \n'
 '47         0xE000     None      \n'
 '48         0xE000     None      \n'
 '49         0xE000     None      \n'
 '50         0xE000     None      \n'
 '51         0xE000     None      \n'
 '52         0xE000     None      \n'
 '53         0xE000     None      \n'
 '54         0xE000     None      \n'
 '55         0xE000     None      \n'
 '56         0xE000     None      \n'
 '57         0xE000     None      \n'
 '58         0xE000     None      \n'
 '59         0xE000     None      \n'
 '60         0xE000     None      \n'
 '61         0xE000     None      \n'
 '62         0xE000     None      \n'
 '63         0xE000     None      \n'
 '64         0xE000     None      \n'
 '65         0xE000     None      \n'
 '66         0xE000     None      \n'
 '67         0xE000     None      \n'
 '68         0xE000     None      \n'
 '69         0xE000     None      \n'
 '70         0xE000     None      \n'
 '71         0xE000     None      \n'
 '72         0xE000     None      \n'
 '73         0xE000     None      \n'
 '74         0xE000     None      \n'
 '75         0xE000     None      \n'
 '76         0xE000     None      \n'
 '77         0xE000     None      \n'
 '78         0xE000     None      \n'
 '79         0xE000     None      \n'
 '80         0xE000     None      \n'
 '81         0xE000     None      \n'
 '82         0xE000     None      \n'
 '83         0xE000     None      \n'
 '84         0xE000     None      \n'
 '85         0xE000     None      \n'
 '86         0xE000     None      \n'
 '87         0xE000     None      \n'
 '88         0xE000     None      \n'
 '89         0xE000     None      \n'
 '90         0xE000     None      \n'
 '91         0xE000     None      \n'
 '92         0xE000     None      \n'
 '93         0xE000     None      \n'
 '94         0xE000     None      \n'
 '95         0xFFFE     \t         \n'
 '96         0xFFFE     None      \n'
 '97         0xFFFE     None      \n'
 '98         0xFFFE     None      \n'
 '99         0xFFFE     None      \n'
 '100        0xFFFE     None      \n'
 '101        0xFFFE     None      \n'
 '102        0xFFFE     None      \n'
 '103        0xFFFE     None      \n'
 '104        0xFFFE     None      \n'
 '105        0xFFFE     None      \n'
 '106        0xFFFE     None      \n'
 '107        0xFFFE     None      \n'
 '108        0xFFFE     None      \n'
 '109        0xFFFE     None      \n'
 '110        0xFFFE     None      \n'
 '111        0xFFFE     None      \n'
 '112        0xFFFE     None      \n'
 '113        0xFFFE     \t         \n'
 '114        None       None      \n'
 '115        None       None      \n'
 '116        None       None      \n'
 '117        None       None      \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0x0200
INFO:BABY ASSEMBLER:Last known address was 0x201
INFO:BABY ASSEMBLER:Last known address was 0x202
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0xE000
INFO:BABY ASSEMBLER:Last known address was 0xe001
INFO:BABY ASSEMBLER:Last known address was 0xe002
INFO:BABY ASSEMBLER:Last known address was 0xe003
INFO:BABY ASSEMBLER:Last known address was 0xe004
INFO:BABY ASSEMBLER:Last known address was 0xe005
INFO:BABY ASSEMBLER:Last known address was 0xe006
INFO:BABY ASSEMBLER:Last known address was 0xe007
INFO:BABY ASSEMBLER:Last known address was 0xe008
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x202',
 'Count': '0x201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xe008',
 'Row0': '0xE000',
 'Row1': '0xe001',
 'Row2': '0xe002',
 'Row3': '0xe003',
 'Row4': '0xe004',
 'Row5': '0xe005',
 'Row6': '0xe006',
 'Row7': '0xe007'}
INFO:BABY ASSEMBLER:Flines:
('0          0x0200     None      \n'
 '1          0x0200     None      \n'
 '2          0x0200     None      \n'
 '3          0x0200     None      \n'
 '4          0x0200     None      \n'
 '5          0x0200     None      \n'
 '6          0x0200     None      \n'
 '7          0x0200     None      \n'
 '8          0x0200     None      \n'
 '9          0x0200     None      \n'
 '10         0x0200     None      \n'
 '11         0x0200     None      \n'
 '12         0x0200     None      \n'
 '13         0x0200     None      \n'
 '14         0x0200     None      \n'
 '15         0x0200     None      \n'
 '16         0x0200     None      \n'
 '17         0x0200     None      \n'
 '18         0x0200     None      \n'
 '19         0x0200     None      \n'
 '20         0x0200     None      \n'
 '21         0x0200     None      \n'
 '22         0x0200     None      \n'
 '23         0x0200     None      \n'
 '24         0x0200     None      \n'
 '25         0x0200     None      \n'
 '26         0x0200     None      \n'
 '27         0xC000               \n'
 '28         0xC000     None      \n'
 '29         0xC000     None      \n'
 '30         0xC000     None      \n'
 '31         0xC000     None      \n'
 '32         0xC000     None      \n'
 '33         0xC000     None      \n'
 '34         0xC000     None      \n'
 '35         0xC000     None      \n'
 '36         0xC000     None      \n'
 '37         0xC000     None      \n'
 '38         0xC000     None      \n'
 '39         0xE000               \n'
 '40         0xE000     None      \n'
 '41         0xE000     None      \n'
 '42         0xE000     None      \n'
 '43         0xE000     None      \n'
 '44         0xE000     None      \n'
 '45         0xE000     None      \n'
 '46         0xE000     None      \n'
 '47         0xE000     None      \n'
 '48         0xE000     None      \n'
 '49         0xE000     None      \n'
 '50         0xE000     None      \n'
 '51         0xE000     None      \n'
 '52         0xE000     None      \n'
 '53         0xE000     None      \n'
 '54         0xE000     None      \n'
 '55         0xE000     None      \n'
 '56         0xE000     None      \n'
 '57         0xE000     None      \n'
 '58         0xE000     None      \n'
 '59         0xE000     None      \n'
 '60         0xE000     None      \n'
 '61         0xE000     None      \n'
 '62         0xE000     None      \n'
 '63         0xE000     None      \n'
 '64         0xE000     None      \n'
 '65         0xE000     None      \n'
 '66         0xE000     None      \n'
 '67         0xE000     None      \n'
 '68         0xE000     None      \n'
 '69         0xE000     None      \n'
 '70         0xE000     None      \n'
 '71         0xE000     None      \n'
 '72         0xE000     None      \n'
 '73         0xE000     None      \n'
 '74         0xE000     None      \n'
 '75         0xE000     None      \n'
 '76         0xE000     None      \n'
 '77         0xE000     None      \n'
 '78         0xE000     None      \n'
 '79         0xE000     None      \n'
 '80         0xE000     None      \n'
 '81         0xE000     None      \n'
 '82         0xE000     None      \n'
 '83         0xE000     None      \n'
 '84         0xE000     None      \n'
 '85         0xE000     None      \n'
 '86         0xE000     None      \n'
 '87         0xE000     None      \n'
 '88         0xE000     None      \n'
 '89         0xE000     None      \n'
 '90         0xE000     None      \n'
 '91         0xE000     None      \n'
 '92         0xE000     None      \n'
 '93         0xE000     None      \n'
 '94         0xE000     None      \n'
 '95         0xFFFE               \n'
 '96         0xFFFE     None      \n'
 '97         0xFFFE     None      \n'
 '98         0xFFFE     None      \n'
 '99         0xFFFE     None      \n'
 '100        0xFFFE     None      \n'
 '101        0xFFFE     None      \n'
 '102        0xFFFE     None      \n'
 '103        0xFFFE     None      \n'
 '104        0xFFFE     None      \n'
 '105        0xFFFE     None      \n'
 '106        0xFFFE     None      \n'
 '107        0xFFFE     None      \n'
 '108        0xFFFE     None      \n'
 '109        0xFFFE     None      \n'
 '110        0xFFFE     None      \n'
 '111        0xFFFE     None      \n'
 '112        0xFFFE     None      \n'
 '113        0xFFFE               \n'
 '114        None       None      \n'
 '115        None       None      \n'
 '116        None       None      \n'
 '117        None       None      \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0x0200
INFO:BABY ASSEMBLER:Last known address was 0x201
INFO:BABY ASSEMBLER:Last known address was 0x202
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0xE000
INFO:BABY ASSEMBLER:Last known address was 0xe001
INFO:BABY ASSEMBLER:Last known address was 0xe002
INFO:BABY ASSEMBLER:Last known address was 0xe003
INFO:BABY ASSEMBLER:Last known address was 0xe004
INFO:BABY ASSEMBLER:Last known address was 0xe005
INFO:BABY ASSEMBLER:Last known address was 0xe006
INFO:BABY ASSEMBLER:Last known address was 0xe007
INFO:BABY ASSEMBLER:Last known address was 0xe008
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x202',
 'Count': '0x201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xe008',
 'Row0': '0xE000',
 'Row1': '0xe001',
 'Row2': '0xe002',
 'Row3': '0xe003',
 'Row4': '0xe004',
 'Row5': '0xe005',
 'Row6': '0xe006',
 'Row7': '0xe007'}
INFO:BABY ASSEMBLER:Flines:
('0          0x0200               \n'
 '1          0x0200               \n'
 '2          0x0200               \n'
 '3          0x0200               \n'
 '4          0x0200               \n'
 '5          0x0200               \n'
 '6          0x0200               \n'
 '7          0x0200               \n'
 '8          0x0200               \n'
 '9          0x0200               \n'
 '10         0x0200               \n'
 '11         0x0200               \n'
 '12         0x0200               \n'
 '13         0x0200               \n'
 '14         0x0200               \n'
 '15         0x0200               \n'
 '16         0x0200               \n'
 '17         0x0200               \n'
 '18         0x0200               \n'
 '19         0x0200               \n'
 '20         0x0200               \n'
 '21         0x0200               \n'
 '22         0x0200               \n'
 '23         0x0200               \n'
 '24         0x0200               \n'
 '25         0x0200               \n'
 '26         0x0200               \n'
 '27         0xC000               \n'
 '28         0xC000               \n'
 '29         0xC000               \n'
 '30         0xC000               \n'
 '31         0xC000               \n'
 '32         0xC000               \n'
 '33         0xC000               \n'
 '34         0xC000               \n'
 '35         0xC000               \n'
 '36         0xC000               \n'
 '37         0xC000               \n'
 '38         0xC000               \n'
 '39         0xE000               \n'
 '40         0xE000               \n'
 '41         0xE000               \n'
 '42         0xE000               \n'
 '43         0xE000               \n'
 '44         0xE000               \n'
 '45         0xE000               \n'
 '46         0xE000               \n'
 '47         0xE000               \n'
 '48         0xE000               \n'
 '49         0xE000               \n'
 '50         0xE000               \n'
 '51         0xE000               \n'
 '52         0xE000               \n'
 '53         0xE000               \n'
 '54         0xE000               \n'
 '55         0xE000               \n'
 '56         0xE000               \n'
 '57         0xE000               \n'
 '58         0xE000               \n'
 '59         0xE000               \n'
 '60         0xE000               \n'
 '61         0xE000               \n'
 '62         0xE000               \n'
 '63         0xE000               \n'
 '64         0xE000               \n'
 '65         0xE000               \n'
 '66         0xE000               \n'
 '67         0xE000               \n'
 '68         0xE000               \n'
 '69         0xE000               \n'
 '70         0xE000               \n'
 '71         0xE000               \n'
 '72         0xE000               \n'
 '73         0xE000               \n'
 '74         0xE000               \n'
 '75         0xE000               \n'
 '76         0xE000               \n'
 '77         0xE000               \n'
 '78         0xE000               \n'
 '79         0xE000               \n'
 '80         0xE000               \n'
 '81         0xE000               \n'
 '82         0xE000               \n'
 '83         0xE000               \n'
 '84         0xE000               \n'
 '85         0xE000               \n'
 '86         0xE000               \n'
 '87         0xE000               \n'
 '88         0xE000               \n'
 '89         0xE000               \n'
 '90         0xE000               \n'
 '91         0xE000               \n'
 '92         0xE000               \n'
 '93         0xE000               \n'
 '94         0xE000               \n'
 '95         0xFFFE               \n'
 '96         0xFFFE               \n'
 '97         0xFFFE               \n'
 '98         0xFFFE               \n'
 '99         0xFFFE               \n'
 '100        0xFFFE               \n'
 '101        0xFFFE               \n'
 '102        0xFFFE               \n'
 '103        0xFFFE               \n'
 '104        0xFFFE               \n'
 '105        0xFFFE               \n'
 '106        0xFFFE               \n'
 '107        0xFFFE               \n'
 '108        0xFFFE               \n'
 '109        0xFFFE               \n'
 '110        0xFFFE               \n'
 '111        0xFFFE               \n'
 '112        0xFFFE               \n'
 '113        0xFFFE               \n'
 '114        None                 \n'
 '115        None                 \n'
 '116        None                 \n'
 '117        None                 \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0x0200
INFO:BABY ASSEMBLER:Last known address was 0x201
INFO:BABY ASSEMBLER:Last known address was 0x202
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0xE000
INFO:BABY ASSEMBLER:Last known address was 0xe001
INFO:BABY ASSEMBLER:Last known address was 0xe002
INFO:BABY ASSEMBLER:Last known address was 0xe003
INFO:BABY ASSEMBLER:Last known address was 0xe004
INFO:BABY ASSEMBLER:Last known address was 0xe005
INFO:BABY ASSEMBLER:Last known address was 0xe006
INFO:BABY ASSEMBLER:Last known address was 0xe007
INFO:BABY ASSEMBLER:Last known address was 0xe008
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x202',
 'Count': '0x201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xe008',
 'Row0': '0xE000',
 'Row1': '0xe001',
 'Row2': '0xe002',
 'Row3': '0xe003',
 'Row4': '0xe004',
 'Row5': '0xe005',
 'Row6': '0xe006',
 'Row7': '0xe007'}
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0x0200
INFO:BABY ASSEMBLER:Last known address was 0x201
INFO:BABY ASSEMBLER:Last known address was 0x202
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0xE000
INFO:BABY ASSEMBLER:Last known address was 0xe001
INFO:BABY ASSEMBLER:Last known address was 0xe002
INFO:BABY ASSEMBLER:Last known address was 0xe003
INFO:BABY ASSEMBLER:Last known address was 0xe004
INFO:BABY ASSEMBLER:Last known address was 0xe005
INFO:BABY ASSEMBLER:Last known address was 0xe006
INFO:BABY ASSEMBLER:Last known address was 0xe007
INFO:BABY ASSEMBLER:Last known address was 0xe008
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x202',
 'Count': '0x201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xe008',
 'Row0': '0xE000',
 'Row1': '0xe001',
 'Row2': '0xe002',
 'Row3': '0xe003',
 'Row4': '0xe004',
 'Row5': '0xe005',
 'Row6': '0xe006',
 'Row7': '0xe007'}
INFO:BABY ASSEMBLER:Flines:
('0          0200                 \n'
 '1          0200                 \n'
 '2          0200                 \n'
 '3          0200                 \n'
 '4          0200                 \n'
 '5          0200                 \n'
 '6          0200                 \n'
 '7          0200                 \n'
 '8          0200                 \n'
 '9          0200                 \n'
 '10         0200                 \n'
 '11         0200                 \n'
 '12         0200                 \n'
 '13         0200                 \n'
 '14         0200                 \n'
 '15         0200                 \n'
 '16         0200                 \n'
 '17         0200                 \n'
 '18         0200                 \n'
 '19         0200                 \n'
 '20         0200                 \n'
 '21         0200                 \n'
 '22         0200                 \n'
 '23         0200                 \n'
 '24         0200                 \n'
 '25         0200                 \n'
 '26         0200                 \n'
 '27         C000                 \n'
 '28         C000                 \n'
 '29         C000                 \n'
 '30         C000                 \n'
 '31         C000                 \n'
 '32         C000                 \n'
 '33         C000                 \n'
 '34         C000                 \n'
 '35         C000                 \n'
 '36         C000                 \n'
 '37         C000                 \n'
 '38         C000                 \n'
 '39         E000                 \n'
 '40         E000                 \n'
 '41         E000                 \n'
 '42         E000                 \n'
 '43         E000                 \n'
 '44         E000                 \n'
 '45         E000                 \n'
 '46         E000                 \n'
 '47         E000                 \n'
 '48         E000                 \n'
 '49         E000                 \n'
 '50         E000                 \n'
 '51         E000                 \n'
 '52         E000                 \n'
 '53         E000                 \n'
 '54         E000                 \n'
 '55         E000                 \n'
 '56         E000                 \n'
 '57         E000                 \n'
 '58         E000                 \n'
 '59         E000                 \n'
 '60         E000                 \n'
 '61         E000                 \n'
 '62         E000                 \n'
 '63         E000                 \n'
 '64         E000                 \n'
 '65         E000                 \n'
 '66         E000                 \n'
 '67         E000                 \n'
 '68         E000                 \n'
 '69         E000                 \n'
 '70         E000                 \n'
 '71         E000                 \n'
 '72         E000                 \n'
 '73         E000                 \n'
 '74         E000                 \n'
 '75         E000                 \n'
 '76         E000                 \n'
 '77         E000                 \n'
 '78         E000                 \n'
 '79         E000                 \n'
 '80         E000                 \n'
 '81         E000                 \n'
 '82         E000                 \n'
 '83         E000                 \n'
 '84         E000                 \n'
 '85         E000                 \n'
 '86         E000                 \n'
 '87         E000                 \n'
 '88         E000                 \n'
 '89         E000                 \n'
 '90         E000                 \n'
 '91         E000                 \n'
 '92         E000                 \n'
 '93         E000                 \n'
 '94         E000                 \n'
 '95         FFFE                 \n'
 '96         FFFE                 \n'
 '97         FFFE                 \n'
 '98         FFFE                 \n'
 '99         FFFE                 \n'
 '100        FFFE                 \n'
 '101        FFFE                 \n'
 '102        FFFE                 \n'
 '103        FFFE                 \n'
 '104        FFFE                 \n'
 '105        FFFE                 \n'
 '106        FFFE                 \n'
 '107        FFFE                 \n'
 '108        FFFE                 \n'
 '109        FFFE                 \n'
 '110        FFFE                 \n'
 '111        FFFE                 \n'
 '112        FFFE                 \n'
 '113        FFFE                 \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0x0200
INFO:BABY ASSEMBLER:Last known address was 0x201
INFO:BABY ASSEMBLER:Last known address was 0x202
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0xE000
INFO:BABY ASSEMBLER:Last known address was 0xe001
INFO:BABY ASSEMBLER:Last known address was 0xe002
INFO:BABY ASSEMBLER:Last known address was 0xe003
INFO:BABY ASSEMBLER:Last known address was 0xe004
INFO:BABY ASSEMBLER:Last known address was 0xe005
INFO:BABY ASSEMBLER:Last known address was 0xe006
INFO:BABY ASSEMBLER:Last known address was 0xe007
INFO:BABY ASSEMBLER:Last known address was 0xe008
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x202',
 'Count': '0x201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xe008',
 'Row0': '0xE000',
 'Row1': '0xe001',
 'Row2': '0xe002',
 'Row3': '0xe003',
 'Row4': '0xe004',
 'Row5': '0xe005',
 'Row6': '0xe006',
 'Row7': '0xe007'}
INFO:BABY ASSEMBLER:Flines:
('0          0200                 \n'
 '1          0200                 \n'
 '2          0200                 \n'
 '3          0200                 \n'
 '4          0200                 \n'
 '5          0200                 \n'
 '6          0200                 \n'
 '7          0200                 \n'
 '8          0200                 \n'
 '9          0200                 \n'
 '10         0200                 \n'
 '11         0200                 \n'
 '12         0200                 \n'
 '13         0200                 \n'
 '14         0200                 \n'
 '15         0200                 \n'
 '16         0200                 \n'
 '17         0200                 \n'
 '18         0200                 \n'
 '19         0200                 \n'
 '20         0200                 \n'
 '21         0200                 \n'
 '22         0200                 \n'
 '23         0200                 \n'
 '24         0200                 \n'
 '25         0200                 \n'
 '26         0200                 \n'
 '27         C000                 \n'
 '28         C000                 \n'
 '29         C000                 \n'
 '30         C000                 \n'
 '31         C000                 \n'
 '32         C000                 \n'
 '33         C000                 \n'
 '34         C000                 \n'
 '35         C000                 \n'
 '36         C000                 \n'
 '37         C000                 \n'
 '38         C000                 \n'
 '39         E000                 \n'
 '40         E000                 \n'
 '41         E000                 \n'
 '42         E000                 \n'
 '43         E000                 \n'
 '44         E000                 \n'
 '45         E000                 \n'
 '46         E000                 \n'
 '47         E000                 \n'
 '48         E000                 \n'
 '49         E000                 \n'
 '50         E000                 \n'
 '51         E000                 \n'
 '52         E000                 \n'
 '53         E000                 \n'
 '54         E000                 \n'
 '55         E000                 \n'
 '56         E000                 \n'
 '57         E000                 \n'
 '58         E000                 \n'
 '59         E000                 \n'
 '60         E000                 \n'
 '61         E000                 \n'
 '62         E000                 \n'
 '63         E000                 \n'
 '64         E000                 \n'
 '65         E000                 \n'
 '66         E000                 \n'
 '67         E000                 \n'
 '68         E000                 \n'
 '69         E000                 \n'
 '70         E000                 \n'
 '71         E000                 \n'
 '72         E000                 \n'
 '73         E000                 \n'
 '74         E000                 \n'
 '75         E000                 \n'
 '76         E000                 \n'
 '77         E000                 \n'
 '78         E000                 \n'
 '79         E000                 \n'
 '80         E000                 \n'
 '81         E000                 \n'
 '82         E000                 \n'
 '83         E000                 \n'
 '84         E000                 \n'
 '85         E000                 \n'
 '86         E000                 \n'
 '87         E000                 \n'
 '88         E000                 \n'
 '89         E000                 \n'
 '90         E000                 \n'
 '91         E000                 \n'
 '92         E000                 \n'
 '93         E000                 \n'
 '94         E000                 \n'
 '95         FFFE                 \n'
 '96         FFFE                 \n'
 '97         FFFE                 \n'
 '98         FFFE                 \n'
 '99         FFFE                 \n'
 '100        FFFE                 \n'
 '101        FFFE                 \n'
 '102        FFFE                 \n'
 '103        FFFE                 \n'
 '104        FFFE                 \n'
 '105        FFFE                 \n'
 '106        FFFE                 \n'
 '107        FFFE                 \n'
 '108        FFFE                 \n'
 '109        FFFE                 \n'
 '110        FFFE                 \n'
 '111        FFFE                 \n'
 '112        FFFE                 \n'
 '113        FFFE                 \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0x0200
INFO:BABY ASSEMBLER:Last known address was 0x201
INFO:BABY ASSEMBLER:Last known address was 0x202
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0xE000
INFO:BABY ASSEMBLER:Last known address was 0xe001
INFO:BABY ASSEMBLER:Last known address was 0xe002
INFO:BABY ASSEMBLER:Last known address was 0xe003
INFO:BABY ASSEMBLER:Last known address was 0xe004
INFO:BABY ASSEMBLER:Last known address was 0xe005
INFO:BABY ASSEMBLER:Last known address was 0xe006
INFO:BABY ASSEMBLER:Last known address was 0xe007
INFO:BABY ASSEMBLER:Last known address was 0xe008
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x202',
 'Count': '0x201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xe008',
 'Row0': '0xE000',
 'Row1': '0xe001',
 'Row2': '0xe002',
 'Row3': '0xe003',
 'Row4': '0xe004',
 'Row5': '0xe005',
 'Row6': '0xe006',
 'Row7': '0xe007'}
INFO:BABY ASSEMBLER:Addresses:
['0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 None,
 None,
 None,
 None]
INFO:BABY ASSEMBLER:Flines:
('0          0200                 \n'
 '1          0200                 \n'
 '2          0200                 \n'
 '3          0200                 \n'
 '4          0200                 \n'
 '5          0200                 \n'
 '6          0200                 \n'
 '7          0200                 \n'
 '8          0200                 \n'
 '9          0200                 \n'
 '10         0200                 \n'
 '11         0200                 \n'
 '12         0200                 \n'
 '13         0200                 \n'
 '14         0200                 \n'
 '15         0200                 \n'
 '16         0200                 \n'
 '17         0200                 \n'
 '18         0200                 \n'
 '19         0200                 \n'
 '20         0200                 \n'
 '21         0200                 \n'
 '22         0200                 \n'
 '23         0200                 \n'
 '24         0200                 \n'
 '25         0200                 \n'
 '26         0200                 \n'
 '27         C000                 \n'
 '28         C000                 \n'
 '29         C000                 \n'
 '30         C000                 \n'
 '31         C000                 \n'
 '32         C000                 \n'
 '33         C000                 \n'
 '34         C000                 \n'
 '35         C000                 \n'
 '36         C000                 \n'
 '37         C000                 \n'
 '38         C000                 \n'
 '39         E000                 \n'
 '40         E000                 \n'
 '41         E000                 \n'
 '42         E000                 \n'
 '43         E000                 \n'
 '44         E000                 \n'
 '45         E000                 \n'
 '46         E000                 \n'
 '47         E000                 \n'
 '48         E000                 \n'
 '49         E000                 \n'
 '50         E000                 \n'
 '51         E000                 \n'
 '52         E000                 \n'
 '53         E000                 \n'
 '54         E000                 \n'
 '55         E000                 \n'
 '56         E000                 \n'
 '57         E000                 \n'
 '58         E000                 \n'
 '59         E000                 \n'
 '60         E000                 \n'
 '61         E000                 \n'
 '62         E000                 \n'
 '63         E000                 \n'
 '64         E000                 \n'
 '65         E000                 \n'
 '66         E000                 \n'
 '67         E000                 \n'
 '68         E000                 \n'
 '69         E000                 \n'
 '70         E000                 \n'
 '71         E000                 \n'
 '72         E000                 \n'
 '73         E000                 \n'
 '74         E000                 \n'
 '75         E000                 \n'
 '76         E000                 \n'
 '77         E000                 \n'
 '78         E000                 \n'
 '79         E000                 \n'
 '80         E000                 \n'
 '81         E000                 \n'
 '82         E000                 \n'
 '83         E000                 \n'
 '84         E000                 \n'
 '85         E000                 \n'
 '86         E000                 \n'
 '87         E000                 \n'
 '88         E000                 \n'
 '89         E000                 \n'
 '90         E000                 \n'
 '91         E000                 \n'
 '92         E000                 \n'
 '93         E000                 \n'
 '94         E000                 \n'
 '95         FFFE                 \n'
 '96         FFFE                 \n'
 '97         FFFE                 \n'
 '98         FFFE                 \n'
 '99         FFFE                 \n'
 '100        FFFE                 \n'
 '101        FFFE                 \n'
 '102        FFFE                 \n'
 '103        FFFE                 \n'
 '104        FFFE                 \n'
 '105        FFFE                 \n'
 '106        FFFE                 \n'
 '107        FFFE                 \n'
 '108        FFFE                 \n'
 '109        FFFE                 \n'
 '110        FFFE                 \n'
 '111        FFFE                 \n'
 '112        FFFE                 \n'
 '113        FFFE                 \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0x0200
INFO:BABY ASSEMBLER:Last known address was 0x201
INFO:BABY ASSEMBLER:Last known address was 0x202
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0xE000
INFO:BABY ASSEMBLER:Last known address was 0xe001
INFO:BABY ASSEMBLER:Last known address was 0xe002
INFO:BABY ASSEMBLER:Last known address was 0xe003
INFO:BABY ASSEMBLER:Last known address was 0xe004
INFO:BABY ASSEMBLER:Last known address was 0xe005
INFO:BABY ASSEMBLER:Last known address was 0xe006
INFO:BABY ASSEMBLER:Last known address was 0xe007
INFO:BABY ASSEMBLER:Last known address was 0xe008
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x202',
 'Count': '0x201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xe008',
 'Row0': '0xE000',
 'Row1': '0xe001',
 'Row2': '0xe002',
 'Row3': '0xe003',
 'Row4': '0xe004',
 'Row5': '0xe005',
 'Row6': '0xe006',
 'Row7': '0xe007'}
INFO:BABY ASSEMBLER:Addresses:
['0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 None,
 None,
 None,
 None]
INFO:BABY ASSEMBLER:Flines:
('0          0200                 \n'
 '1          0200                 \n'
 '2          0200                 \n'
 '3          0200                 \n'
 '4          0200                 \n'
 '5          0200                 \n'
 '6          0200                 \n'
 '7          0200                 \n'
 '8          0200                 \n'
 '9          0200                 \n'
 '10         0200                 \n'
 '11         0200                 \n'
 '12         0200                 \n'
 '13         0200                 \n'
 '14         0200                 \n'
 '15         0200                 \n'
 '16         0200                 \n'
 '17         0200                 \n'
 '18         0200                 \n'
 '19         0200                 \n'
 '20         0200                 \n'
 '21         0200                 \n'
 '22         0200                 \n'
 '23         0200                 \n'
 '24         0200                 \n'
 '25         0200                 \n'
 '26         0200                 \n'
 '27         C000                 \n'
 '28         C000                 \n'
 '29         C000                 \n'
 '30         C000                 \n'
 '31         C000                 \n'
 '32         C000                 \n'
 '33         C000                 \n'
 '34         C000                 \n'
 '35         C000                 \n'
 '36         C000                 \n'
 '37         C000                 \n'
 '38         C000                 \n'
 '39         E000                 \n'
 '40         E000                 \n'
 '41         E000                 \n'
 '42         E000                 \n'
 '43         E000                 \n'
 '44         E000                 \n'
 '45         E000                 \n'
 '46         E000                 \n'
 '47         E000                 \n'
 '48         E000                 \n'
 '49         E000                 \n'
 '50         E000                 \n'
 '51         E000                 \n'
 '52         E000                 \n'
 '53         E000                 \n'
 '54         E000                 \n'
 '55         E000                 \n'
 '56         E000                 \n'
 '57         E000                 \n'
 '58         E000                 \n'
 '59         E000                 \n'
 '60         E000                 \n'
 '61         E000                 \n'
 '62         E000                 \n'
 '63         E000                 \n'
 '64         E000                 \n'
 '65         E000                 \n'
 '66         E000                 \n'
 '67         E000                 \n'
 '68         E000                 \n'
 '69         E000                 \n'
 '70         E000                 \n'
 '71         E000                 \n'
 '72         E000                 \n'
 '73         E000                 \n'
 '74         E000                 \n'
 '75         E000                 \n'
 '76         E000                 \n'
 '77         E000                 \n'
 '78         E000                 \n'
 '79         E000                 \n'
 '80         E000                 \n'
 '81         E000                 \n'
 '82         E000                 \n'
 '83         E000                 \n'
 '84         E000                 \n'
 '85         E000                 \n'
 '86         E000                 \n'
 '87         E000                 \n'
 '88         E000                 \n'
 '89         E000                 \n'
 '90         E000                 \n'
 '91         E000                 \n'
 '92         E000                 \n'
 '93         E000                 \n'
 '94         E000                 \n'
 '95         FFFE                 \n'
 '96         FFFE                 \n'
 '97         FFFE                 \n'
 '98         FFFE                 \n'
 '99         FFFE                 \n'
 '100        FFFE                 \n'
 '101        FFFE                 \n'
 '102        FFFE                 \n'
 '103        FFFE                 \n'
 '104        FFFE                 \n'
 '105        FFFE                 \n'
 '106        FFFE                 \n'
 '107        FFFE                 \n'
 '108        FFFE                 \n'
 '109        FFFE                 \n'
 '110        FFFE                 \n'
 '111        FFFE                 \n'
 '112        FFFE                 \n'
 '113        FFFE                 \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0x0200
INFO:BABY ASSEMBLER:Last known address was 0x201
INFO:BABY ASSEMBLER:Last known address was 0x202
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0xE000
INFO:BABY ASSEMBLER:Last known address was 0xe001
INFO:BABY ASSEMBLER:Last known address was 0xe002
INFO:BABY ASSEMBLER:Last known address was 0xe003
INFO:BABY ASSEMBLER:Last known address was 0xe004
INFO:BABY ASSEMBLER:Last known address was 0xe005
INFO:BABY ASSEMBLER:Last known address was 0xe006
INFO:BABY ASSEMBLER:Last known address was 0xe007
INFO:BABY ASSEMBLER:Last known address was 0xe008
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x202',
 'Count': '0x201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xe008',
 'Row0': '0xE000',
 'Row1': '0xe001',
 'Row2': '0xe002',
 'Row3': '0xe003',
 'Row4': '0xe004',
 'Row5': '0xe005',
 'Row6': '0xe006',
 'Row7': '0xe007'}
INFO:BABY ASSEMBLER:Addresses:
['0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 None,
 None,
 None,
 None]
INFO:BABY ASSEMBLER:Flines:
('0          0200                            \n'
 '1          0200                            \n'
 '2          0200                            \n'
 '3          0200                            \n'
 '4          0200                            \n'
 '5          0200                            \n'
 '6          0200                            \n'
 '7          0200                            \n'
 '8          0200                            \n'
 '9          0200                            \n'
 '10         0200                            \n'
 '11         0200                            \n'
 '12         0200                            \n'
 '13         0200                            \n'
 '14         0200                            \n'
 '15         0200                            \n'
 '16         0200                            \n'
 '17         0200                            \n'
 '18         0200                            \n'
 '19         0200                            \n'
 '20         0200                            \n'
 '21         0200                            \n'
 '22         0200                            \n'
 '23         0200                            \n'
 '24         0200                            \n'
 '25         0200                            \n'
 '26         0200                            \n'
 "27         C000                  ['ORG', '0x0200', ';', 'beginning', 'of', "
 "'RAM', 'space']\n"
 '28         C000                            \n'
 '29         C000                            \n'
 '30         C000                            \n'
 '31         C000                            \n'
 '32         C000                            \n'
 '33         C000                            \n'
 '34         C000                            \n'
 '35         C000                            \n'
 '36         C000                            \n'
 '37         C000                            \n'
 '38         C000                            \n'
 "39         E000                  ['ORG', '0xC000', ';', 'Program', 'Reset', "
 "'(prog', 'memory', 'start)']\n"
 '40         E000                            \n'
 '41         E000                            \n'
 '42         E000                            \n'
 '43         E000                            \n'
 '44         E000                            \n'
 '45         E000                            \n'
 '46         E000                            \n'
 '47         E000                            \n'
 '48         E000                            \n'
 '49         E000                            \n'
 '50         E000                            \n'
 '51         E000                            \n'
 '52         E000                            \n'
 '53         E000                            \n'
 '54         E000                            \n'
 '55         E000                            \n'
 '56         E000                            \n'
 '57         E000                            \n'
 '58         E000                            \n'
 '59         E000                            \n'
 '60         E000                            \n'
 '61         E000                            \n'
 '62         E000                            \n'
 '63         E000                            \n'
 '64         E000                            \n'
 '65         E000                            \n'
 '66         E000                            \n'
 '67         E000                            \n'
 '68         E000                            \n'
 '69         E000                            \n'
 '70         E000                            \n'
 '71         E000                            \n'
 '72         E000                            \n'
 '73         E000                            \n'
 '74         E000                            \n'
 '75         E000                            \n'
 '76         E000                            \n'
 '77         E000                            \n'
 '78         E000                            \n'
 '79         E000                            \n'
 '80         E000                            \n'
 '81         E000                            \n'
 '82         E000                            \n'
 '83         E000                            \n'
 '84         E000                            \n'
 '85         E000                            \n'
 '86         E000                            \n'
 '87         E000                            \n'
 '88         E000                            \n'
 '89         E000                            \n'
 '90         E000                            \n'
 '91         E000                            \n'
 '92         E000                            \n'
 '93         E000                            \n'
 '94         E000                            \n'
 "95         FFFE                  ['ORG', '0xE000']\n"
 '96         FFFE                            \n'
 '97         FFFE                            \n'
 '98         FFFE                            \n'
 '99         FFFE                            \n'
 '100        FFFE                            \n'
 '101        FFFE                            \n'
 '102        FFFE                            \n'
 '103        FFFE                            \n'
 '104        FFFE                            \n'
 '105        FFFE                            \n'
 '106        FFFE                            \n'
 '107        FFFE                            \n'
 '108        FFFE                            \n'
 '109        FFFE                            \n'
 '110        FFFE                            \n'
 '111        FFFE                            \n'
 '112        FFFE                            \n'
 "113        FFFE                  ['ORG', '0xFFFE', ';', 'MSP430', 'RESET', "
 "'Vector']\n")
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0x0200
INFO:BABY ASSEMBLER:Last known address was 0x201
INFO:BABY ASSEMBLER:Last known address was 0x202
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0xE000
INFO:BABY ASSEMBLER:Last known address was 0xe001
INFO:BABY ASSEMBLER:Last known address was 0xe002
INFO:BABY ASSEMBLER:Last known address was 0xe003
INFO:BABY ASSEMBLER:Last known address was 0xe004
INFO:BABY ASSEMBLER:Last known address was 0xe005
INFO:BABY ASSEMBLER:Last known address was 0xe006
INFO:BABY ASSEMBLER:Last known address was 0xe007
INFO:BABY ASSEMBLER:Last known address was 0xe008
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x202',
 'Count': '0x201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xe008',
 'Row0': '0xE000',
 'Row1': '0xe001',
 'Row2': '0xe002',
 'Row3': '0xe003',
 'Row4': '0xe004',
 'Row5': '0xe005',
 'Row6': '0xe006',
 'Row7': '0xe007'}
INFO:BABY ASSEMBLER:Addresses:
['0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 None,
 None,
 None,
 None]
INFO:BABY ASSEMBLER:Flines:
('0          0200                            \n'
 '1          0200                            \n'
 '2          0200                            \n'
 '3          0200                            \n'
 '4          0200                            \n'
 '5          0200                            \n'
 '6          0200                            \n'
 '7          0200                            \n'
 '8          0200                            \n'
 '9          0200                            \n'
 '10         0200                            \n'
 '11         0200                            \n'
 '12         0200                            \n'
 '13         0200                            \n'
 '14         0200                            \n'
 '15         0200                            \n'
 '16         0200                            \n'
 '17         0200                            \n'
 '18         0200                            \n'
 '19         0200                            \n'
 '20         0200                            \n'
 '21         0200                            \n'
 '22         0200                            \n'
 '23         0200                            \n'
 '24         0200                            \n'
 '25         0200                            \n'
 '26         0200                            \n'
 '27         C000                                  ORG   0x0200     ; '
 'beginning of RAM space \n'
 '\n'
 '28         C000                            \n'
 '29         C000                            \n'
 '30         C000                            \n'
 '31         C000                            \n'
 '32         C000                            \n'
 '33         C000                            \n'
 '34         C000                            \n'
 '35         C000                            \n'
 '36         C000                            \n'
 '37         C000                            \n'
 '38         C000                            \n'
 '39         E000                              ORG     0xC000                  '
 '; Program Reset (prog memory start)\n'
 '\n'
 '40         E000                            \n'
 '41         E000                            \n'
 '42         E000                            \n'
 '43         E000                            \n'
 '44         E000                            \n'
 '45         E000                            \n'
 '46         E000                            \n'
 '47         E000                            \n'
 '48         E000                            \n'
 '49         E000                            \n'
 '50         E000                            \n'
 '51         E000                            \n'
 '52         E000                            \n'
 '53         E000                            \n'
 '54         E000                            \n'
 '55         E000                            \n'
 '56         E000                            \n'
 '57         E000                            \n'
 '58         E000                            \n'
 '59         E000                            \n'
 '60         E000                            \n'
 '61         E000                            \n'
 '62         E000                            \n'
 '63         E000                            \n'
 '64         E000                            \n'
 '65         E000                            \n'
 '66         E000                            \n'
 '67         E000                            \n'
 '68         E000                            \n'
 '69         E000                            \n'
 '70         E000                            \n'
 '71         E000                            \n'
 '72         E000                            \n'
 '73         E000                            \n'
 '74         E000                            \n'
 '75         E000                            \n'
 '76         E000                            \n'
 '77         E000                            \n'
 '78         E000                            \n'
 '79         E000                            \n'
 '80         E000                            \n'
 '81         E000                            \n'
 '82         E000                            \n'
 '83         E000                            \n'
 '84         E000                            \n'
 '85         E000                            \n'
 '86         E000                            \n'
 '87         E000                            \n'
 '88         E000                            \n'
 '89         E000                            \n'
 '90         E000                            \n'
 '91         E000                            \n'
 '92         E000                            \n'
 '93         E000                            \n'
 '94         E000                            \n'
 '95         FFFE                              ORG   0xE000  \n'
 '\n'
 '96         FFFE                            \n'
 '97         FFFE                            \n'
 '98         FFFE                            \n'
 '99         FFFE                            \n'
 '100        FFFE                            \n'
 '101        FFFE                            \n'
 '102        FFFE                            \n'
 '103        FFFE                            \n'
 '104        FFFE                            \n'
 '105        FFFE                            \n'
 '106        FFFE                            \n'
 '107        FFFE                            \n'
 '108        FFFE                            \n'
 '109        FFFE                            \n'
 '110        FFFE                            \n'
 '111        FFFE                            \n'
 '112        FFFE                            \n'
 '113        FFFE                              ORG     0xFFFE                  '
 '; MSP430 RESET Vector\n'
 '\n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0x0200
INFO:BABY ASSEMBLER:Last known address was 0x201
INFO:BABY ASSEMBLER:Last known address was 0x202
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0xE000
INFO:BABY ASSEMBLER:Last known address was 0xe001
INFO:BABY ASSEMBLER:Last known address was 0xe002
INFO:BABY ASSEMBLER:Last known address was 0xe003
INFO:BABY ASSEMBLER:Last known address was 0xe004
INFO:BABY ASSEMBLER:Last known address was 0xe005
INFO:BABY ASSEMBLER:Last known address was 0xe006
INFO:BABY ASSEMBLER:Last known address was 0xe007
INFO:BABY ASSEMBLER:Last known address was 0xe008
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x202',
 'Count': '0x201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xe008',
 'Row0': '0xE000',
 'Row1': '0xe001',
 'Row2': '0xe002',
 'Row3': '0xe003',
 'Row4': '0xe004',
 'Row5': '0xe005',
 'Row6': '0xe006',
 'Row7': '0xe007'}
INFO:BABY ASSEMBLER:Addresses:
['0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 None,
 None,
 None,
 None]
INFO:BABY ASSEMBLER:Flines:
('0          0200                            \n'
 '1          0200                            \n'
 '2          0200                            \n'
 '3          0200                            \n'
 '4          0200                            \n'
 '5          0200                            \n'
 '6          0200                            \n'
 '7          0200                            \n'
 '8          0200                            \n'
 '9          0200                            \n'
 '10         0200                            \n'
 '11         0200                            \n'
 '12         0200                            \n'
 '13         0200                            \n'
 '14         0200                            \n'
 '15         0200                            \n'
 '16         0200                            \n'
 '17         0200                            \n'
 '18         0200                            \n'
 '19         0200                            \n'
 '20         0200                            \n'
 '21         0200                            \n'
 '22         0200                            \n'
 '23         0200                            \n'
 '24         0200                            \n'
 '25         0200                            \n'
 '26         0200                            \n'
 '27         C000                                  ORG   0x0200     ; '
 'beginning of RAM space \n'
 '\n'
 '28         C000                            \n'
 '29         C000                            \n'
 '30         C000                            \n'
 '31         C000                            \n'
 '32         C000                            \n'
 '33         C000                            \n'
 '34         C000                            \n'
 '35         C000                            \n'
 '36         C000                            \n'
 '37         C000                            \n'
 '38         C000                            \n'
 '39         E000                              ORG     0xC000                  '
 '; Program Reset (prog memory start)\n'
 '\n'
 '40         E000                            \n'
 '41         E000                            \n'
 '42         E000                            \n'
 '43         E000                            \n'
 '44         E000                            \n'
 '45         E000                            \n'
 '46         E000                            \n'
 '47         E000                            \n'
 '48         E000                            \n'
 '49         E000                            \n'
 '50         E000                            \n'
 '51         E000                            \n'
 '52         E000                            \n'
 '53         E000                            \n'
 '54         E000                            \n'
 '55         E000                            \n'
 '56         E000                            \n'
 '57         E000                            \n'
 '58         E000                            \n'
 '59         E000                            \n'
 '60         E000                            \n'
 '61         E000                            \n'
 '62         E000                            \n'
 '63         E000                            \n'
 '64         E000                            \n'
 '65         E000                            \n'
 '66         E000                            \n'
 '67         E000                            \n'
 '68         E000                            \n'
 '69         E000                            \n'
 '70         E000                            \n'
 '71         E000                            \n'
 '72         E000                            \n'
 '73         E000                            \n'
 '74         E000                            \n'
 '75         E000                            \n'
 '76         E000                            \n'
 '77         E000                            \n'
 '78         E000                            \n'
 '79         E000                            \n'
 '80         E000                            \n'
 '81         E000                            \n'
 '82         E000                            \n'
 '83         E000                            \n'
 '84         E000                            \n'
 '85         E000                            \n'
 '86         E000                            \n'
 '87         E000                            \n'
 '88         E000                            \n'
 '89         E000                            \n'
 '90         E000                            \n'
 '91         E000                            \n'
 '92         E000                            \n'
 '93         E000                            \n'
 '94         E000                            \n'
 '95         FFFE                              ORG   0xE000  \n'
 '\n'
 '96         FFFE                            \n'
 '97         FFFE                            \n'
 '98         FFFE                            \n'
 '99         FFFE                            \n'
 '100        FFFE                            \n'
 '101        FFFE                            \n'
 '102        FFFE                            \n'
 '103        FFFE                            \n'
 '104        FFFE                            \n'
 '105        FFFE                            \n'
 '106        FFFE                            \n'
 '107        FFFE                            \n'
 '108        FFFE                            \n'
 '109        FFFE                            \n'
 '110        FFFE                            \n'
 '111        FFFE                            \n'
 '112        FFFE                            \n'
 '113        FFFE                              ORG     0xFFFE                  '
 '; MSP430 RESET Vector\n'
 '\n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0x0200
INFO:BABY ASSEMBLER:Last known address was 0x201
INFO:BABY ASSEMBLER:Last known address was 0x202
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0xE000
INFO:BABY ASSEMBLER:Last known address was 0xe001
INFO:BABY ASSEMBLER:Last known address was 0xe002
INFO:BABY ASSEMBLER:Last known address was 0xe003
INFO:BABY ASSEMBLER:Last known address was 0xe004
INFO:BABY ASSEMBLER:Last known address was 0xe005
INFO:BABY ASSEMBLER:Last known address was 0xe006
INFO:BABY ASSEMBLER:Last known address was 0xe007
INFO:BABY ASSEMBLER:Last known address was 0xe008
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x202',
 'Count': '0x201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xe008',
 'Row0': '0xE000',
 'Row1': '0xe001',
 'Row2': '0xe002',
 'Row3': '0xe003',
 'Row4': '0xe004',
 'Row5': '0xe005',
 'Row6': '0xe006',
 'Row7': '0xe007'}
INFO:BABY ASSEMBLER:Addresses:
['0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 None,
 None,
 None,
 None]
INFO:BABY ASSEMBLER:Flines:
('0          0200                            \n'
 '1          0200                            \n'
 '2          0200                            \n'
 '3          0200                            \n'
 '4          0200                            \n'
 '5          0200                            \n'
 '6          0200                            \n'
 '7          0200                            \n'
 '8          0200                            \n'
 '9          0200                            \n'
 '10         0200                            \n'
 '11         0200                            \n'
 '12         0200                            \n'
 '13         0200                            \n'
 '14         0200                            \n'
 '15         0200                            \n'
 '16         0200                            \n'
 '17         0200                            \n'
 '18         0200                            \n'
 '19         0200                            \n'
 '20         0200                            \n'
 '21         0200                            \n'
 '22         0200                            \n'
 '23         0200                            \n'
 '24         0200                            \n'
 '25         0200                            \n'
 '26         0200                            \n'
 '27         C000                  ORG   0x0200     ; beginning of RAM space\n'
 '28         C000                            \n'
 '29         C000                            \n'
 '30         C000                            \n'
 '31         C000                            \n'
 '32         C000                            \n'
 '33         C000                            \n'
 '34         C000                            \n'
 '35         C000                            \n'
 '36         C000                            \n'
 '37         C000                            \n'
 '38         C000                            \n'
 '39         E000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         E000                            \n'
 '41         E000                            \n'
 '42         E000                            \n'
 '43         E000                            \n'
 '44         E000                            \n'
 '45         E000                            \n'
 '46         E000                            \n'
 '47         E000                            \n'
 '48         E000                            \n'
 '49         E000                            \n'
 '50         E000                            \n'
 '51         E000                            \n'
 '52         E000                            \n'
 '53         E000                            \n'
 '54         E000                            \n'
 '55         E000                            \n'
 '56         E000                            \n'
 '57         E000                            \n'
 '58         E000                            \n'
 '59         E000                            \n'
 '60         E000                            \n'
 '61         E000                            \n'
 '62         E000                            \n'
 '63         E000                            \n'
 '64         E000                            \n'
 '65         E000                            \n'
 '66         E000                            \n'
 '67         E000                            \n'
 '68         E000                            \n'
 '69         E000                            \n'
 '70         E000                            \n'
 '71         E000                            \n'
 '72         E000                            \n'
 '73         E000                            \n'
 '74         E000                            \n'
 '75         E000                            \n'
 '76         E000                            \n'
 '77         E000                            \n'
 '78         E000                            \n'
 '79         E000                            \n'
 '80         E000                            \n'
 '81         E000                            \n'
 '82         E000                            \n'
 '83         E000                            \n'
 '84         E000                            \n'
 '85         E000                            \n'
 '86         E000                            \n'
 '87         E000                            \n'
 '88         E000                            \n'
 '89         E000                            \n'
 '90         E000                            \n'
 '91         E000                            \n'
 '92         E000                            \n'
 '93         E000                            \n'
 '94         E000                            \n'
 '95         FFFE                  ORG   0xE000\n'
 '96         FFFE                            \n'
 '97         FFFE                            \n'
 '98         FFFE                            \n'
 '99         FFFE                            \n'
 '100        FFFE                            \n'
 '101        FFFE                            \n'
 '102        FFFE                            \n'
 '103        FFFE                            \n'
 '104        FFFE                            \n'
 '105        FFFE                            \n'
 '106        FFFE                            \n'
 '107        FFFE                            \n'
 '108        FFFE                            \n'
 '109        FFFE                            \n'
 '110        FFFE                            \n'
 '111        FFFE                            \n'
 '112        FFFE                            \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 122 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 28, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0x0200
INFO:BABY ASSEMBLER:Last known address was 0x201
INFO:BABY ASSEMBLER:Last known address was 0x202
INFO:BABY ASSEMBLER:Last known address was 0x203
DEBUG:BABY ASSEMBLER:Found ORG directive, line 41, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 98, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0xE000
INFO:BABY ASSEMBLER:Last known address was 0xe001
INFO:BABY ASSEMBLER:Last known address was 0xe002
INFO:BABY ASSEMBLER:Last known address was 0xe003
INFO:BABY ASSEMBLER:Last known address was 0xe004
INFO:BABY ASSEMBLER:Last known address was 0xe005
INFO:BABY ASSEMBLER:Last known address was 0xe006
INFO:BABY ASSEMBLER:Last known address was 0xe007
INFO:BABY ASSEMBLER:Last known address was 0xe008
INFO:BABY ASSEMBLER:Last known address was 0xe009
DEBUG:BABY ASSEMBLER:Found ORG directive, line 117, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x203',
 'Count': '0x202',
 'LoopCount': '0x0200',
 'PatternTable2': '0xe009',
 'Row0': '0xE000',
 'Row1': '0xe001',
 'Row2': '0xe002',
 'Row3': '0xe003',
 'Row4': '0xe004',
 'Row5': '0xe005',
 'Row6': '0xe006',
 'Row7': '0xe008'}
INFO:BABY ASSEMBLER:Addresses:
['0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 None,
 None,
 None,
 None]
INFO:BABY ASSEMBLER:Flines:
('0          0200                                                \n'
 '1          0200                                                \n'
 '2          0200                                                \n'
 '3          0200                                                \n'
 '4          0200                                                \n'
 '5          0200                                                \n'
 '6          0200                                                \n'
 '7          0200                                                \n'
 '8          0200                                                \n'
 '9          0200                                                \n'
 '10         0200                                                \n'
 '11         0200                                                \n'
 '12         0200                                                \n'
 '13         0200                                                \n'
 '14         0200                                                \n'
 '15         0200                                                \n'
 '16         0200                                                \n'
 '17         0200                                                \n'
 '18         0200                                                \n'
 '19         0200                                                \n'
 '20         0200                                                \n'
 '21         0200                                                \n'
 '22         0200                                                \n'
 '23         0200                                                \n'
 '24         0200                                                \n'
 '25         0200                                                \n'
 '26         0200                                                \n'
 '27         0200                                                \n'
 '28         C000                  ORG   0x0200     ; beginning of RAM space\n'
 '29         C000                                                \n'
 '30         C000                                                \n'
 '31         C000                                                \n'
 '32         C000                                                \n'
 '33         C000                                                \n'
 '34         C000                                                \n'
 '35         C000                                                \n'
 '36         C000                                                \n'
 '37         C000                                                \n'
 '38         C000                                                \n'
 '39         C000                                                \n'
 '40         C000                                                \n'
 '41         E000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '42         E000                                                \n'
 '43         E000                                                \n'
 '44         E000                                                \n'
 '45         E000                                                \n'
 '46         E000                                                \n'
 '47         E000                                                \n'
 '48         E000                                                \n'
 '49         E000                                                \n'
 '50         E000                                                \n'
 '51         E000                                                \n'
 '52         E000                                                \n'
 '53         E000                                                \n'
 '54         E000                                                \n'
 '55         E000                                                \n'
 '56         E000                                                \n'
 '57         E000                                                \n'
 '58         E000                                                \n'
 '59         E000                                                \n'
 '60         E000                                                \n'
 '61         E000                                                \n'
 '62         E000                                                \n'
 '63         E000                                                \n'
 '64         E000                                                \n'
 '65         E000                                                \n'
 '66         E000                                                \n'
 '67         E000                                                \n'
 '68         E000                                                \n'
 '69         E000                                                \n'
 '70         E000                                                \n'
 '71         E000                                                \n'
 '72         E000                                                \n'
 '73         E000                                                \n'
 '74         E000                                                \n'
 '75         E000                                                \n'
 '76         E000                                                \n'
 '77         E000                                                \n'
 '78         E000                                                \n'
 '79         E000                                                \n'
 '80         E000                                                \n'
 '81         E000                                                \n'
 '82         E000                                                \n'
 '83         E000                                                \n'
 '84         E000                                                \n'
 '85         E000                                                \n'
 '86         E000                                                \n'
 '87         E000                                                \n'
 '88         E000                                                \n'
 '89         E000                                                \n'
 '90         E000                                                \n'
 '91         E000                                                \n'
 '92         E000                                                \n'
 '93         E000                                                \n'
 '94         E000                                                \n'
 '95         E000                                                \n'
 '96         E000                                                \n'
 '97         E000                                                \n'
 '98         FFFE                  ORG   0xE000                  \n'
 '99         FFFE                                                \n'
 '100        FFFE                                                \n'
 '101        FFFE                                                \n'
 '102        FFFE                                                \n'
 '103        FFFE                                                \n'
 '104        FFFE                                                \n'
 '105        FFFE                                                \n'
 '106        FFFE                                                \n'
 '107        FFFE                                                \n'
 '108        FFFE                                                \n'
 '109        FFFE                                                \n'
 '110        FFFE                                                \n'
 '111        FFFE                                                \n'
 '112        FFFE                                                \n'
 '113        FFFE                                                \n'
 '114        FFFE                                                \n'
 '115        FFFE                                                \n'
 '116        FFFE                                                \n'
 '117        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0x0200
INFO:BABY ASSEMBLER:Last known address was 0x201
INFO:BABY ASSEMBLER:Last known address was 0x202
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0xE000
INFO:BABY ASSEMBLER:Last known address was 0xe001
INFO:BABY ASSEMBLER:Last known address was 0xe002
INFO:BABY ASSEMBLER:Last known address was 0xe003
INFO:BABY ASSEMBLER:Last known address was 0xe004
INFO:BABY ASSEMBLER:Last known address was 0xe005
INFO:BABY ASSEMBLER:Last known address was 0xe006
INFO:BABY ASSEMBLER:Last known address was 0xe007
INFO:BABY ASSEMBLER:Last known address was 0xe008
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x202',
 'Count': '0x201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xe008',
 'Row0': '0xE000',
 'Row1': '0xe001',
 'Row2': '0xe002',
 'Row3': '0xe003',
 'Row4': '0xe004',
 'Row5': '0xe005',
 'Row6': '0xe006',
 'Row7': '0xe007'}
INFO:BABY ASSEMBLER:Addresses:
['0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 None,
 None,
 None,
 None]
INFO:BABY ASSEMBLER:Flines:
('0          0200                                                \n'
 '1          0200                                                \n'
 '2          0200                                                \n'
 '3          0200                                                \n'
 '4          0200                                                \n'
 '5          0200                                                \n'
 '6          0200                                                \n'
 '7          0200                                                \n'
 '8          0200                                                \n'
 '9          0200                                                \n'
 '10         0200                                                \n'
 '11         0200                                                \n'
 '12         0200                                                \n'
 '13         0200                                                \n'
 '14         0200                                                \n'
 '15         0200                                                \n'
 '16         0200                                                \n'
 '17         0200                                                \n'
 '18         0200                                                \n'
 '19         0200                                                \n'
 '20         0200                                                \n'
 '21         0200                                                \n'
 '22         0200                                                \n'
 '23         0200                                                \n'
 '24         0200                                                \n'
 '25         0200                                                \n'
 '26         0200                                                \n'
 '27         C000                  ORG   0x0200     ; beginning of RAM space\n'
 '28         C000                                                \n'
 '29         C000                                                \n'
 '30         C000                                                \n'
 '31         C000                                                \n'
 '32         C000                                                \n'
 '33         C000                                                \n'
 '34         C000                                                \n'
 '35         C000                                                \n'
 '36         C000                                                \n'
 '37         C000                                                \n'
 '38         C000                                                \n'
 '39         E000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         E000                                                \n'
 '41         E000                                                \n'
 '42         E000                                                \n'
 '43         E000                                                \n'
 '44         E000                                                \n'
 '45         E000                                                \n'
 '46         E000                                                \n'
 '47         E000                                                \n'
 '48         E000                                                \n'
 '49         E000                                                \n'
 '50         E000                                                \n'
 '51         E000                                                \n'
 '52         E000                                                \n'
 '53         E000                                                \n'
 '54         E000                                                \n'
 '55         E000                                                \n'
 '56         E000                                                \n'
 '57         E000                                                \n'
 '58         E000                                                \n'
 '59         E000                                                \n'
 '60         E000                                                \n'
 '61         E000                                                \n'
 '62         E000                                                \n'
 '63         E000                                                \n'
 '64         E000                                                \n'
 '65         E000                                                \n'
 '66         E000                                                \n'
 '67         E000                                                \n'
 '68         E000                                                \n'
 '69         E000                                                \n'
 '70         E000                                                \n'
 '71         E000                                                \n'
 '72         E000                                                \n'
 '73         E000                                                \n'
 '74         E000                                                \n'
 '75         E000                                                \n'
 '76         E000                                                \n'
 '77         E000                                                \n'
 '78         E000                                                \n'
 '79         E000                                                \n'
 '80         E000                                                \n'
 '81         E000                                                \n'
 '82         E000                                                \n'
 '83         E000                                                \n'
 '84         E000                                                \n'
 '85         E000                                                \n'
 '86         E000                                                \n'
 '87         E000                                                \n'
 '88         E000                                                \n'
 '89         E000                                                \n'
 '90         E000                                                \n'
 '91         E000                                                \n'
 '92         E000                                                \n'
 '93         E000                                                \n'
 '94         E000                                                \n'
 '95         FFFE                  ORG   0xE000                  \n'
 '96         FFFE                                                \n'
 '97         FFFE                                                \n'
 '98         FFFE                                                \n'
 '99         FFFE                                                \n'
 '100        FFFE                                                \n'
 '101        FFFE                                                \n'
 '102        FFFE                                                \n'
 '103        FFFE                                                \n'
 '104        FFFE                                                \n'
 '105        FFFE                                                \n'
 '106        FFFE                                                \n'
 '107        FFFE                                                \n'
 '108        FFFE                                                \n'
 '109        FFFE                                                \n'
 '110        FFFE                                                \n'
 '111        FFFE                                                \n'
 '112        FFFE                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0x0200
INFO:BABY ASSEMBLER:Last known address was 0x201
INFO:BABY ASSEMBLER:Last known address was 0x202
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0xE000
INFO:BABY ASSEMBLER:Last known address was 0xe001
INFO:BABY ASSEMBLER:Last known address was 0xe002
INFO:BABY ASSEMBLER:Last known address was 0xe003
INFO:BABY ASSEMBLER:Last known address was 0xe004
INFO:BABY ASSEMBLER:Last known address was 0xe005
INFO:BABY ASSEMBLER:Last known address was 0xe006
INFO:BABY ASSEMBLER:Last known address was 0xe007
INFO:BABY ASSEMBLER:Last known address was 0xe008
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x202',
 'Count': '0x201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xe008',
 'Row0': '0xE000',
 'Row1': '0xe001',
 'Row2': '0xe002',
 'Row3': '0xe003',
 'Row4': '0xe004',
 'Row5': '0xe005',
 'Row6': '0xe006',
 'Row7': '0xe007'}
INFO:BABY ASSEMBLER:Addresses:
['0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 None,
 None,
 None,
 None]
INFO:BABY ASSEMBLER:Flines:
('0          '
 '0200                                                                    \n'
 '1          '
 '0200                                                                    \n'
 '2          '
 '0200                                                                    \n'
 '3          '
 '0200                                                                    \n'
 '4          '
 '0200                                                                    \n'
 '5          '
 '0200                                                                    \n'
 '6          '
 '0200                                                                    \n'
 '7          '
 '0200                                                                    \n'
 '8          '
 '0200                                                                    \n'
 '9          '
 '0200                                                                    \n'
 '10         '
 '0200                                                                    \n'
 '11         '
 '0200                                                                    \n'
 '12         '
 '0200                                                                    \n'
 '13         '
 '0200                                                                    \n'
 '14         '
 '0200                                                                    \n'
 '15         '
 '0200                                                                    \n'
 '16         '
 '0200                                                                    \n'
 '17         '
 '0200                                                                    \n'
 '18         '
 '0200                                                                    \n'
 '19         '
 '0200                                                                    \n'
 '20         '
 '0200                                                                    \n'
 '21         '
 '0200                                                                    \n'
 '22         '
 '0200                                                                    \n'
 '23         '
 '0200                                                                    \n'
 '24         '
 '0200                                                                    \n'
 '25         '
 '0200                                                                    \n'
 '26         '
 '0200                                                                    \n'
 '27         C000                  ORG   0x0200     ; beginning of RAM '
 'space         \n'
 '28         '
 'C000                                                                    \n'
 '29         '
 'C000                                                                    \n'
 '30         '
 'C000                                                                    \n'
 '31         '
 'C000                                                                    \n'
 '32         '
 'C000                                                                    \n'
 '33         '
 'C000                                                                    \n'
 '34         '
 'C000                                                                    \n'
 '35         '
 'C000                                                                    \n'
 '36         '
 'C000                                                                    \n'
 '37         '
 'C000                                                                    \n'
 '38         '
 'C000                                                                    \n'
 '39         E000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         '
 'E000                                                                    \n'
 '41         '
 'E000                                                                    \n'
 '42         '
 'E000                                                                    \n'
 '43         '
 'E000                                                                    \n'
 '44         '
 'E000                                                                    \n'
 '45         '
 'E000                                                                    \n'
 '46         '
 'E000                                                                    \n'
 '47         '
 'E000                                                                    \n'
 '48         '
 'E000                                                                    \n'
 '49         '
 'E000                                                                    \n'
 '50         '
 'E000                                                                    \n'
 '51         '
 'E000                                                                    \n'
 '52         '
 'E000                                                                    \n'
 '53         '
 'E000                                                                    \n'
 '54         '
 'E000                                                                    \n'
 '55         '
 'E000                                                                    \n'
 '56         '
 'E000                                                                    \n'
 '57         '
 'E000                                                                    \n'
 '58         '
 'E000                                                                    \n'
 '59         '
 'E000                                                                    \n'
 '60         '
 'E000                                                                    \n'
 '61         '
 'E000                                                                    \n'
 '62         '
 'E000                                                                    \n'
 '63         '
 'E000                                                                    \n'
 '64         '
 'E000                                                                    \n'
 '65         '
 'E000                                                                    \n'
 '66         '
 'E000                                                                    \n'
 '67         '
 'E000                                                                    \n'
 '68         '
 'E000                                                                    \n'
 '69         '
 'E000                                                                    \n'
 '70         '
 'E000                                                                    \n'
 '71         '
 'E000                                                                    \n'
 '72         '
 'E000                                                                    \n'
 '73         '
 'E000                                                                    \n'
 '74         '
 'E000                                                                    \n'
 '75         '
 'E000                                                                    \n'
 '76         '
 'E000                                                                    \n'
 '77         '
 'E000                                                                    \n'
 '78         '
 'E000                                                                    \n'
 '79         '
 'E000                                                                    \n'
 '80         '
 'E000                                                                    \n'
 '81         '
 'E000                                                                    \n'
 '82         '
 'E000                                                                    \n'
 '83         '
 'E000                                                                    \n'
 '84         '
 'E000                                                                    \n'
 '85         '
 'E000                                                                    \n'
 '86         '
 'E000                                                                    \n'
 '87         '
 'E000                                                                    \n'
 '88         '
 'E000                                                                    \n'
 '89         '
 'E000                                                                    \n'
 '90         '
 'E000                                                                    \n'
 '91         '
 'E000                                                                    \n'
 '92         '
 'E000                                                                    \n'
 '93         '
 'E000                                                                    \n'
 '94         '
 'E000                                                                    \n'
 '95         FFFE                  ORG   '
 '0xE000                                      \n'
 '96         '
 'FFFE                                                                    \n'
 '97         '
 'FFFE                                                                    \n'
 '98         '
 'FFFE                                                                    \n'
 '99         '
 'FFFE                                                                    \n'
 '100        '
 'FFFE                                                                    \n'
 '101        '
 'FFFE                                                                    \n'
 '102        '
 'FFFE                                                                    \n'
 '103        '
 'FFFE                                                                    \n'
 '104        '
 'FFFE                                                                    \n'
 '105        '
 'FFFE                                                                    \n'
 '106        '
 'FFFE                                                                    \n'
 '107        '
 'FFFE                                                                    \n'
 '108        '
 'FFFE                                                                    \n'
 '109        '
 'FFFE                                                                    \n'
 '110        '
 'FFFE                                                                    \n'
 '111        '
 'FFFE                                                                    \n'
 '112        '
 'FFFE                                                                    \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0x0200
INFO:BABY ASSEMBLER:Last known address was 0x201
INFO:BABY ASSEMBLER:Last known address was 0x202
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0xE000
INFO:BABY ASSEMBLER:Last known address was 0xe001
INFO:BABY ASSEMBLER:Last known address was 0xe002
INFO:BABY ASSEMBLER:Last known address was 0xe003
INFO:BABY ASSEMBLER:Last known address was 0xe004
INFO:BABY ASSEMBLER:Last known address was 0xe005
INFO:BABY ASSEMBLER:Last known address was 0xe006
INFO:BABY ASSEMBLER:Last known address was 0xe007
INFO:BABY ASSEMBLER:Last known address was 0xe008
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x202',
 'Count': '0x201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xe008',
 'Row0': '0xE000',
 'Row1': '0xe001',
 'Row2': '0xe002',
 'Row3': '0xe003',
 'Row4': '0xe004',
 'Row5': '0xe005',
 'Row6': '0xe006',
 'Row7': '0xe007'}
INFO:BABY ASSEMBLER:Addresses:
['0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 '0xFFFE',
 None,
 None,
 None,
 None]
INFO:BABY ASSEMBLER:Flines:
('0          0200                                                \n'
 '1          0200                                                \n'
 '2          0200                                                \n'
 '3          0200                                                \n'
 '4          0200                                                \n'
 '5          0200                                                \n'
 '6          0200                                                \n'
 '7          0200                                                \n'
 '8          0200                                                \n'
 '9          0200                                                \n'
 '10         0200                                                \n'
 '11         0200                                                \n'
 '12         0200                                                \n'
 '13         0200                                                \n'
 '14         0200                                                \n'
 '15         0200                                                \n'
 '16         0200                                                \n'
 '17         0200                                                \n'
 '18         0200                                                \n'
 '19         0200                                                \n'
 '20         0200                                                \n'
 '21         0200                                                \n'
 '22         0200                                                \n'
 '23         0200                                                \n'
 '24         0200                                                \n'
 '25         0200                                                \n'
 '26         0200                                                \n'
 '27         C000                  ORG   0x0200     ; beginning of RAM space\n'
 '28         C000                                                \n'
 '29         C000                                                \n'
 '30         C000                                                \n'
 '31         C000                                                \n'
 '32         C000                                                \n'
 '33         C000                                                \n'
 '34         C000                                                \n'
 '35         C000                                                \n'
 '36         C000                                                \n'
 '37         C000                                                \n'
 '38         C000                                                \n'
 '39         E000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         E000                                                \n'
 '41         E000                                                \n'
 '42         E000                                                \n'
 '43         E000                                                \n'
 '44         E000                                                \n'
 '45         E000                                                \n'
 '46         E000                                                \n'
 '47         E000                                                \n'
 '48         E000                                                \n'
 '49         E000                                                \n'
 '50         E000                                                \n'
 '51         E000                                                \n'
 '52         E000                                                \n'
 '53         E000                                                \n'
 '54         E000                                                \n'
 '55         E000                                                \n'
 '56         E000                                                \n'
 '57         E000                                                \n'
 '58         E000                                                \n'
 '59         E000                                                \n'
 '60         E000                                                \n'
 '61         E000                                                \n'
 '62         E000                                                \n'
 '63         E000                                                \n'
 '64         E000                                                \n'
 '65         E000                                                \n'
 '66         E000                                                \n'
 '67         E000                                                \n'
 '68         E000                                                \n'
 '69         E000                                                \n'
 '70         E000                                                \n'
 '71         E000                                                \n'
 '72         E000                                                \n'
 '73         E000                                                \n'
 '74         E000                                                \n'
 '75         E000                                                \n'
 '76         E000                                                \n'
 '77         E000                                                \n'
 '78         E000                                                \n'
 '79         E000                                                \n'
 '80         E000                                                \n'
 '81         E000                                                \n'
 '82         E000                                                \n'
 '83         E000                                                \n'
 '84         E000                                                \n'
 '85         E000                                                \n'
 '86         E000                                                \n'
 '87         E000                                                \n'
 '88         E000                                                \n'
 '89         E000                                                \n'
 '90         E000                                                \n'
 '91         E000                                                \n'
 '92         E000                                                \n'
 '93         E000                                                \n'
 '94         E000                                                \n'
 '95         FFFE                  ORG   0xE000                  \n'
 '96         FFFE                                                \n'
 '97         FFFE                                                \n'
 '98         FFFE                                                \n'
 '99         FFFE                                                \n'
 '100        FFFE                                                \n'
 '101        FFFE                                                \n'
 '102        FFFE                                                \n'
 '103        FFFE                                                \n'
 '104        FFFE                                                \n'
 '105        FFFE                                                \n'
 '106        FFFE                                                \n'
 '107        FFFE                                                \n'
 '108        FFFE                                                \n'
 '109        FFFE                                                \n'
 '110        FFFE                                                \n'
 '111        FFFE                                                \n'
 '112        FFFE                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0x0200
INFO:BABY ASSEMBLER:Last known address was 0x201
INFO:BABY ASSEMBLER:Last known address was 0x202
DEBUG:BABY ASSEMBLER:0x202
DEBUG:BABY ASSEMBLER:0x202
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0xE000
INFO:BABY ASSEMBLER:Last known address was 0xe001
INFO:BABY ASSEMBLER:Last known address was 0xe002
INFO:BABY ASSEMBLER:Last known address was 0xe003
INFO:BABY ASSEMBLER:Last known address was 0xe004
INFO:BABY ASSEMBLER:Last known address was 0xe005
INFO:BABY ASSEMBLER:Last known address was 0xe006
INFO:BABY ASSEMBLER:Last known address was 0xe007
INFO:BABY ASSEMBLER:Last known address was 0xe008
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x202',
 'Count': '0x201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xe008',
 'Row0': '0xE000',
 'Row1': '0xe001',
 'Row2': '0xe002',
 'Row3': '0xe003',
 'Row4': '0xe004',
 'Row5': '0xe005',
 'Row6': '0xe006',
 'Row7': '0xe007'}
INFO:BABY ASSEMBLER:Flines:
('0          0200                                                \n'
 '1          0200                                                \n'
 '2          0200                                                \n'
 '3          0200                                                \n'
 '4          0200                                                \n'
 '5          0200                                                \n'
 '6          0200                                                \n'
 '7          0200                                                \n'
 '8          0200                                                \n'
 '9          0200                                                \n'
 '10         0200                                                \n'
 '11         0200                                                \n'
 '12         0200                                                \n'
 '13         0200                                                \n'
 '14         0200                                                \n'
 '15         0200                                                \n'
 '16         0200                                                \n'
 '17         0200                                                \n'
 '18         0200                                                \n'
 '19         0200                                                \n'
 '20         0200                                                \n'
 '21         0200                                                \n'
 '22         0200                                                \n'
 '23         0200                                                \n'
 '24         0200                                                \n'
 '25         0200                                                \n'
 '26         0200                                                \n'
 '27         C000                  ORG   0x0200     ; beginning of RAM space\n'
 '28         C000                                                \n'
 '29         C000                                                \n'
 '30         C000                                                \n'
 '31         C000                                                \n'
 '32         C000                                                \n'
 '33         C000                                                \n'
 '34         C000                                                \n'
 '35         C000                                                \n'
 '36         C000                                                \n'
 '37         C000                                                \n'
 '38         C000                                                \n'
 '39         E000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         E000                                                \n'
 '41         E000                                                \n'
 '42         E000                                                \n'
 '43         E000                                                \n'
 '44         E000                                                \n'
 '45         E000                                                \n'
 '46         E000                                                \n'
 '47         E000                                                \n'
 '48         E000                                                \n'
 '49         E000                                                \n'
 '50         E000                                                \n'
 '51         E000                                                \n'
 '52         E000                                                \n'
 '53         E000                                                \n'
 '54         E000                                                \n'
 '55         E000                                                \n'
 '56         E000                                                \n'
 '57         E000                                                \n'
 '58         E000                                                \n'
 '59         E000                                                \n'
 '60         E000                                                \n'
 '61         E000                                                \n'
 '62         E000                                                \n'
 '63         E000                                                \n'
 '64         E000                                                \n'
 '65         E000                                                \n'
 '66         E000                                                \n'
 '67         E000                                                \n'
 '68         E000                                                \n'
 '69         E000                                                \n'
 '70         E000                                                \n'
 '71         E000                                                \n'
 '72         E000                                                \n'
 '73         E000                                                \n'
 '74         E000                                                \n'
 '75         E000                                                \n'
 '76         E000                                                \n'
 '77         E000                                                \n'
 '78         E000                                                \n'
 '79         E000                                                \n'
 '80         E000                                                \n'
 '81         E000                                                \n'
 '82         E000                                                \n'
 '83         E000                                                \n'
 '84         E000                                                \n'
 '85         E000                                                \n'
 '86         E000                                                \n'
 '87         E000                                                \n'
 '88         E000                                                \n'
 '89         E000                                                \n'
 '90         E000                                                \n'
 '91         E000                                                \n'
 '92         E000                                                \n'
 '93         E000                                                \n'
 '94         E000                                                \n'
 '95         FFFE                  ORG   0xE000                  \n'
 '96         FFFE                                                \n'
 '97         FFFE                                                \n'
 '98         FFFE                                                \n'
 '99         FFFE                                                \n'
 '100        FFFE                                                \n'
 '101        FFFE                                                \n'
 '102        FFFE                                                \n'
 '103        FFFE                                                \n'
 '104        FFFE                                                \n'
 '105        FFFE                                                \n'
 '106        FFFE                                                \n'
 '107        FFFE                                                \n'
 '108        FFFE                                                \n'
 '109        FFFE                                                \n'
 '110        FFFE                                                \n'
 '111        FFFE                                                \n'
 '112        FFFE                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0x0200
INFO:BABY ASSEMBLER:Last known address was 0x201
INFO:BABY ASSEMBLER:Last known address was 0x202
DEBUG:BABY ASSEMBLER:0x202
DEBUG:BABY ASSEMBLER:0x0202
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0xE000
INFO:BABY ASSEMBLER:Last known address was 0xe001
INFO:BABY ASSEMBLER:Last known address was 0xe002
INFO:BABY ASSEMBLER:Last known address was 0xe003
INFO:BABY ASSEMBLER:Last known address was 0xe004
INFO:BABY ASSEMBLER:Last known address was 0xe005
INFO:BABY ASSEMBLER:Last known address was 0xe006
INFO:BABY ASSEMBLER:Last known address was 0xe007
INFO:BABY ASSEMBLER:Last known address was 0xe008
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x202',
 'Count': '0x201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xe008',
 'Row0': '0xE000',
 'Row1': '0xe001',
 'Row2': '0xe002',
 'Row3': '0xe003',
 'Row4': '0xe004',
 'Row5': '0xe005',
 'Row6': '0xe006',
 'Row7': '0xe007'}
INFO:BABY ASSEMBLER:Flines:
('0          0200                                                \n'
 '1          0200                                                \n'
 '2          0200                                                \n'
 '3          0200                                                \n'
 '4          0200                                                \n'
 '5          0200                                                \n'
 '6          0200                                                \n'
 '7          0200                                                \n'
 '8          0200                                                \n'
 '9          0200                                                \n'
 '10         0200                                                \n'
 '11         0200                                                \n'
 '12         0200                                                \n'
 '13         0200                                                \n'
 '14         0200                                                \n'
 '15         0200                                                \n'
 '16         0200                                                \n'
 '17         0200                                                \n'
 '18         0200                                                \n'
 '19         0200                                                \n'
 '20         0200                                                \n'
 '21         0200                                                \n'
 '22         0200                                                \n'
 '23         0200                                                \n'
 '24         0200                                                \n'
 '25         0200                                                \n'
 '26         0200                                                \n'
 '27         C000                  ORG   0x0200     ; beginning of RAM space\n'
 '28         C000                                                \n'
 '29         C000                                                \n'
 '30         C000                                                \n'
 '31         C000                                                \n'
 '32         C000                                                \n'
 '33         C000                                                \n'
 '34         C000                                                \n'
 '35         C000                                                \n'
 '36         C000                                                \n'
 '37         C000                                                \n'
 '38         C000                                                \n'
 '39         E000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         E000                                                \n'
 '41         E000                                                \n'
 '42         E000                                                \n'
 '43         E000                                                \n'
 '44         E000                                                \n'
 '45         E000                                                \n'
 '46         E000                                                \n'
 '47         E000                                                \n'
 '48         E000                                                \n'
 '49         E000                                                \n'
 '50         E000                                                \n'
 '51         E000                                                \n'
 '52         E000                                                \n'
 '53         E000                                                \n'
 '54         E000                                                \n'
 '55         E000                                                \n'
 '56         E000                                                \n'
 '57         E000                                                \n'
 '58         E000                                                \n'
 '59         E000                                                \n'
 '60         E000                                                \n'
 '61         E000                                                \n'
 '62         E000                                                \n'
 '63         E000                                                \n'
 '64         E000                                                \n'
 '65         E000                                                \n'
 '66         E000                                                \n'
 '67         E000                                                \n'
 '68         E000                                                \n'
 '69         E000                                                \n'
 '70         E000                                                \n'
 '71         E000                                                \n'
 '72         E000                                                \n'
 '73         E000                                                \n'
 '74         E000                                                \n'
 '75         E000                                                \n'
 '76         E000                                                \n'
 '77         E000                                                \n'
 '78         E000                                                \n'
 '79         E000                                                \n'
 '80         E000                                                \n'
 '81         E000                                                \n'
 '82         E000                                                \n'
 '83         E000                                                \n'
 '84         E000                                                \n'
 '85         E000                                                \n'
 '86         E000                                                \n'
 '87         E000                                                \n'
 '88         E000                                                \n'
 '89         E000                                                \n'
 '90         E000                                                \n'
 '91         E000                                                \n'
 '92         E000                                                \n'
 '93         E000                                                \n'
 '94         E000                                                \n'
 '95         FFFE                  ORG   0xE000                  \n'
 '96         FFFE                                                \n'
 '97         FFFE                                                \n'
 '98         FFFE                                                \n'
 '99         FFFE                                                \n'
 '100        FFFE                                                \n'
 '101        FFFE                                                \n'
 '102        FFFE                                                \n'
 '103        FFFE                                                \n'
 '104        FFFE                                                \n'
 '105        FFFE                                                \n'
 '106        FFFE                                                \n'
 '107        FFFE                                                \n'
 '108        FFFE                                                \n'
 '109        FFFE                                                \n'
 '110        FFFE                                                \n'
 '111        FFFE                                                \n'
 '112        FFFE                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0x0200
INFO:BABY ASSEMBLER:Last known address was 0x201
INFO:BABY ASSEMBLER:Last known address was 0x202
DEBUG:BABY ASSEMBLER:0x202
DEBUG:BABY ASSEMBLER:0x0202
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0xE000
INFO:BABY ASSEMBLER:Last known address was 0xe001
INFO:BABY ASSEMBLER:Last known address was 0xe002
INFO:BABY ASSEMBLER:Last known address was 0xe003
INFO:BABY ASSEMBLER:Last known address was 0xe004
INFO:BABY ASSEMBLER:Last known address was 0xe005
INFO:BABY ASSEMBLER:Last known address was 0xe006
INFO:BABY ASSEMBLER:Last known address was 0xe007
INFO:BABY ASSEMBLER:Last known address was 0xe008
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x202',
 'Count': '0x201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xe008',
 'Row0': '0xE000',
 'Row1': '0xe001',
 'Row2': '0xe002',
 'Row3': '0xe003',
 'Row4': '0xe004',
 'Row5': '0xe005',
 'Row6': '0xe006',
 'Row7': '0xe007'}
INFO:BABY ASSEMBLER:Flines:
''
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0x0200
INFO:BABY ASSEMBLER:Last known address was 0x201
INFO:BABY ASSEMBLER:Last known address was 0x202
DEBUG:BABY ASSEMBLER:0x202
DEBUG:BABY ASSEMBLER:0x0202
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0xE000
INFO:BABY ASSEMBLER:Last known address was 0xe001
INFO:BABY ASSEMBLER:Last known address was 0xe002
INFO:BABY ASSEMBLER:Last known address was 0xe003
INFO:BABY ASSEMBLER:Last known address was 0xe004
INFO:BABY ASSEMBLER:Last known address was 0xe005
INFO:BABY ASSEMBLER:Last known address was 0xe006
INFO:BABY ASSEMBLER:Last known address was 0xe007
INFO:BABY ASSEMBLER:Last known address was 0xe008
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x202',
 'Count': '0x201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xe008',
 'Row0': '0xE000',
 'Row1': '0xe001',
 'Row2': '0xe002',
 'Row3': '0xe003',
 'Row4': '0xe004',
 'Row5': '0xe005',
 'Row6': '0xe006',
 'Row7': '0xe007'}
INFO:BABY ASSEMBLER:Flines:
('0          0200                                                \n'
 '1          0200                                                \n'
 '2          0200                                                \n'
 '3          0200                                                \n'
 '4          0200                                                \n'
 '5          0200                                                \n'
 '6          0200                                                \n'
 '7          0200                                                \n'
 '8          0200                                                \n'
 '9          0200                                                \n'
 '10         0200                                                \n'
 '11         0200                                                \n'
 '12         0200                                                \n'
 '13         0200                                                \n'
 '14         0200                                                \n'
 '15         0200                                                \n'
 '16         0200                                                \n'
 '17         0200                                                \n'
 '18         0200                                                \n'
 '19         0200                                                \n'
 '20         0200                                                \n'
 '21         0200                                                \n'
 '22         0200                                                \n'
 '23         0200                                                \n'
 '24         0200                                                \n'
 '25         0200                                                \n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0200                                                \n'
 '29         201                                                 \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0x0200
INFO:BABY ASSEMBLER:Last known address was 0x201
INFO:BABY ASSEMBLER:Last known address was 0x202
DEBUG:BABY ASSEMBLER:0x202
DEBUG:BABY ASSEMBLER:0x0202
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0xE000
INFO:BABY ASSEMBLER:Last known address was 0xe001
INFO:BABY ASSEMBLER:Last known address was 0xe002
INFO:BABY ASSEMBLER:Last known address was 0xe003
INFO:BABY ASSEMBLER:Last known address was 0xe004
INFO:BABY ASSEMBLER:Last known address was 0xe005
INFO:BABY ASSEMBLER:Last known address was 0xe006
INFO:BABY ASSEMBLER:Last known address was 0xe007
INFO:BABY ASSEMBLER:Last known address was 0xe008
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x202',
 'Count': '0x201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xe008',
 'Row0': '0xE000',
 'Row1': '0xe001',
 'Row2': '0xe002',
 'Row3': '0xe003',
 'Row4': '0xe004',
 'Row5': '0xe005',
 'Row6': '0xe006',
 'Row7': '0xe007'}
INFO:BABY ASSEMBLER:Flines:
('0          0200                                                \n'
 '1          0200                                                \n'
 '2          0200                                                \n'
 '3          0200                                                \n'
 '4          0200                                                \n'
 '5          0200                                                \n'
 '6          0200                                                \n'
 '7          0200                                                \n'
 '8          0200                                                \n'
 '9          0200                                                \n'
 '10         0200                                                \n'
 '11         0200                                                \n'
 '12         0200                                                \n'
 '13         0200                                                \n'
 '14         0200                                                \n'
 '15         0200                                                \n'
 '16         0200                                                \n'
 '17         0200                                                \n'
 '18         0200                                                \n'
 '19         0200                                                \n'
 '20         0200                                                \n'
 '21         0200                                                \n'
 '22         0200                                                \n'
 '23         0200                                                \n'
 '24         0200                                                \n'
 '25         0200                                                \n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0200                                                \n'
 '29         0201                                                \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0x0200
INFO:BABY ASSEMBLER:Last known address was 0x201
INFO:BABY ASSEMBLER:Last known address was 0x202
DEBUG:BABY ASSEMBLER:0x202
DEBUG:BABY ASSEMBLER:0x0202
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0xE000
INFO:BABY ASSEMBLER:Last known address was 0xe001
INFO:BABY ASSEMBLER:Last known address was 0xe002
INFO:BABY ASSEMBLER:Last known address was 0xe003
INFO:BABY ASSEMBLER:Last known address was 0xe004
INFO:BABY ASSEMBLER:Last known address was 0xe005
INFO:BABY ASSEMBLER:Last known address was 0xe006
INFO:BABY ASSEMBLER:Last known address was 0xe007
INFO:BABY ASSEMBLER:Last known address was 0xe008
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x202',
 'Count': '0x201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xe008',
 'Row0': '0xE000',
 'Row1': '0xe001',
 'Row2': '0xe002',
 'Row3': '0xe003',
 'Row4': '0xe004',
 'Row5': '0xe005',
 'Row6': '0xe006',
 'Row7': '0xe007'}
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0200                  LoopCount       DB    0       \n'
 '29         0201                  Count           DB    0       \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0x0200
INFO:BABY ASSEMBLER:Last known address was 0x201
INFO:BABY ASSEMBLER:Last known address was 0x202
DEBUG:BABY ASSEMBLER:0x202
DEBUG:BABY ASSEMBLER:0x0202
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0xE000
INFO:BABY ASSEMBLER:Last known address was 0xe001
INFO:BABY ASSEMBLER:Last known address was 0xe002
INFO:BABY ASSEMBLER:Last known address was 0xe003
INFO:BABY ASSEMBLER:Last known address was 0xe004
INFO:BABY ASSEMBLER:Last known address was 0xe005
INFO:BABY ASSEMBLER:Last known address was 0xe006
INFO:BABY ASSEMBLER:Last known address was 0xe007
INFO:BABY ASSEMBLER:Last known address was 0xe008
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x202',
 'Count': '0x201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xe008',
 'Row0': '0xE000',
 'Row1': '0xe001',
 'Row2': '0xe002',
 'Row3': '0xe003',
 'Row4': '0xe004',
 'Row5': '0xe005',
 'Row6': '0xe006',
 'Row7': '0xe007'}
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0200                  LoopCount       DB    0       \n'
 '29         0201                  Count           DB    0       \n'
 '30         C000                                                \n'
 '31         C000                  ;define a table (array) of 8 bytes\n'
 '32         0202                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         C000                  ; bytes in RAM space          \n'
 '34         C000                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         C000                  ;  literally "Current address minus\n'
 '36         C000                  ;  address of BufferTable"    \n'
 '37         C000                                                \n'
 '38         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         E000                  ; this is Program memory start\n'
 '41         E000                  ; address for MSP430G2553 (16K)\n'
 '42         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         E000                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         E000                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         E000                                                \n'
 '46         E000                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         E000                                                \n'
 '48         E000                  MainProgramStart              \n'
 '49         E000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         E000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         E000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         E000                  ClearNextByte                 \n'
 '53         E000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         E000                                                \n'
 '55         E000                  inc R14                ; point to next byte '
 'in table\n'
 '56         E000                  dec R15                ; done them all '
 'yet?\n'
 '57         E000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         E000                  FinishedClearingRAMtable      \n'
 '59         E000                                                \n'
 '60         E000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         E000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         E000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         E000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         E000                                                \n'
 '65         E000                  GetNextByte                   \n'
 '66         E000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         E000                                                \n'
 '68         E000                  inc R13                    ;increment '
 'source addr\n'
 '69         E000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         E000                  dec R15                ; done them all '
 'yet?\n'
 '71         E000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         E000                  FinishedCopyingTableToRAM     \n'
 '73         E000                                                \n'
 '74         E000                  Done        jz     Done           ;  halt '
 'here\n'
 '75         E000                  jnz    Done                   \n'
 '76         E000                                                \n'
 '77         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         E000                  ;           End of main code  \n'
 '79         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         E000                                                \n'
 '81         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         E000                  ;           Subroutines       \n'
 '83         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         E000                                                \n'
 '85         E000                  ; none used here              \n'
 '86         E000                                                \n'
 '87         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         E000                  ;           End of all Subroutines\n'
 '89         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         E000                                                \n'
 '91         E000                                                \n'
 '92         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         E000                  ;           Definition of Program Data '
 'Memory\n'
 '94         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         FFFE                                                \n'
 '97         FFFE                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         E000                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e001                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e002                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e003                  Row3    DB  '-'               \n"
 "102        e004                  Row4    DB  '3'               \n"
 "103        e005                  Row5    DB  '3'               \n"
 "104        e006                  Row6    DB  '6'               \n"
 "105        e007                  Row7    DB  '2'               \n"
 '106        FFFE                                                \n'
 '107        e008                  PatternTable2  DB "EXAMPLES"  \n'
 '108        FFFE                                                \n'
 '109        FFFE                  '
 ';-------------------------------------------------------------------------------\n'
 '110        FFFE                  ;           Interrupt Vectors \n'
 '111        FFFE                  '
 ';-------------------------------------------------------------------------------\n'
 '112        FFFE                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0x0200
INFO:BABY ASSEMBLER:Last known address was 0x201
INFO:BABY ASSEMBLER:Last known address was 0x202
DEBUG:BABY ASSEMBLER:0x202
DEBUG:BABY ASSEMBLER:0x0202
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0xE000
INFO:BABY ASSEMBLER:Last known address was 0xe001
INFO:BABY ASSEMBLER:Last known address was 0xe002
INFO:BABY ASSEMBLER:Last known address was 0xe003
INFO:BABY ASSEMBLER:Last known address was 0xe004
INFO:BABY ASSEMBLER:Last known address was 0xe005
INFO:BABY ASSEMBLER:Last known address was 0xe006
INFO:BABY ASSEMBLER:Last known address was 0xe007
INFO:BABY ASSEMBLER:Last known address was 0xe008
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x202',
 'Count': '0x201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xe008',
 'Row0': '0xE000',
 'Row1': '0xe001',
 'Row2': '0xe002',
 'Row3': '0xe003',
 'Row4': '0xe004',
 'Row5': '0xe005',
 'Row6': '0xe006',
 'Row7': '0xe007'}
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0200                  LoopCount       DB    0       \n'
 '29         0201                  Count           DB    0       \n'
 '30         C000                                                \n'
 '31         C000                  ;define a table (array) of 8 bytes\n'
 '32         0202                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         C000                  ; bytes in RAM space          \n'
 '34         C000                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         C000                  ;  literally "Current address minus\n'
 '36         C000                  ;  address of BufferTable"    \n'
 '37         C000                                                \n'
 '38         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         E000                  ; this is Program memory start\n'
 '41         E000                  ; address for MSP430G2553 (16K)\n'
 '42         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         E000                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         E000                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         E000                                                \n'
 '46         E000                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         E000                                                \n'
 '48         E000                  MainProgramStart              \n'
 '49         E000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         E000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         E000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         E000                  ClearNextByte                 \n'
 '53         E000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         E000                                                \n'
 '55         E000                  inc R14                ; point to next byte '
 'in table\n'
 '56         E000                  dec R15                ; done them all '
 'yet?\n'
 '57         E000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         E000                  FinishedClearingRAMtable      \n'
 '59         E000                                                \n'
 '60         E000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         E000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         E000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         E000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         E000                                                \n'
 '65         E000                  GetNextByte                   \n'
 '66         E000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         E000                                                \n'
 '68         E000                  inc R13                    ;increment '
 'source addr\n'
 '69         E000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         E000                  dec R15                ; done them all '
 'yet?\n'
 '71         E000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         E000                  FinishedCopyingTableToRAM     \n'
 '73         E000                                                \n'
 '74         E000                  Done        jz     Done           ;  halt '
 'here\n'
 '75         E000                  jnz    Done                   \n'
 '76         E000                                                \n'
 '77         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         E000                  ;           End of main code  \n'
 '79         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         E000                                                \n'
 '81         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         E000                  ;           Subroutines       \n'
 '83         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         E000                                                \n'
 '85         E000                  ; none used here              \n'
 '86         E000                                                \n'
 '87         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         E000                  ;           End of all Subroutines\n'
 '89         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         E000                                                \n'
 '91         E000                                                \n'
 '92         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         E000                  ;           Definition of Program Data '
 'Memory\n'
 '94         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         FFFE                                                \n'
 '97         FFFE                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         E000                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e001                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e002                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e003                  Row3    DB  '-'               \n"
 "102        e004                  Row4    DB  '3'               \n"
 "103        e005                  Row5    DB  '3'               \n"
 "104        e006                  Row6    DB  '6'               \n"
 "105        e007                  Row7    DB  '2'               \n"
 '106        FFFE                                                \n'
 '107        e008                  PatternTable2  DB "EXAMPLES"  \n'
 '108        FFFE                                                \n'
 '109        FFFE                  '
 ';-------------------------------------------------------------------------------\n'
 '110        FFFE                  ;           Interrupt Vectors \n'
 '111        FFFE                  '
 ';-------------------------------------------------------------------------------\n'
 '112        FFFE                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0x0200
INFO:BABY ASSEMBLER:Last known address was 0x201
INFO:BABY ASSEMBLER:Last known address was 0x202
DEBUG:BABY ASSEMBLER:0x202
DEBUG:BABY ASSEMBLER:0x0202
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0xE000
INFO:BABY ASSEMBLER:Last known address was 0xe001
INFO:BABY ASSEMBLER:Last known address was 0xe002
INFO:BABY ASSEMBLER:Last known address was 0xe003
INFO:BABY ASSEMBLER:Last known address was 0xe004
INFO:BABY ASSEMBLER:Last known address was 0xe005
INFO:BABY ASSEMBLER:Last known address was 0xe006
INFO:BABY ASSEMBLER:Last known address was 0xe007
INFO:BABY ASSEMBLER:Last known address was 0xe008
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x202',
 'Count': '0x201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xe008',
 'Row0': '0xE000',
 'Row1': '0xe001',
 'Row2': '0xe002',
 'Row3': '0xe003',
 'Row4': '0xe004',
 'Row5': '0xe005',
 'Row6': '0xe006',
 'Row7': '0xe007'}
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0200                  LoopCount       DB    0       \n'
 '29         0201                  Count           DB    0       \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0x0200
INFO:BABY ASSEMBLER:Last known address was 0x201
INFO:BABY ASSEMBLER:Last known address was 0x202
DEBUG:BABY ASSEMBLER:0x202
DEBUG:BABY ASSEMBLER:0x0202
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0xE000
INFO:BABY ASSEMBLER:Last known address was 0xe001
INFO:BABY ASSEMBLER:Last known address was 0xe002
INFO:BABY ASSEMBLER:Last known address was 0xe003
INFO:BABY ASSEMBLER:Last known address was 0xe004
INFO:BABY ASSEMBLER:Last known address was 0xe005
INFO:BABY ASSEMBLER:Last known address was 0xe006
INFO:BABY ASSEMBLER:Last known address was 0xe007
INFO:BABY ASSEMBLER:Last known address was 0xe008
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x202',
 'Count': '0x201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xe008',
 'Row0': '0xE000',
 'Row1': '0xe001',
 'Row2': '0xe002',
 'Row3': '0xe003',
 'Row4': '0xe004',
 'Row5': '0xe005',
 'Row6': '0xe006',
 'Row7': '0xe007'}
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0200                  LoopCount       DB    0       \n'
 '29         0201                  Count           DB    0       \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0x0200
INFO:BABY ASSEMBLER:Last known address was 0x201
INFO:BABY ASSEMBLER:Last known address was 0x204
DEBUG:BABY ASSEMBLER:0x204
DEBUG:BABY ASSEMBLER:0x0204
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0xe002
INFO:BABY ASSEMBLER:Last known address was 0xe003
INFO:BABY ASSEMBLER:Last known address was 0xe004
INFO:BABY ASSEMBLER:Last known address was 0xe005
INFO:BABY ASSEMBLER:Last known address was 0xe006
INFO:BABY ASSEMBLER:Last known address was 0xe007
INFO:BABY ASSEMBLER:Last known address was 0xe008
INFO:BABY ASSEMBLER:Last known address was 0xe009
INFO:BABY ASSEMBLER:Last known address was 0xe00a
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x204',
 'Count': '0x201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xe00a',
 'Row0': '0xe002',
 'Row1': '0xe003',
 'Row2': '0xe004',
 'Row3': '0xe005',
 'Row4': '0xe006',
 'Row5': '0xe007',
 'Row6': '0xe008',
 'Row7': '0xe009'}
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0000                  ;   Test source code for Advanced '
 'Microcontroller Software\n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0x0200
INFO:BABY ASSEMBLER:Last known address was 0x201
INFO:BABY ASSEMBLER:Last known address was 0x202
DEBUG:BABY ASSEMBLER:0x202
DEBUG:BABY ASSEMBLER:0x0202
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0xE000
INFO:BABY ASSEMBLER:Last known address was 0xe001
INFO:BABY ASSEMBLER:Last known address was 0xe002
INFO:BABY ASSEMBLER:Last known address was 0xe003
INFO:BABY ASSEMBLER:Last known address was 0xe004
INFO:BABY ASSEMBLER:Last known address was 0xe005
INFO:BABY ASSEMBLER:Last known address was 0xe006
INFO:BABY ASSEMBLER:Last known address was 0xe007
INFO:BABY ASSEMBLER:Last known address was 0xe008
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x202',
 'Count': '0x201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xe008',
 'Row0': '0xE000',
 'Row1': '0xe001',
 'Row2': '0xe002',
 'Row3': '0xe003',
 'Row4': '0xe004',
 'Row5': '0xe005',
 'Row6': '0xe006',
 'Row7': '0xe007'}
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0200                  LoopCount       DB    0       \n'
 '29         0201                  Count           DB    0       \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0x0200
INFO:BABY ASSEMBLER:Last known address was 0x201
INFO:BABY ASSEMBLER:Last known address was 0x202
DEBUG:BABY ASSEMBLER:0x202
DEBUG:BABY ASSEMBLER:0x0202
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0xE000
INFO:BABY ASSEMBLER:Last known address was 0xe001
INFO:BABY ASSEMBLER:Last known address was 0xe002
INFO:BABY ASSEMBLER:Last known address was 0xe003
INFO:BABY ASSEMBLER:Last known address was 0xe004
INFO:BABY ASSEMBLER:Last known address was 0xe005
INFO:BABY ASSEMBLER:Last known address was 0xe006
INFO:BABY ASSEMBLER:Last known address was 0xe007
INFO:BABY ASSEMBLER:Last known address was 0xe008
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x202',
 'Count': '0x201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xe008',
 'Row0': '0xE000',
 'Row1': '0xe001',
 'Row2': '0xe002',
 'Row3': '0xe003',
 'Row4': '0xe004',
 'Row5': '0xe005',
 'Row6': '0xe006',
 'Row7': '0xe007'}
INFO:BABY ASSEMBLER:Flines:
''
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0x0200
INFO:BABY ASSEMBLER:Last known address was 0x201
INFO:BABY ASSEMBLER:Last known address was 0x202
DEBUG:BABY ASSEMBLER:0x202
DEBUG:BABY ASSEMBLER:0x0202
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0xE000
INFO:BABY ASSEMBLER:Last known address was 0xe001
INFO:BABY ASSEMBLER:Last known address was 0xe002
INFO:BABY ASSEMBLER:Last known address was 0xe003
INFO:BABY ASSEMBLER:Last known address was 0xe004
INFO:BABY ASSEMBLER:Last known address was 0xe005
INFO:BABY ASSEMBLER:Last known address was 0xe006
INFO:BABY ASSEMBLER:Last known address was 0xe007
INFO:BABY ASSEMBLER:Last known address was 0xe008
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x202',
 'Count': '0x201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xe008',
 'Row0': '0xE000',
 'Row1': '0xe001',
 'Row2': '0xe002',
 'Row3': '0xe003',
 'Row4': '0xe004',
 'Row5': '0xe005',
 'Row6': '0xe006',
 'Row7': '0xe007'}
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0200                  LoopCount       DB    0       \n'
 '29         0201                  Count           DB    0       \n'
 '30         C000                                                \n'
 '31         C000                  ;define a table (array) of 8 bytes\n'
 '32         0202                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         C000                  ; bytes in RAM space          \n'
 '34         C000                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         C000                  ;  literally "Current address minus\n'
 '36         C000                  ;  address of BufferTable"    \n'
 '37         C000                                                \n'
 '38         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         E000                  ; this is Program memory start\n'
 '41         E000                  ; address for MSP430G2553 (16K)\n'
 '42         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         E000                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         E000                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         E000                                                \n'
 '46         E000                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         E000                                                \n'
 '48         E000                  MainProgramStart              \n'
 '49         E000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         E000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         E000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         E000                  ClearNextByte                 \n'
 '53         E000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         E000                                                \n'
 '55         E000                  inc R14                ; point to next byte '
 'in table\n'
 '56         E000                  dec R15                ; done them all '
 'yet?\n'
 '57         E000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         E000                  FinishedClearingRAMtable      \n'
 '59         E000                                                \n'
 '60         E000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         E000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         E000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         E000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         E000                                                \n'
 '65         E000                  GetNextByte                   \n'
 '66         E000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         E000                                                \n'
 '68         E000                  inc R13                    ;increment '
 'source addr\n'
 '69         E000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         E000                  dec R15                ; done them all '
 'yet?\n'
 '71         E000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         E000                  FinishedCopyingTableToRAM     \n'
 '73         E000                                                \n'
 '74         E000                  Done        jz     Done           ;  halt '
 'here\n'
 '75         E000                  jnz    Done                   \n'
 '76         E000                                                \n'
 '77         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         E000                  ;           End of main code  \n'
 '79         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         E000                                                \n'
 '81         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         E000                  ;           Subroutines       \n'
 '83         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         E000                                                \n'
 '85         E000                  ; none used here              \n'
 '86         E000                                                \n'
 '87         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         E000                  ;           End of all Subroutines\n'
 '89         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         E000                                                \n'
 '91         E000                                                \n'
 '92         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         E000                  ;           Definition of Program Data '
 'Memory\n'
 '94         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         FFFE                                                \n'
 '97         FFFE                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         E000                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e001                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e002                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e003                  Row3    DB  '-'               \n"
 "102        e004                  Row4    DB  '3'               \n"
 "103        e005                  Row5    DB  '3'               \n"
 "104        e006                  Row6    DB  '6'               \n"
 "105        e007                  Row7    DB  '2'               \n"
 '106        FFFE                                                \n'
 '107        e008                  PatternTable2  DB "EXAMPLES"  \n'
 '108        FFFE                                                \n'
 '109        FFFE                  '
 ';-------------------------------------------------------------------------------\n'
 '110        FFFE                  ;           Interrupt Vectors \n'
 '111        FFFE                  '
 ';-------------------------------------------------------------------------------\n'
 '112        FFFE                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0x0200
INFO:BABY ASSEMBLER:Last known address was 0x201
INFO:BABY ASSEMBLER:Last known address was 0x202
DEBUG:BABY ASSEMBLER:0x202
DEBUG:BABY ASSEMBLER:0x0202
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Last known address was 0xE000
INFO:BABY ASSEMBLER:Last known address was 0xe001
INFO:BABY ASSEMBLER:Last known address was 0xe002
INFO:BABY ASSEMBLER:Last known address was 0xe003
INFO:BABY ASSEMBLER:Last known address was 0xe004
INFO:BABY ASSEMBLER:Last known address was 0xe005
INFO:BABY ASSEMBLER:Last known address was 0xe006
INFO:BABY ASSEMBLER:Last known address was 0xe007
INFO:BABY ASSEMBLER:Last known address was 0xe008
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x202',
 'Count': '0x201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xe008',
 'Row0': '0xE000',
 'Row1': '0xe001',
 'Row2': '0xe002',
 'Row3': '0xe003',
 'Row4': '0xe004',
 'Row5': '0xe005',
 'Row6': '0xe006',
 'Row7': '0xe007'}
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0200                  LoopCount       DB    0       \n'
 '29         0201                  Count           DB    0       \n'
 '30         C000                                                \n'
 '31         C000                  ;define a table (array) of 8 bytes\n'
 '32         0202                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         C000                  ; bytes in RAM space          \n'
 '34         C000                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         C000                  ;  literally "Current address minus\n'
 '36         C000                  ;  address of BufferTable"    \n'
 '37         C000                                                \n'
 '38         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         E000                  ; this is Program memory start\n'
 '41         E000                  ; address for MSP430G2553 (16K)\n'
 '42         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         E000                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         E000                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         E000                                                \n'
 '46         E000                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         E000                                                \n'
 '48         E000                  MainProgramStart              \n'
 '49         E000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         E000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         E000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         E000                  ClearNextByte                 \n'
 '53         E000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         E000                                                \n'
 '55         E000                  inc R14                ; point to next byte '
 'in table\n'
 '56         E000                  dec R15                ; done them all '
 'yet?\n'
 '57         E000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         E000                  FinishedClearingRAMtable      \n'
 '59         E000                                                \n'
 '60         E000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         E000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         E000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         E000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         E000                                                \n'
 '65         E000                  GetNextByte                   \n'
 '66         E000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         E000                                                \n'
 '68         E000                  inc R13                    ;increment '
 'source addr\n'
 '69         E000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         E000                  dec R15                ; done them all '
 'yet?\n'
 '71         E000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         E000                  FinishedCopyingTableToRAM     \n'
 '73         E000                                                \n'
 '74         E000                  Done        jz     Done           ;  halt '
 'here\n'
 '75         E000                  jnz    Done                   \n'
 '76         E000                                                \n'
 '77         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         E000                  ;           End of main code  \n'
 '79         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         E000                                                \n'
 '81         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         E000                  ;           Subroutines       \n'
 '83         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         E000                                                \n'
 '85         E000                  ; none used here              \n'
 '86         E000                                                \n'
 '87         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         E000                  ;           End of all Subroutines\n'
 '89         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         E000                                                \n'
 '91         E000                                                \n'
 '92         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         E000                  ;           Definition of Program Data '
 'Memory\n'
 '94         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         FFFE                                                \n'
 '97         FFFE                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         E000                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e001                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e002                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e003                  Row3    DB  '-'               \n"
 "102        e004                  Row4    DB  '3'               \n"
 "103        e005                  Row5    DB  '3'               \n"
 "104        e006                  Row6    DB  '6'               \n"
 "105        e007                  Row7    DB  '2'               \n"
 '106        FFFE                                                \n'
 '107        e008                  PatternTable2  DB "EXAMPLES"  \n'
 '108        FFFE                                                \n'
 '109        FFFE                  '
 ';-------------------------------------------------------------------------------\n'
 '110        FFFE                  ;           Interrupt Vectors \n'
 '111        FFFE                  '
 ';-------------------------------------------------------------------------------\n'
 '112        FFFE                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Labels:
{}
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         C000                  LoopCount       DB    0       \n'
 '29         C000                  Count           DB    0       \n'
 '30         C000                                                \n'
 '31         C000                  ;define a table (array) of 8 bytes\n'
 '32         C000                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         C000                  ; bytes in RAM space          \n'
 '34         C000                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         C000                  ;  literally "Current address minus\n'
 '36         C000                  ;  address of BufferTable"    \n'
 '37         C000                                                \n'
 '38         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         E000                  ; this is Program memory start\n'
 '41         E000                  ; address for MSP430G2553 (16K)\n'
 '42         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         E000                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         E000                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         E000                                                \n'
 '46         E000                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         E000                                                \n'
 '48         E000                  MainProgramStart              \n'
 '49         E000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         E000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         E000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         E000                  ClearNextByte                 \n'
 '53         E000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         E000                                                \n'
 '55         E000                  inc R14                ; point to next byte '
 'in table\n'
 '56         E000                  dec R15                ; done them all '
 'yet?\n'
 '57         E000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         E000                  FinishedClearingRAMtable      \n'
 '59         E000                                                \n'
 '60         E000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         E000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         E000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         E000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         E000                                                \n'
 '65         E000                  GetNextByte                   \n'
 '66         E000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         E000                                                \n'
 '68         E000                  inc R13                    ;increment '
 'source addr\n'
 '69         E000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         E000                  dec R15                ; done them all '
 'yet?\n'
 '71         E000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         E000                  FinishedCopyingTableToRAM     \n'
 '73         E000                                                \n'
 '74         E000                  Done        jz     Done           ;  halt '
 'here\n'
 '75         E000                  jnz    Done                   \n'
 '76         E000                                                \n'
 '77         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         E000                  ;           End of main code  \n'
 '79         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         E000                                                \n'
 '81         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         E000                  ;           Subroutines       \n'
 '83         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         E000                                                \n'
 '85         E000                  ; none used here              \n'
 '86         E000                                                \n'
 '87         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         E000                  ;           End of all Subroutines\n'
 '89         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         E000                                                \n'
 '91         E000                                                \n'
 '92         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         E000                  ;           Definition of Program Data '
 'Memory\n'
 '94         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         FFFE                                                \n'
 '97         FFFE                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         FFFE                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         FFFE                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        FFFE                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        FFFE                  Row3    DB  '-'               \n"
 "102        FFFE                  Row4    DB  '3'               \n"
 "103        FFFE                  Row5    DB  '3'               \n"
 "104        FFFE                  Row6    DB  '6'               \n"
 "105        FFFE                  Row7    DB  '2'               \n"
 '106        FFFE                                                \n'
 '107        FFFE                  PatternTable2  DB "EXAMPLES"  \n'
 '108        FFFE                                                \n'
 '109        FFFE                  '
 ';-------------------------------------------------------------------------------\n'
 '110        FFFE                  ;           Interrupt Vectors \n'
 '111        FFFE                  '
 ';-------------------------------------------------------------------------------\n'
 '112        FFFE                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Labels:
{}
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         C000                  LoopCount       DB    0       \n'
 '29         C000                  Count           DB    0       \n'
 '30         C000                                                \n'
 '31         C000                  ;define a table (array) of 8 bytes\n'
 '32         C000                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         C000                  ; bytes in RAM space          \n'
 '34         C000                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         C000                  ;  literally "Current address minus\n'
 '36         C000                  ;  address of BufferTable"    \n'
 '37         C000                                                \n'
 '38         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         E000                  ; this is Program memory start\n'
 '41         E000                  ; address for MSP430G2553 (16K)\n'
 '42         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         E000                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         E000                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         E000                                                \n'
 '46         E000                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         E000                                                \n'
 '48         E000                  MainProgramStart              \n'
 '49         E000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         E000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         E000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         E000                  ClearNextByte                 \n'
 '53         E000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         E000                                                \n'
 '55         E000                  inc R14                ; point to next byte '
 'in table\n'
 '56         E000                  dec R15                ; done them all '
 'yet?\n'
 '57         E000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         E000                  FinishedClearingRAMtable      \n'
 '59         E000                                                \n'
 '60         E000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         E000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         E000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         E000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         E000                                                \n'
 '65         E000                  GetNextByte                   \n'
 '66         E000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         E000                                                \n'
 '68         E000                  inc R13                    ;increment '
 'source addr\n'
 '69         E000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         E000                  dec R15                ; done them all '
 'yet?\n'
 '71         E000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         E000                  FinishedCopyingTableToRAM     \n'
 '73         E000                                                \n'
 '74         E000                  Done        jz     Done           ;  halt '
 'here\n'
 '75         E000                  jnz    Done                   \n'
 '76         E000                                                \n'
 '77         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         E000                  ;           End of main code  \n'
 '79         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         E000                                                \n'
 '81         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         E000                  ;           Subroutines       \n'
 '83         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         E000                                                \n'
 '85         E000                  ; none used here              \n'
 '86         E000                                                \n'
 '87         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         E000                  ;           End of all Subroutines\n'
 '89         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         E000                                                \n'
 '91         E000                                                \n'
 '92         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         E000                  ;           Definition of Program Data '
 'Memory\n'
 '94         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         FFFE                                                \n'
 '97         FFFE                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         FFFE                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         FFFE                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        FFFE                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        FFFE                  Row3    DB  '-'               \n"
 "102        FFFE                  Row4    DB  '3'               \n"
 "103        FFFE                  Row5    DB  '3'               \n"
 "104        FFFE                  Row6    DB  '6'               \n"
 "105        FFFE                  Row7    DB  '2'               \n"
 '106        FFFE                                                \n'
 '107        FFFE                  PatternTable2  DB "EXAMPLES"  \n'
 '108        FFFE                                                \n'
 '109        FFFE                  '
 ';-------------------------------------------------------------------------------\n'
 '110        FFFE                  ;           Interrupt Vectors \n'
 '111        FFFE                  '
 ';-------------------------------------------------------------------------------\n'
 '112        FFFE                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Labels:
{}
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         C000                  LoopCount       DB    0       \n'
 '29         C000                  Count           DB    0       \n'
 '30         C000                                                \n'
 '31         C000                  ;define a table (array) of 8 bytes\n'
 '32         C000                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         C000                  ; bytes in RAM space          \n'
 '34         C000                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         C000                  ;  literally "Current address minus\n'
 '36         C000                  ;  address of BufferTable"    \n'
 '37         C000                                                \n'
 '38         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         E000                  ; this is Program memory start\n'
 '41         E000                  ; address for MSP430G2553 (16K)\n'
 '42         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         E000                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         E000                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         E000                                                \n'
 '46         E000                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         E000                                                \n'
 '48         E000                  MainProgramStart              \n'
 '49         E000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         E000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         E000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         E000                  ClearNextByte                 \n'
 '53         E000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         E000                                                \n'
 '55         E000                  inc R14                ; point to next byte '
 'in table\n'
 '56         E000                  dec R15                ; done them all '
 'yet?\n'
 '57         E000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         E000                  FinishedClearingRAMtable      \n'
 '59         E000                                                \n'
 '60         E000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         E000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         E000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         E000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         E000                                                \n'
 '65         E000                  GetNextByte                   \n'
 '66         E000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         E000                                                \n'
 '68         E000                  inc R13                    ;increment '
 'source addr\n'
 '69         E000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         E000                  dec R15                ; done them all '
 'yet?\n'
 '71         E000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         E000                  FinishedCopyingTableToRAM     \n'
 '73         E000                                                \n'
 '74         E000                  Done        jz     Done           ;  halt '
 'here\n'
 '75         E000                  jnz    Done                   \n'
 '76         E000                                                \n'
 '77         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         E000                  ;           End of main code  \n'
 '79         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         E000                                                \n'
 '81         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         E000                  ;           Subroutines       \n'
 '83         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         E000                                                \n'
 '85         E000                  ; none used here              \n'
 '86         E000                                                \n'
 '87         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         E000                  ;           End of all Subroutines\n'
 '89         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         E000                                                \n'
 '91         E000                                                \n'
 '92         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         E000                  ;           Definition of Program Data '
 'Memory\n'
 '94         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         FFFE                                                \n'
 '97         FFFE                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         FFFE                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         FFFE                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        FFFE                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        FFFE                  Row3    DB  '-'               \n"
 "102        FFFE                  Row4    DB  '3'               \n"
 "103        FFFE                  Row5    DB  '3'               \n"
 "104        FFFE                  Row6    DB  '6'               \n"
 "105        FFFE                  Row7    DB  '2'               \n"
 '106        FFFE                                                \n'
 '107        FFFE                  PatternTable2  DB "EXAMPLES"  \n'
 '108        FFFE                                                \n'
 '109        FFFE                  '
 ';-------------------------------------------------------------------------------\n'
 '110        FFFE                  ;           Interrupt Vectors \n'
 '111        FFFE                  '
 ';-------------------------------------------------------------------------------\n'
 '112        FFFE                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Labels:
{}
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         C000                  LoopCount       DB    0       \n'
 '29         C000                  Count           DB    0       \n'
 '30         C000                                                \n'
 '31         C000                  ;define a table (array) of 8 bytes\n'
 '32         C000                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         C000                  ; bytes in RAM space          \n'
 '34         C000                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         C000                  ;  literally "Current address minus\n'
 '36         C000                  ;  address of BufferTable"    \n'
 '37         C000                                                \n'
 '38         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         E000                  ; this is Program memory start\n'
 '41         E000                  ; address for MSP430G2553 (16K)\n'
 '42         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         E000                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         E000                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         E000                                                \n'
 '46         E000                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         E000                                                \n'
 '48         E000                  MainProgramStart              \n'
 '49         E000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         E000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         E000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         E000                  ClearNextByte                 \n'
 '53         E000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         E000                                                \n'
 '55         E000                  inc R14                ; point to next byte '
 'in table\n'
 '56         E000                  dec R15                ; done them all '
 'yet?\n'
 '57         E000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         E000                  FinishedClearingRAMtable      \n'
 '59         E000                                                \n'
 '60         E000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         E000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         E000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         E000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         E000                                                \n'
 '65         E000                  GetNextByte                   \n'
 '66         E000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         E000                                                \n'
 '68         E000                  inc R13                    ;increment '
 'source addr\n'
 '69         E000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         E000                  dec R15                ; done them all '
 'yet?\n'
 '71         E000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         E000                  FinishedCopyingTableToRAM     \n'
 '73         E000                                                \n'
 '74         E000                  Done        jz     Done           ;  halt '
 'here\n'
 '75         E000                  jnz    Done                   \n'
 '76         E000                                                \n'
 '77         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         E000                  ;           End of main code  \n'
 '79         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         E000                                                \n'
 '81         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         E000                  ;           Subroutines       \n'
 '83         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         E000                                                \n'
 '85         E000                  ; none used here              \n'
 '86         E000                                                \n'
 '87         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         E000                  ;           End of all Subroutines\n'
 '89         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         E000                                                \n'
 '91         E000                                                \n'
 '92         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         E000                  ;           Definition of Program Data '
 'Memory\n'
 '94         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         FFFE                                                \n'
 '97         FFFE                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         FFFE                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         FFFE                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        FFFE                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        FFFE                  Row3    DB  '-'               \n"
 "102        FFFE                  Row4    DB  '3'               \n"
 "103        FFFE                  Row5    DB  '3'               \n"
 "104        FFFE                  Row6    DB  '6'               \n"
 "105        FFFE                  Row7    DB  '2'               \n"
 '106        FFFE                                                \n'
 '107        FFFE                  PatternTable2  DB "EXAMPLES"  \n'
 '108        FFFE                                                \n'
 '109        FFFE                  '
 ';-------------------------------------------------------------------------------\n'
 '110        FFFE                  ;           Interrupt Vectors \n'
 '111        FFFE                  '
 ';-------------------------------------------------------------------------------\n'
 '112        FFFE                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Labels:
{}
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Labels:
{}
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Labels:
{}
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Labels:
{}
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         c001                  LoopCount       DB    0       \n'
 '29         c001                  Count           DB    0       \n'
 '30         C000                                                \n'
 '31         C000                  ;define a table (array) of 8 bytes\n'
 '32         c002                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         C000                  ; bytes in RAM space          \n'
 '34         C000                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         C000                  ;  literally "Current address minus\n'
 '36         C000                  ;  address of BufferTable"    \n'
 '37         C000                                                \n'
 '38         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         E000                  ; this is Program memory start\n'
 '41         E000                  ; address for MSP430G2553 (16K)\n'
 '42         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         E000                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         E000                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         E000                                                \n'
 '46         E000                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         E000                                                \n'
 '48         E000                  MainProgramStart              \n'
 '49         E000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         E000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         E000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         E000                  ClearNextByte                 \n'
 '53         E000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         E000                                                \n'
 '55         E000                  inc R14                ; point to next byte '
 'in table\n'
 '56         E000                  dec R15                ; done them all '
 'yet?\n'
 '57         E000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         E000                  FinishedClearingRAMtable      \n'
 '59         E000                                                \n'
 '60         E000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         E000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         E000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         E000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         E000                                                \n'
 '65         E000                  GetNextByte                   \n'
 '66         E000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         E000                                                \n'
 '68         E000                  inc R13                    ;increment '
 'source addr\n'
 '69         E000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         E000                  dec R15                ; done them all '
 'yet?\n'
 '71         E000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         E000                  FinishedCopyingTableToRAM     \n'
 '73         E000                                                \n'
 '74         E000                  Done        jz     Done           ;  halt '
 'here\n'
 '75         E000                  jnz    Done                   \n'
 '76         E000                                                \n'
 '77         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         E000                  ;           End of main code  \n'
 '79         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         E000                                                \n'
 '81         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         E000                  ;           Subroutines       \n'
 '83         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         E000                                                \n'
 '85         E000                  ; none used here              \n'
 '86         E000                                                \n'
 '87         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         E000                  ;           End of all Subroutines\n'
 '89         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         E000                                                \n'
 '91         E000                                                \n'
 '92         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         E000                  ;           Definition of Program Data '
 'Memory\n'
 '94         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         FFFE                                                \n'
 '97         FFFE                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         ffff                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         ffff                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        ffff                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        ffff                  Row3    DB  '-'               \n"
 "102        ffff                  Row4    DB  '3'               \n"
 "103        ffff                  Row5    DB  '3'               \n"
 "104        ffff                  Row6    DB  '6'               \n"
 "105        ffff                  Row7    DB  '2'               \n"
 '106        FFFE                                                \n'
 '107        ffff                  PatternTable2  DB "EXAMPLES"  \n'
 '108        FFFE                                                \n'
 '109        FFFE                  '
 ';-------------------------------------------------------------------------------\n'
 '110        FFFE                  ;           Interrupt Vectors \n'
 '111        FFFE                  '
 ';-------------------------------------------------------------------------------\n'
 '112        FFFE                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Labels:
{}
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         c001                  LoopCount       DB    0       \n'
 '29         c001                  Count           DB    0       \n'
 '30         C000                                                \n'
 '31         C000                  ;define a table (array) of 8 bytes\n'
 '32         c002                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         C000                  ; bytes in RAM space          \n'
 '34         C000                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         C000                  ;  literally "Current address minus\n'
 '36         C000                  ;  address of BufferTable"    \n'
 '37         C000                                                \n'
 '38         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         E000                  ; this is Program memory start\n'
 '41         E000                  ; address for MSP430G2553 (16K)\n'
 '42         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         E000                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         E000                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         E000                                                \n'
 '46         E000                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         E000                                                \n'
 '48         E000                  MainProgramStart              \n'
 '49         E000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         E000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         E000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         E000                  ClearNextByte                 \n'
 '53         E000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         E000                                                \n'
 '55         E000                  inc R14                ; point to next byte '
 'in table\n'
 '56         E000                  dec R15                ; done them all '
 'yet?\n'
 '57         E000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         E000                  FinishedClearingRAMtable      \n'
 '59         E000                                                \n'
 '60         E000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         E000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         E000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         E000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         E000                                                \n'
 '65         E000                  GetNextByte                   \n'
 '66         E000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         E000                                                \n'
 '68         E000                  inc R13                    ;increment '
 'source addr\n'
 '69         E000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         E000                  dec R15                ; done them all '
 'yet?\n'
 '71         E000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         E000                  FinishedCopyingTableToRAM     \n'
 '73         E000                                                \n'
 '74         E000                  Done        jz     Done           ;  halt '
 'here\n'
 '75         E000                  jnz    Done                   \n'
 '76         E000                                                \n'
 '77         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         E000                  ;           End of main code  \n'
 '79         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         E000                                                \n'
 '81         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         E000                  ;           Subroutines       \n'
 '83         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         E000                                                \n'
 '85         E000                  ; none used here              \n'
 '86         E000                                                \n'
 '87         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         E000                  ;           End of all Subroutines\n'
 '89         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         E000                                                \n'
 '91         E000                                                \n'
 '92         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         E000                  ;           Definition of Program Data '
 'Memory\n'
 '94         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         FFFE                                                \n'
 '97         FFFE                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         ffff                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         ffff                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        ffff                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        ffff                  Row3    DB  '-'               \n"
 "102        ffff                  Row4    DB  '3'               \n"
 "103        ffff                  Row5    DB  '3'               \n"
 "104        ffff                  Row6    DB  '6'               \n"
 "105        ffff                  Row7    DB  '2'               \n"
 '106        FFFE                                                \n'
 '107        ffff                  PatternTable2  DB "EXAMPLES"  \n'
 '108        FFFE                                                \n'
 '109        FFFE                  '
 ';-------------------------------------------------------------------------------\n'
 '110        FFFE                  ;           Interrupt Vectors \n'
 '111        FFFE                  '
 ';-------------------------------------------------------------------------------\n'
 '112        FFFE                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Labels:
{}
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         c001                  LoopCount       DB    0       \n'
 '29         c001                  Count           DB    0       \n'
 '30         C000                                                \n'
 '31         C000                  ;define a table (array) of 8 bytes\n'
 '32         c002                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         C000                  ; bytes in RAM space          \n'
 '34         C000                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         C000                  ;  literally "Current address minus\n'
 '36         C000                  ;  address of BufferTable"    \n'
 '37         C000                                                \n'
 '38         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         E000                  ; this is Program memory start\n'
 '41         E000                  ; address for MSP430G2553 (16K)\n'
 '42         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         E000                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         E000                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         E000                                                \n'
 '46         E000                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         E000                                                \n'
 '48         E000                  MainProgramStart              \n'
 '49         E000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         E000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         E000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         E000                  ClearNextByte                 \n'
 '53         E000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         E000                                                \n'
 '55         E000                  inc R14                ; point to next byte '
 'in table\n'
 '56         E000                  dec R15                ; done them all '
 'yet?\n'
 '57         E000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         E000                  FinishedClearingRAMtable      \n'
 '59         E000                                                \n'
 '60         E000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         E000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         E000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         E000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         E000                                                \n'
 '65         E000                  GetNextByte                   \n'
 '66         E000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         E000                                                \n'
 '68         E000                  inc R13                    ;increment '
 'source addr\n'
 '69         E000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         E000                  dec R15                ; done them all '
 'yet?\n'
 '71         E000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         E000                  FinishedCopyingTableToRAM     \n'
 '73         E000                                                \n'
 '74         E000                  Done        jz     Done           ;  halt '
 'here\n'
 '75         E000                  jnz    Done                   \n'
 '76         E000                                                \n'
 '77         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         E000                  ;           End of main code  \n'
 '79         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         E000                                                \n'
 '81         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         E000                  ;           Subroutines       \n'
 '83         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         E000                                                \n'
 '85         E000                  ; none used here              \n'
 '86         E000                                                \n'
 '87         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         E000                  ;           End of all Subroutines\n'
 '89         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         E000                                                \n'
 '91         E000                                                \n'
 '92         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         E000                  ;           Definition of Program Data '
 'Memory\n'
 '94         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         FFFE                                                \n'
 '97         FFFE                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         ffff                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         ffff                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        ffff                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        ffff                  Row3    DB  '-'               \n"
 "102        ffff                  Row4    DB  '3'               \n"
 "103        ffff                  Row5    DB  '3'               \n"
 "104        ffff                  Row6    DB  '6'               \n"
 "105        ffff                  Row7    DB  '2'               \n"
 '106        FFFE                                                \n'
 '107        ffff                  PatternTable2  DB "EXAMPLES"  \n'
 '108        FFFE                                                \n'
 '109        FFFE                  '
 ';-------------------------------------------------------------------------------\n'
 '110        FFFE                  ;           Interrupt Vectors \n'
 '111        FFFE                  '
 ';-------------------------------------------------------------------------------\n'
 '112        FFFE                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Labels:
{}
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         202                   Count           DB    0       \n'
 '30         C000                                                \n'
 '31         C000                  ;define a table (array) of 8 bytes\n'
 '32         c002                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         C000                  ; bytes in RAM space          \n'
 '34         C000                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         C000                  ;  literally "Current address minus\n'
 '36         C000                  ;  address of BufferTable"    \n'
 '37         C000                                                \n'
 '38         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         E000                  ; this is Program memory start\n'
 '41         E000                  ; address for MSP430G2553 (16K)\n'
 '42         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         E000                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         E000                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         E000                                                \n'
 '46         E000                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         E000                                                \n'
 '48         E000                  MainProgramStart              \n'
 '49         E000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         E000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         E000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         E000                  ClearNextByte                 \n'
 '53         E000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         E000                                                \n'
 '55         E000                  inc R14                ; point to next byte '
 'in table\n'
 '56         E000                  dec R15                ; done them all '
 'yet?\n'
 '57         E000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         E000                  FinishedClearingRAMtable      \n'
 '59         E000                                                \n'
 '60         E000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         E000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         E000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         E000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         E000                                                \n'
 '65         E000                  GetNextByte                   \n'
 '66         E000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         E000                                                \n'
 '68         E000                  inc R13                    ;increment '
 'source addr\n'
 '69         E000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         E000                  dec R15                ; done them all '
 'yet?\n'
 '71         E000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         E000                  FinishedCopyingTableToRAM     \n'
 '73         E000                                                \n'
 '74         E000                  Done        jz     Done           ;  halt '
 'here\n'
 '75         E000                  jnz    Done                   \n'
 '76         E000                                                \n'
 '77         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         E000                  ;           End of main code  \n'
 '79         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         E000                                                \n'
 '81         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         E000                  ;           Subroutines       \n'
 '83         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         E000                                                \n'
 '85         E000                  ; none used here              \n'
 '86         E000                                                \n'
 '87         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         E000                  ;           End of all Subroutines\n'
 '89         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         E000                                                \n'
 '91         E000                                                \n'
 '92         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         E000                  ;           Definition of Program Data '
 'Memory\n'
 '94         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         FFFE                                                \n'
 '97         FFFE                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         ffff                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         10000                 Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        10001                 Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        10002                 Row3    DB  '-'               \n"
 "102        10003                 Row4    DB  '3'               \n"
 "103        10004                 Row5    DB  '3'               \n"
 "104        10005                 Row6    DB  '6'               \n"
 "105        10006                 Row7    DB  '2'               \n"
 '106        FFFE                                                \n'
 '107        ffff                  PatternTable2  DB "EXAMPLES"  \n'
 '108        FFFE                                                \n'
 '109        FFFE                  '
 ';-------------------------------------------------------------------------------\n'
 '110        FFFE                  ;           Interrupt Vectors \n'
 '111        FFFE                  '
 ';-------------------------------------------------------------------------------\n'
 '112        FFFE                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Labels:
{}
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         C000                                                \n'
 '31         C000                  ;define a table (array) of 8 bytes\n'
 '32         c002                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         C000                  ; bytes in RAM space          \n'
 '34         C000                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         C000                  ;  literally "Current address minus\n'
 '36         C000                  ;  address of BufferTable"    \n'
 '37         C000                                                \n'
 '38         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         E000                  ; this is Program memory start\n'
 '41         E000                  ; address for MSP430G2553 (16K)\n'
 '42         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         E000                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         E000                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         E000                                                \n'
 '46         E000                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         E000                                                \n'
 '48         E000                  MainProgramStart              \n'
 '49         E000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         E000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         E000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         E000                  ClearNextByte                 \n'
 '53         E000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         E000                                                \n'
 '55         E000                  inc R14                ; point to next byte '
 'in table\n'
 '56         E000                  dec R15                ; done them all '
 'yet?\n'
 '57         E000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         E000                  FinishedClearingRAMtable      \n'
 '59         E000                                                \n'
 '60         E000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         E000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         E000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         E000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         E000                                                \n'
 '65         E000                  GetNextByte                   \n'
 '66         E000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         E000                                                \n'
 '68         E000                  inc R13                    ;increment '
 'source addr\n'
 '69         E000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         E000                  dec R15                ; done them all '
 'yet?\n'
 '71         E000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         E000                  FinishedCopyingTableToRAM     \n'
 '73         E000                                                \n'
 '74         E000                  Done        jz     Done           ;  halt '
 'here\n'
 '75         E000                  jnz    Done                   \n'
 '76         E000                                                \n'
 '77         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         E000                  ;           End of main code  \n'
 '79         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         E000                                                \n'
 '81         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         E000                  ;           Subroutines       \n'
 '83         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         E000                                                \n'
 '85         E000                  ; none used here              \n'
 '86         E000                                                \n'
 '87         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         E000                  ;           End of all Subroutines\n'
 '89         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         E000                                                \n'
 '91         E000                                                \n'
 '92         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         E000                  ;           Definition of Program Data '
 'Memory\n'
 '94         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         FFFE                                                \n'
 '97         FFFE                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         ffff                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         10000                 Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        10001                 Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        10002                 Row3    DB  '-'               \n"
 "102        10003                 Row4    DB  '3'               \n"
 "103        10004                 Row5    DB  '3'               \n"
 "104        10005                 Row6    DB  '6'               \n"
 "105        10006                 Row7    DB  '2'               \n"
 '106        FFFE                                                \n'
 '107        ffff                  PatternTable2  DB "EXAMPLES"  \n'
 '108        FFFE                                                \n'
 '109        FFFE                  '
 ';-------------------------------------------------------------------------------\n'
 '110        FFFE                  ;           Interrupt Vectors \n'
 '111        FFFE                  '
 ';-------------------------------------------------------------------------------\n'
 '112        FFFE                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Labels:
{}
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Labels:
{}
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          202                   ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          202                   ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          202                   ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          202                   ;       Date:           July 25, 2017\n'
 '8          204                   ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         202                   ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         204                   ;       Adapted from:   earlier example '
 'code\n'
 '12         206                   ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         202                   ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         202                   ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         202                   ; Watchdog timer definitions  \n'
 '19         204                   WDTCTL     EQU     0x0120     \n'
 '20         206                   WDTPW      EQU     0x5A00     \n'
 '21         208                   WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         202                   ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0202                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0203                  LoopCount       DB    0       \n'
 '29         0204                  Count           DB    0       \n'
 '30         C000                                                \n'
 '31         c002                  ;define a table (array) of 8 bytes\n'
 '32         c002                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         c004                  ; bytes in RAM space          \n'
 '34         c006                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         c008                  ;  literally "Current address minus\n'
 '36         c00a                  ;  address of BufferTable"    \n'
 '37         C000                                                \n'
 '38         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '39         c002                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         c004                  ; this is Program memory start\n'
 '41         c006                  ; address for MSP430G2553 (16K)\n'
 '42         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         e002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         e004                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         E000                                                \n'
 '46         e002                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         E000                                                \n'
 '48         E000                  MainProgramStart              \n'
 '49         e002                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         e004                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         e006                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         E000                  ClearNextByte                 \n'
 '53         e002                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         E000                                                \n'
 '55         e002                  inc R14                ; point to next byte '
 'in table\n'
 '56         e004                  dec R15                ; done them all '
 'yet?\n'
 '57         e006                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         E000                  FinishedClearingRAMtable      \n'
 '59         E000                                                \n'
 '60         e002                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         e004                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         e006                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         e008                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         E000                                                \n'
 '65         E000                  GetNextByte                   \n'
 '66         e002                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         E000                                                \n'
 '68         e002                  inc R13                    ;increment '
 'source addr\n'
 '69         e004                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         e006                  dec R15                ; done them all '
 'yet?\n'
 '71         e008                  jnz  GetNextByte     ; if no, do some more\n'
 '72         E000                  FinishedCopyingTableToRAM     \n'
 '73         E000                                                \n'
 '74         e002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         e004                  jnz    Done                   \n'
 '76         E000                                                \n'
 '77         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         e002                  ;           End of main code  \n'
 '79         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         E000                                                \n'
 '81         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         e002                  ;           Subroutines       \n'
 '83         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         E000                                                \n'
 '85         e002                  ; none used here              \n'
 '86         E000                                                \n'
 '87         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         e002                  ;           End of all Subroutines\n'
 '89         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         E000                                                \n'
 '91         E000                                                \n'
 '92         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         e002                  ;           Definition of Program Data '
 'Memory\n'
 '94         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         e002                  ORG   0xE000                  \n'
 '96         FFFE                                                \n'
 '97         10000                 PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         10001                 Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         10002                 Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        10003                 Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        10004                 Row3    DB  '-'               \n"
 "102        10005                 Row4    DB  '3'               \n"
 "103        10006                 Row5    DB  '3'               \n"
 "104        10007                 Row6    DB  '6'               \n"
 "105        10008                 Row7    DB  '2'               \n"
 '106        FFFE                                                \n'
 '107        ffff                  PatternTable2  DB "EXAMPLES"  \n'
 '108        FFFE                                                \n'
 '109        FFFE                  '
 ';-------------------------------------------------------------------------------\n'
 '110        10000                 ;           Interrupt Vectors \n'
 '111        FFFE                  '
 ';-------------------------------------------------------------------------------\n'
 '112        FFFE                                                \n'
 '113        10000                 ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        10002                 DW      RESET                   ; '
 'establishes the label RESET as\n'
 '115        10004                 ; the starting point          \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Labels:
{}
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Labels:
{}
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Labels:
{}
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Labels:
{}
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0202                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0202                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0202                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0202                  ;       Date:           July 25, 2017\n'
 '8          0204                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0202                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0204                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0206                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0202                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0202                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0202                  ; Watchdog timer definitions  \n'
 '19         0204                  WDTCTL     EQU     0x0120     \n'
 '20         0206                  WDTPW      EQU     0x5A00     \n'
 '21         0208                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0202                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0202                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0203                  LoopCount       DB    0       \n'
 '29         0204                  Count           DB    0       \n'
 '30         C000                                                \n'
 '31         c002                  ;define a table (array) of 8 bytes\n'
 '32         c002                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         c004                  ; bytes in RAM space          \n'
 '34         c006                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         c008                  ;  literally "Current address minus\n'
 '36         c00a                  ;  address of BufferTable"    \n'
 '37         C000                                                \n'
 '38         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '39         c002                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         c004                  ; this is Program memory start\n'
 '41         c006                  ; address for MSP430G2553 (16K)\n'
 '42         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         e002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         e004                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         E000                                                \n'
 '46         e002                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         E000                                                \n'
 '48         E000                  MainProgramStart              \n'
 '49         e002                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         e004                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         e006                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         E000                  ClearNextByte                 \n'
 '53         e002                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         E000                                                \n'
 '55         e002                  inc R14                ; point to next byte '
 'in table\n'
 '56         e004                  dec R15                ; done them all '
 'yet?\n'
 '57         e006                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         E000                  FinishedClearingRAMtable      \n'
 '59         E000                                                \n'
 '60         e002                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         e004                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         e006                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         e008                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         E000                                                \n'
 '65         E000                  GetNextByte                   \n'
 '66         e002                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         E000                                                \n'
 '68         e002                  inc R13                    ;increment '
 'source addr\n'
 '69         e004                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         e006                  dec R15                ; done them all '
 'yet?\n'
 '71         e008                  jnz  GetNextByte     ; if no, do some more\n'
 '72         E000                  FinishedCopyingTableToRAM     \n'
 '73         E000                                                \n'
 '74         e002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         e004                  jnz    Done                   \n'
 '76         E000                                                \n'
 '77         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         e002                  ;           End of main code  \n'
 '79         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         E000                                                \n'
 '81         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         e002                  ;           Subroutines       \n'
 '83         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         E000                                                \n'
 '85         e002                  ; none used here              \n'
 '86         E000                                                \n'
 '87         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         e002                  ;           End of all Subroutines\n'
 '89         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         E000                                                \n'
 '91         E000                                                \n'
 '92         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         e002                  ;           Definition of Program Data '
 'Memory\n'
 '94         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         e002                  ORG   0xE000                  \n'
 '96         FFFE                                                \n'
 '97         10000                 PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         10001                 Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         10002                 Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        10003                 Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        10004                 Row3    DB  '-'               \n"
 "102        10005                 Row4    DB  '3'               \n"
 "103        10006                 Row5    DB  '3'               \n"
 "104        10007                 Row6    DB  '6'               \n"
 "105        10008                 Row7    DB  '2'               \n"
 '106        FFFE                                                \n'
 '107        ffff                  PatternTable2  DB "EXAMPLES"  \n'
 '108        FFFE                                                \n'
 '109        FFFE                  '
 ';-------------------------------------------------------------------------------\n'
 '110        10000                 ;           Interrupt Vectors \n'
 '111        FFFE                  '
 ';-------------------------------------------------------------------------------\n'
 '112        FFFE                                                \n'
 '113        10000                 ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        10002                 DW      RESET                   ; '
 'establishes the label RESET as\n'
 '115        10004                 ; the starting point          \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Labels:
{}
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0202                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0202                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0202                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0202                  ;       Date:           July 25, 2017\n'
 '8          0204                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0202                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0204                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0206                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0202                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0202                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0202                  ; Watchdog timer definitions  \n'
 '19         0204                  WDTCTL     EQU     0x0120     \n'
 '20         0206                  WDTPW      EQU     0x5A00     \n'
 '21         0208                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0202                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0202                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0203                  LoopCount       DB    0       \n'
 '29         0204                  Count           DB    0       \n'
 '30         C000                                                \n'
 '31         c002                  ;define a table (array) of 8 bytes\n'
 '32         c002                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         c004                  ; bytes in RAM space          \n'
 '34         c006                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         c008                  ;  literally "Current address minus\n'
 '36         c00a                  ;  address of BufferTable"    \n'
 '37         C000                                                \n'
 '38         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '39         c002                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         c004                  ; this is Program memory start\n'
 '41         c006                  ; address for MSP430G2553 (16K)\n'
 '42         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         e002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         e004                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         E000                                                \n'
 '46         e002                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         E000                                                \n'
 '48         E000                  MainProgramStart              \n'
 '49         e002                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         e004                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         e006                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         E000                  ClearNextByte                 \n'
 '53         e002                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         E000                                                \n'
 '55         e002                  inc R14                ; point to next byte '
 'in table\n'
 '56         e004                  dec R15                ; done them all '
 'yet?\n'
 '57         e006                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         E000                  FinishedClearingRAMtable      \n'
 '59         E000                                                \n'
 '60         e002                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         e004                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         e006                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         e008                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         E000                                                \n'
 '65         E000                  GetNextByte                   \n'
 '66         e002                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         E000                                                \n'
 '68         e002                  inc R13                    ;increment '
 'source addr\n'
 '69         e004                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         e006                  dec R15                ; done them all '
 'yet?\n'
 '71         e008                  jnz  GetNextByte     ; if no, do some more\n'
 '72         E000                  FinishedCopyingTableToRAM     \n'
 '73         E000                                                \n'
 '74         e002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         e004                  jnz    Done                   \n'
 '76         E000                                                \n'
 '77         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         e002                  ;           End of main code  \n'
 '79         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         E000                                                \n'
 '81         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         e002                  ;           Subroutines       \n'
 '83         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         E000                                                \n'
 '85         e002                  ; none used here              \n'
 '86         E000                                                \n'
 '87         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         e002                  ;           End of all Subroutines\n'
 '89         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         E000                                                \n'
 '91         E000                                                \n'
 '92         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         e002                  ;           Definition of Program Data '
 'Memory\n'
 '94         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         e002                  ORG   0xE000                  \n'
 '96         FFFE                                                \n'
 '97         10000                 PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         10001                 Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         10002                 Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        10003                 Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        10004                 Row3    DB  '-'               \n"
 "102        10005                 Row4    DB  '3'               \n"
 "103        10006                 Row5    DB  '3'               \n"
 "104        10007                 Row6    DB  '6'               \n"
 "105        10008                 Row7    DB  '2'               \n"
 '106        FFFE                                                \n'
 '107        ffff                  PatternTable2  DB "EXAMPLES"  \n'
 '108        FFFE                                                \n'
 '109        FFFE                  '
 ';-------------------------------------------------------------------------------\n'
 '110        10000                 ;           Interrupt Vectors \n'
 '111        FFFE                  '
 ';-------------------------------------------------------------------------------\n'
 '112        FFFE                                                \n'
 '113        10000                 ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        10002                 DW      RESET                   ; '
 'establishes the label RESET as\n'
 '115        10004                 ; the starting point          \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Labels:
{}
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0202                  WDTCTL     EQU     0x0120     \n'
 '20         0204                  WDTPW      EQU     0x5A00     \n'
 '21         0206                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0202                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0203                  LoopCount       DB    0       \n'
 '29         0204                  Count           DB    0       \n'
 '30         C000                                                \n'
 '31         C000                  ;define a table (array) of 8 bytes\n'
 '32         c002                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         C000                  ; bytes in RAM space          \n'
 '34         c002                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         C000                  ;  literally "Current address minus\n'
 '36         C000                  ;  address of BufferTable"    \n'
 '37         C000                                                \n'
 '38         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '39         c002                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         E000                  ; this is Program memory start\n'
 '41         E000                  ; address for MSP430G2553 (16K)\n'
 '42         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         e002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         E000                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         E000                                                \n'
 '46         e002                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         E000                                                \n'
 '48         E000                  MainProgramStart              \n'
 '49         E000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         e002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         e004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         E000                  ClearNextByte                 \n'
 '53         e002                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         E000                                                \n'
 '55         e002                  inc R14                ; point to next byte '
 'in table\n'
 '56         e004                  dec R15                ; done them all '
 'yet?\n'
 '57         e006                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         E000                  FinishedClearingRAMtable      \n'
 '59         E000                                                \n'
 '60         E000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         e002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         e004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         e006                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         E000                                                \n'
 '65         E000                  GetNextByte                   \n'
 '66         e002                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         E000                                                \n'
 '68         e002                  inc R13                    ;increment '
 'source addr\n'
 '69         e004                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         e006                  dec R15                ; done them all '
 'yet?\n'
 '71         e008                  jnz  GetNextByte     ; if no, do some more\n'
 '72         E000                  FinishedCopyingTableToRAM     \n'
 '73         E000                                                \n'
 '74         e002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         e004                  jnz    Done                   \n'
 '76         E000                                                \n'
 '77         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         E000                  ;           End of main code  \n'
 '79         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         E000                                                \n'
 '81         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         E000                  ;           Subroutines       \n'
 '83         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         E000                                                \n'
 '85         E000                  ; none used here              \n'
 '86         E000                                                \n'
 '87         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         E000                  ;           End of all Subroutines\n'
 '89         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         E000                                                \n'
 '91         E000                                                \n'
 '92         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         E000                  ;           Definition of Program Data '
 'Memory\n'
 '94         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         e002                  ORG   0xE000                  \n'
 '96         FFFE                                                \n'
 '97         10000                 PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         10001                 Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         10002                 Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        10003                 Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        10004                 Row3    DB  '-'               \n"
 "102        10005                 Row4    DB  '3'               \n"
 "103        10006                 Row5    DB  '3'               \n"
 "104        10007                 Row6    DB  '6'               \n"
 "105        10008                 Row7    DB  '2'               \n"
 '106        FFFE                                                \n'
 '107        ffff                  PatternTable2  DB "EXAMPLES"  \n'
 '108        FFFE                                                \n'
 '109        FFFE                  '
 ';-------------------------------------------------------------------------------\n'
 '110        FFFE                  ;           Interrupt Vectors \n'
 '111        FFFE                  '
 ';-------------------------------------------------------------------------------\n'
 '112        FFFE                                                \n'
 '113        10000                 ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        10002                 DW      RESET                   ; '
 'establishes the label RESET as\n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Labels:
{}
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0202                  WDTCTL     EQU     0x0120     \n'
 '20         0204                  WDTPW      EQU     0x5A00     \n'
 '21         0206                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         C000                                                \n'
 '31         C000                  ;define a table (array) of 8 bytes\n'
 '32         c002                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         C000                  ; bytes in RAM space          \n'
 '34         c002                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         C000                  ;  literally "Current address minus\n'
 '36         C000                  ;  address of BufferTable"    \n'
 '37         C000                                                \n'
 '38         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         E000                  ; this is Program memory start\n'
 '41         E000                  ; address for MSP430G2553 (16K)\n'
 '42         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         e002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         E000                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         E000                                                \n'
 '46         e002                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         E000                                                \n'
 '48         E000                  MainProgramStart              \n'
 '49         E000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         e002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         e004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         E000                  ClearNextByte                 \n'
 '53         e002                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         E000                                                \n'
 '55         e002                  inc R14                ; point to next byte '
 'in table\n'
 '56         e004                  dec R15                ; done them all '
 'yet?\n'
 '57         e006                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         E000                  FinishedClearingRAMtable      \n'
 '59         E000                                                \n'
 '60         E000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         e002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         e004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         e006                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         E000                                                \n'
 '65         E000                  GetNextByte                   \n'
 '66         e002                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         E000                                                \n'
 '68         e002                  inc R13                    ;increment '
 'source addr\n'
 '69         e004                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         e006                  dec R15                ; done them all '
 'yet?\n'
 '71         e008                  jnz  GetNextByte     ; if no, do some more\n'
 '72         E000                  FinishedCopyingTableToRAM     \n'
 '73         E000                                                \n'
 '74         e002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         e004                  jnz    Done                   \n'
 '76         E000                                                \n'
 '77         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         E000                  ;           End of main code  \n'
 '79         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         E000                                                \n'
 '81         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         E000                  ;           Subroutines       \n'
 '83         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         E000                                                \n'
 '85         E000                  ; none used here              \n'
 '86         E000                                                \n'
 '87         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         E000                  ;           End of all Subroutines\n'
 '89         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         E000                                                \n'
 '91         E000                                                \n'
 '92         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         E000                  ;           Definition of Program Data '
 'Memory\n'
 '94         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         FFFE                                                \n'
 '97         10000                 PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         10001                 Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         10002                 Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        10003                 Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        10004                 Row3    DB  '-'               \n"
 "102        10005                 Row4    DB  '3'               \n"
 "103        10006                 Row5    DB  '3'               \n"
 "104        10007                 Row6    DB  '6'               \n"
 "105        10008                 Row7    DB  '2'               \n"
 '106        FFFE                                                \n'
 '107        ffff                  PatternTable2  DB "EXAMPLES"  \n'
 '108        FFFE                                                \n'
 '109        FFFE                  '
 ';-------------------------------------------------------------------------------\n'
 '110        FFFE                  ;           Interrupt Vectors \n'
 '111        FFFE                  '
 ';-------------------------------------------------------------------------------\n'
 '112        FFFE                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        10000                 DW      RESET                   ; '
 'establishes the label RESET as\n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Labels:
{}
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0202                  WDTCTL     EQU     0x0120     \n'
 '20         0204                  WDTPW      EQU     0x5A00     \n'
 '21         0206                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         C000                                                \n'
 '31         C000                  ;define a table (array) of 8 bytes\n'
 '32         c002                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         C000                  ; bytes in RAM space          \n'
 '34         c002                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         C000                  ;  literally "Current address minus\n'
 '36         C000                  ;  address of BufferTable"    \n'
 '37         C000                                                \n'
 '38         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         E000                  ; this is Program memory start\n'
 '41         E000                  ; address for MSP430G2553 (16K)\n'
 '42         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         e002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         E000                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         E000                                                \n'
 '46         e002                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         E000                                                \n'
 '48         E000                  MainProgramStart              \n'
 '49         E000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         e002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         e004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         E000                  ClearNextByte                 \n'
 '53         e002                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         E000                                                \n'
 '55         e002                  inc R14                ; point to next byte '
 'in table\n'
 '56         e004                  dec R15                ; done them all '
 'yet?\n'
 '57         e006                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         E000                  FinishedClearingRAMtable      \n'
 '59         E000                                                \n'
 '60         E000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         e002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         e004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         e006                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         E000                                                \n'
 '65         E000                  GetNextByte                   \n'
 '66         e002                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         E000                                                \n'
 '68         e002                  inc R13                    ;increment '
 'source addr\n'
 '69         e004                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         e006                  dec R15                ; done them all '
 'yet?\n'
 '71         e008                  jnz  GetNextByte     ; if no, do some more\n'
 '72         E000                  FinishedCopyingTableToRAM     \n'
 '73         E000                                                \n'
 '74         e002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         e004                  jnz    Done                   \n'
 '76         E000                                                \n'
 '77         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         E000                  ;           End of main code  \n'
 '79         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         E000                                                \n'
 '81         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         E000                  ;           Subroutines       \n'
 '83         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         E000                                                \n'
 '85         E000                  ; none used here              \n'
 '86         E000                                                \n'
 '87         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         E000                  ;           End of all Subroutines\n'
 '89         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         E000                                                \n'
 '91         E000                                                \n'
 '92         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         E000                  ;           Definition of Program Data '
 'Memory\n'
 '94         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         FFFE                                                \n'
 '97         10000                 PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         10001                 Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         10002                 Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        10003                 Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        10004                 Row3    DB  '-'               \n"
 "102        10005                 Row4    DB  '3'               \n"
 "103        10006                 Row5    DB  '3'               \n"
 "104        10007                 Row6    DB  '6'               \n"
 "105        10008                 Row7    DB  '2'               \n"
 '106        FFFE                                                \n'
 '107        ffff                  PatternTable2  DB "EXAMPLES"  \n'
 '108        FFFE                                                \n'
 '109        FFFE                  '
 ';-------------------------------------------------------------------------------\n'
 '110        FFFE                  ;           Interrupt Vectors \n'
 '111        FFFE                  '
 ';-------------------------------------------------------------------------------\n'
 '112        FFFE                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        10000                 DW      RESET                   ; '
 'establishes the label RESET as\n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Labels:
{}
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0202                  WDTCTL     EQU     0x0120     \n'
 '20         0204                  WDTPW      EQU     0x5A00     \n'
 '21         0206                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         C000                                                \n'
 '31         C000                  ;define a table (array) of 8 bytes\n'
 '32         c002                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         C000                  ; bytes in RAM space          \n'
 '34         c002                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         C000                  ;  literally "Current address minus\n'
 '36         C000                  ;  address of BufferTable"    \n'
 '37         C000                                                \n'
 '38         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         E000                  ; this is Program memory start\n'
 '41         E000                  ; address for MSP430G2553 (16K)\n'
 '42         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         e002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         E000                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         E000                                                \n'
 '46         e002                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         E000                                                \n'
 '48         E000                  MainProgramStart              \n'
 '49         E000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         e002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         e004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         E000                  ClearNextByte                 \n'
 '53         e002                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         E000                                                \n'
 '55         e002                  inc R14                ; point to next byte '
 'in table\n'
 '56         e004                  dec R15                ; done them all '
 'yet?\n'
 '57         e006                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         E000                  FinishedClearingRAMtable      \n'
 '59         E000                                                \n'
 '60         E000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         e002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         e004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         e006                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         E000                                                \n'
 '65         E000                  GetNextByte                   \n'
 '66         e002                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         E000                                                \n'
 '68         e002                  inc R13                    ;increment '
 'source addr\n'
 '69         e004                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         e006                  dec R15                ; done them all '
 'yet?\n'
 '71         e008                  jnz  GetNextByte     ; if no, do some more\n'
 '72         E000                  FinishedCopyingTableToRAM     \n'
 '73         E000                                                \n'
 '74         e002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         e004                  jnz    Done                   \n'
 '76         E000                                                \n'
 '77         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         E000                  ;           End of main code  \n'
 '79         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         E000                                                \n'
 '81         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         E000                  ;           Subroutines       \n'
 '83         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         E000                                                \n'
 '85         E000                  ; none used here              \n'
 '86         E000                                                \n'
 '87         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         E000                  ;           End of all Subroutines\n'
 '89         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         E000                                                \n'
 '91         E000                                                \n'
 '92         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         E000                  ;           Definition of Program Data '
 'Memory\n'
 '94         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         FFFE                                                \n'
 '97         10000                 PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         10001                 Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         10002                 Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        10003                 Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        10004                 Row3    DB  '-'               \n"
 "102        10005                 Row4    DB  '3'               \n"
 "103        10006                 Row5    DB  '3'               \n"
 "104        10007                 Row6    DB  '6'               \n"
 "105        10008                 Row7    DB  '2'               \n"
 '106        FFFE                                                \n'
 '107        ffff                  PatternTable2  DB "EXAMPLES"  \n'
 '108        FFFE                                                \n'
 '109        FFFE                  '
 ';-------------------------------------------------------------------------------\n'
 '110        FFFE                  ;           Interrupt Vectors \n'
 '111        FFFE                  '
 ';-------------------------------------------------------------------------------\n'
 '112        FFFE                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        10000                 DW      RESET                   ; '
 'establishes the label RESET as\n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Labels:
{}
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0202                  WDTCTL     EQU     0x0120     \n'
 '20         0204                  WDTPW      EQU     0x5A00     \n'
 '21         0206                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         C000                                                \n'
 '31         C000                  ;define a table (array) of 8 bytes\n'
 '32         c002                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         C000                  ; bytes in RAM space          \n'
 '34         c002                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         C000                  ;  literally "Current address minus\n'
 '36         C000                  ;  address of BufferTable"    \n'
 '37         C000                                                \n'
 '38         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         E000                  ; this is Program memory start\n'
 '41         E000                  ; address for MSP430G2553 (16K)\n'
 '42         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         e002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         E000                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         E000                                                \n'
 '46         e002                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         E000                                                \n'
 '48         E000                  MainProgramStart              \n'
 '49         E000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         e002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         e004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         E000                  ClearNextByte                 \n'
 '53         e002                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         E000                                                \n'
 '55         e002                  inc R14                ; point to next byte '
 'in table\n'
 '56         e004                  dec R15                ; done them all '
 'yet?\n'
 '57         e006                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         E000                  FinishedClearingRAMtable      \n'
 '59         E000                                                \n'
 '60         E000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         e002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         e004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         e006                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         E000                                                \n'
 '65         E000                  GetNextByte                   \n'
 '66         e002                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         E000                                                \n'
 '68         e002                  inc R13                    ;increment '
 'source addr\n'
 '69         e004                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         e006                  dec R15                ; done them all '
 'yet?\n'
 '71         e008                  jnz  GetNextByte     ; if no, do some more\n'
 '72         E000                  FinishedCopyingTableToRAM     \n'
 '73         E000                                                \n'
 '74         e002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         e004                  jnz    Done                   \n'
 '76         E000                                                \n'
 '77         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         E000                  ;           End of main code  \n'
 '79         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         E000                                                \n'
 '81         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         E000                  ;           Subroutines       \n'
 '83         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         E000                                                \n'
 '85         E000                  ; none used here              \n'
 '86         E000                                                \n'
 '87         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         E000                  ;           End of all Subroutines\n'
 '89         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         E000                                                \n'
 '91         E000                                                \n'
 '92         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         E000                  ;           Definition of Program Data '
 'Memory\n'
 '94         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         FFFE                                                \n'
 '97         10000                 PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         10001                 Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         10002                 Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        10003                 Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        10004                 Row3    DB  '-'               \n"
 "102        10005                 Row4    DB  '3'               \n"
 "103        10006                 Row5    DB  '3'               \n"
 "104        10007                 Row6    DB  '6'               \n"
 "105        10008                 Row7    DB  '2'               \n"
 '106        FFFE                                                \n'
 '107        ffff                  PatternTable2  DB "EXAMPLES"  \n'
 '108        FFFE                                                \n'
 '109        FFFE                  '
 ';-------------------------------------------------------------------------------\n'
 '110        FFFE                  ;           Interrupt Vectors \n'
 '111        FFFE                  '
 ';-------------------------------------------------------------------------------\n'
 '112        FFFE                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        10000                 DW      RESET                   ; '
 'establishes the label RESET as\n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Labels:
{}
DEBUG:BABY ASSEMBLER:DB
DEBUG:BABY ASSEMBLER:a
DEBUG:BABY ASSEMBLER:0x0tes
DEBUG:BABY ASSEMBLER:DB
DEBUG:BABY ASSEMBLER:DB
DEBUG:BABY ASSEMBLER:DB
DEBUG:BABY ASSEMBLER:DB
DEBUG:BABY ASSEMBLER:DB
DEBUG:BABY ASSEMBLER:DB
DEBUG:BABY ASSEMBLER:DB
DEBUG:BABY ASSEMBLER:DB
DEBUG:BABY ASSEMBLER:Interrupt
INFO:BABY ASSEMBLER:Flines:
('0          st                    '
 ';-------------------------------------------------------------------------------\n'
 '1          rpose:                ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          rpose:                ;                             \n'
 '3          rget:                 ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          rget:                 ;                             \n'
 '5          te:                   ;   Target: TI MSP430 family - simulation\n'
 '6          te:                   ;                             \n'
 '7          st                    ;       Date:           July 25, 2017\n'
 '8          itten                 ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          itten                 ;                             \n'
 '10         apted                 ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         sembler/IDE:            ;       Adapted from:   earlier example '
 'code\n'
 '12                               ;       Assembler/IDE:  class assembler '
 'project\n'
 '13                               ;                             \n'
 '14         finition              ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         finition              '
 ';-------------------------------------------------------------------------------\n'
 '16         tchdog                ; Definition of Constants     \n'
 '17         tchdog                '
 ';-------------------------------------------------------------------------------\n'
 '18         U                     ; Watchdog timer definitions  \n'
 '19         U                     WDTCTL     EQU     0x0120     \n'
 '20         U                     WDTPW      EQU     0x5A00     \n'
 '21         finition              WDTHOLD    EQU     0x0080     \n'
 '22         finition                                            \n'
 '23         finition              '
 ';-------------------------------------------------------------------------------\n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Labels:
{}
DEBUG:BABY ASSEMBLER:DB
DEBUG:BABY ASSEMBLER:a
DEBUG:BABY ASSEMBLER:0x0tes
DEBUG:BABY ASSEMBLER:DB
DEBUG:BABY ASSEMBLER:DB
DEBUG:BABY ASSEMBLER:DB
DEBUG:BABY ASSEMBLER:DB
DEBUG:BABY ASSEMBLER:DB
DEBUG:BABY ASSEMBLER:DB
DEBUG:BABY ASSEMBLER:DB
DEBUG:BABY ASSEMBLER:DB
DEBUG:BABY ASSEMBLER:Interrupt
INFO:BABY ASSEMBLER:Flines:
('0          st                    '
 ';-------------------------------------------------------------------------------\n'
 '1          rpose:                ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          rpose:                ;                             \n'
 '3          rget:                 ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          rget:                 ;                             \n'
 '5          te:                   ;   Target: TI MSP430 family - simulation\n'
 '6          te:                   ;                             \n'
 '7          st                    ;       Date:           July 25, 2017\n'
 '8          itten                 ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          itten                 ;                             \n'
 '10         apted                 ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         sembler/IDE:            ;       Adapted from:   earlier example '
 'code\n'
 '12                               ;       Assembler/IDE:  class assembler '
 'project\n'
 '13                               ;                             \n'
 '14         finition              ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         finition              '
 ';-------------------------------------------------------------------------------\n'
 '16         tchdog                ; Definition of Constants     \n'
 '17         tchdog                '
 ';-------------------------------------------------------------------------------\n'
 '18         U                     ; Watchdog timer definitions  \n'
 '19         U                     WDTCTL     EQU     0x0120     \n'
 '20         U                     WDTPW      EQU     0x5A00     \n'
 '21         finition              WDTHOLD    EQU     0x0080     \n'
 '22         finition                                            \n'
 '23         finition              '
 ';-------------------------------------------------------------------------------\n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
INFO:BABY ASSEMBLER:Labels:
{}
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0202                  WDTCTL     EQU     0x0120     \n'
 '20         0204                  WDTPW      EQU     0x5A00     \n'
 '21         0206                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         C000                                                \n'
 '31         C000                  ;define a table (array) of 8 bytes\n'
 '32         c002                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         C000                  ; bytes in RAM space          \n'
 '34         c002                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         C000                  ;  literally "Current address minus\n'
 '36         C000                  ;  address of BufferTable"    \n'
 '37         C000                                                \n'
 '38         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         E000                  ; this is Program memory start\n'
 '41         E000                  ; address for MSP430G2553 (16K)\n'
 '42         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         e002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         E000                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         E000                                                \n'
 '46         e002                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         E000                                                \n'
 '48         E000                  MainProgramStart              \n'
 '49         E000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         e002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         e004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         E000                  ClearNextByte                 \n'
 '53         e002                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         E000                                                \n'
 '55         e002                  inc R14                ; point to next byte '
 'in table\n'
 '56         e004                  dec R15                ; done them all '
 'yet?\n'
 '57         e006                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         E000                  FinishedClearingRAMtable      \n'
 '59         E000                                                \n'
 '60         E000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         e002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         e004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         e006                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         E000                                                \n'
 '65         E000                  GetNextByte                   \n'
 '66         e002                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         E000                                                \n'
 '68         e002                  inc R13                    ;increment '
 'source addr\n'
 '69         e004                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         e006                  dec R15                ; done them all '
 'yet?\n'
 '71         e008                  jnz  GetNextByte     ; if no, do some more\n'
 '72         E000                  FinishedCopyingTableToRAM     \n'
 '73         E000                                                \n'
 '74         e002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         e004                  jnz    Done                   \n'
 '76         E000                                                \n'
 '77         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         E000                  ;           End of main code  \n'
 '79         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         E000                                                \n'
 '81         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         E000                  ;           Subroutines       \n'
 '83         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         E000                                                \n'
 '85         E000                  ; none used here              \n'
 '86         E000                                                \n'
 '87         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         E000                  ;           End of all Subroutines\n'
 '89         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         E000                                                \n'
 '91         E000                                                \n'
 '92         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         E000                  ;           Definition of Program Data '
 'Memory\n'
 '94         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         FFFE                                                \n'
 '97         10000                 PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         10001                 Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         10002                 Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        10003                 Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        10004                 Row3    DB  '-'               \n"
 "102        10005                 Row4    DB  '3'               \n"
 "103        10006                 Row5    DB  '3'               \n"
 "104        10007                 Row6    DB  '6'               \n"
 "105        10008                 Row7    DB  '2'               \n"
 '106        FFFE                                                \n'
 '107        ffff                  PatternTable2  DB "EXAMPLES"  \n'
 '108        FFFE                                                \n'
 '109        FFFE                  '
 ';-------------------------------------------------------------------------------\n'
 '110        FFFE                  ;           Interrupt Vectors \n'
 '111        FFFE                  '
 ';-------------------------------------------------------------------------------\n'
 '112        FFFE                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        10000                 DW      RESET                   ; '
 'establishes the label RESET as\n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0xC000',
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xFFFE',
 'Row0': '0x10000',
 'Row1': '0x10001',
 'Row2': '0x10002',
 'Row3': '0x10003',
 'Row4': '0x10004',
 'Row5': '0x10005',
 'Row6': '0x10006',
 'Row7': '0x10007'}
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0202                  WDTCTL     EQU     0x0120     \n'
 '20         0204                  WDTPW      EQU     0x5A00     \n'
 '21         0206                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         C000                                                \n'
 '31         C000                  ;define a table (array) of 8 bytes\n'
 '32         c002                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         C000                  ; bytes in RAM space          \n'
 '34         c002                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         C000                  ;  literally "Current address minus\n'
 '36         C000                  ;  address of BufferTable"    \n'
 '37         C000                                                \n'
 '38         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         E000                  ; this is Program memory start\n'
 '41         E000                  ; address for MSP430G2553 (16K)\n'
 '42         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         e002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         E000                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         E000                                                \n'
 '46         e002                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         E000                                                \n'
 '48         E000                  MainProgramStart              \n'
 '49         E000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         e002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         e004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         E000                  ClearNextByte                 \n'
 '53         e002                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         E000                                                \n'
 '55         e002                  inc R14                ; point to next byte '
 'in table\n'
 '56         e004                  dec R15                ; done them all '
 'yet?\n'
 '57         e006                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         E000                  FinishedClearingRAMtable      \n'
 '59         E000                                                \n'
 '60         E000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         e002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         e004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         e006                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         E000                                                \n'
 '65         E000                  GetNextByte                   \n'
 '66         e002                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         E000                                                \n'
 '68         e002                  inc R13                    ;increment '
 'source addr\n'
 '69         e004                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         e006                  dec R15                ; done them all '
 'yet?\n'
 '71         e008                  jnz  GetNextByte     ; if no, do some more\n'
 '72         E000                  FinishedCopyingTableToRAM     \n'
 '73         E000                                                \n'
 '74         e002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         e004                  jnz    Done                   \n'
 '76         E000                                                \n'
 '77         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         E000                  ;           End of main code  \n'
 '79         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         E000                                                \n'
 '81         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         E000                  ;           Subroutines       \n'
 '83         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         E000                                                \n'
 '85         E000                  ; none used here              \n'
 '86         E000                                                \n'
 '87         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         E000                  ;           End of all Subroutines\n'
 '89         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         E000                                                \n'
 '91         E000                                                \n'
 '92         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         E000                  ;           Definition of Program Data '
 'Memory\n'
 '94         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         FFFE                                                \n'
 '97         10000                 PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         10001                 Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         10002                 Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        10003                 Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        10004                 Row3    DB  '-'               \n"
 "102        10005                 Row4    DB  '3'               \n"
 "103        10006                 Row5    DB  '3'               \n"
 "104        10007                 Row6    DB  '6'               \n"
 "105        10008                 Row7    DB  '2'               \n"
 '106        FFFE                                                \n'
 '107        ffff                  PatternTable2  DB "EXAMPLES"  \n'
 '108        FFFE                                                \n'
 '109        FFFE                  '
 ';-------------------------------------------------------------------------------\n'
 '110        FFFE                  ;           Interrupt Vectors \n'
 '111        FFFE                  '
 ';-------------------------------------------------------------------------------\n'
 '112        FFFE                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        10000                 DW      RESET                   ; '
 'establishes the label RESET as\n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0xC000',
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xFFFE',
 'Row0': '0x10000',
 'Row1': '0x10001',
 'Row2': '0x10002',
 'Row3': '0x10003',
 'Row4': '0x10004',
 'Row5': '0x10005',
 'Row6': '0x10006',
 'Row7': '0x10007'}
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         C000                                                \n'
 '31         C000                  ;define a table (array) of 8 bytes\n'
 '32         c002                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         C000                  ; bytes in RAM space          \n'
 '34         C000                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         C000                  ;  literally "Current address minus\n'
 '36         C000                  ;  address of BufferTable"    \n'
 '37         C000                                                \n'
 '38         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         E000                  ; this is Program memory start\n'
 '41         E000                  ; address for MSP430G2553 (16K)\n'
 '42         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         e002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         E000                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         E000                                                \n'
 '46         e002                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         E000                                                \n'
 '48         E000                  MainProgramStart              \n'
 '49         E000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         e002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         e004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         E000                  ClearNextByte                 \n'
 '53         e002                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         E000                                                \n'
 '55         e002                  inc R14                ; point to next byte '
 'in table\n'
 '56         e004                  dec R15                ; done them all '
 'yet?\n'
 '57         e006                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         E000                  FinishedClearingRAMtable      \n'
 '59         E000                                                \n'
 '60         E000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         e002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         e004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         e006                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         E000                                                \n'
 '65         E000                  GetNextByte                   \n'
 '66         e002                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         E000                                                \n'
 '68         e002                  inc R13                    ;increment '
 'source addr\n'
 '69         e004                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         e006                  dec R15                ; done them all '
 'yet?\n'
 '71         e008                  jnz  GetNextByte     ; if no, do some more\n'
 '72         E000                  FinishedCopyingTableToRAM     \n'
 '73         E000                                                \n'
 '74         e002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         e004                  jnz    Done                   \n'
 '76         E000                                                \n'
 '77         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         E000                  ;           End of main code  \n'
 '79         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         E000                                                \n'
 '81         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         E000                  ;           Subroutines       \n'
 '83         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         E000                                                \n'
 '85         E000                  ; none used here              \n'
 '86         E000                                                \n'
 '87         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         E000                  ;           End of all Subroutines\n'
 '89         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         E000                                                \n'
 '91         E000                                                \n'
 '92         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         E000                  ;           Definition of Program Data '
 'Memory\n'
 '94         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         FFFE                                                \n'
 '97         10000                 PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         10001                 Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         10002                 Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        10003                 Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        10004                 Row3    DB  '-'               \n"
 "102        10005                 Row4    DB  '3'               \n"
 "103        10006                 Row5    DB  '3'               \n"
 "104        10007                 Row6    DB  '6'               \n"
 "105        10008                 Row7    DB  '2'               \n"
 '106        FFFE                                                \n'
 '107        ffff                  PatternTable2  DB "EXAMPLES"  \n'
 '108        FFFE                                                \n'
 '109        FFFE                  '
 ';-------------------------------------------------------------------------------\n'
 '110        FFFE                  ;           Interrupt Vectors \n'
 '111        FFFE                  '
 ';-------------------------------------------------------------------------------\n'
 '112        FFFE                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        10000                 DW      RESET                   ; '
 'establishes the label RESET as\n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0xC000',
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xFFFE',
 'Row0': '0x10000',
 'Row1': '0x10001',
 'Row2': '0x10002',
 'Row3': '0x10003',
 'Row4': '0x10004',
 'Row5': '0x10005',
 'Row6': '0x10006',
 'Row7': '0x10007'}
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         C000                                                \n'
 '31         C000                  ;define a table (array) of 8 bytes\n'
 '32         c002                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         C000                  ; bytes in RAM space          \n'
 '34         C000                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         C000                  ;  literally "Current address minus\n'
 '36         C000                  ;  address of BufferTable"    \n'
 '37         C000                                                \n'
 '38         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         E000                  ; this is Program memory start\n'
 '41         E000                  ; address for MSP430G2553 (16K)\n'
 '42         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         e002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         E000                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         E000                                                \n'
 '46         e002                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         E000                                                \n'
 '48         E000                  MainProgramStart              \n'
 '49         E000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         e002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         e004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         E000                  ClearNextByte                 \n'
 '53         e002                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         E000                                                \n'
 '55         e002                  inc R14                ; point to next byte '
 'in table\n'
 '56         e004                  dec R15                ; done them all '
 'yet?\n'
 '57         e006                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         E000                  FinishedClearingRAMtable      \n'
 '59         E000                                                \n'
 '60         E000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         e002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         e004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         e006                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         E000                                                \n'
 '65         E000                  GetNextByte                   \n'
 '66         e002                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         E000                                                \n'
 '68         e002                  inc R13                    ;increment '
 'source addr\n'
 '69         e004                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         e006                  dec R15                ; done them all '
 'yet?\n'
 '71         e008                  jnz  GetNextByte     ; if no, do some more\n'
 '72         E000                  FinishedCopyingTableToRAM     \n'
 '73         E000                                                \n'
 '74         e002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         e004                  jnz    Done                   \n'
 '76         E000                                                \n'
 '77         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         E000                  ;           End of main code  \n'
 '79         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         E000                                                \n'
 '81         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         E000                  ;           Subroutines       \n'
 '83         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         E000                                                \n'
 '85         E000                  ; none used here              \n'
 '86         E000                                                \n'
 '87         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         E000                  ;           End of all Subroutines\n'
 '89         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         E000                                                \n'
 '91         E000                                                \n'
 '92         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         E000                  ;           Definition of Program Data '
 'Memory\n'
 '94         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         FFFE                                                \n'
 '97         10000                 PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         10001                 Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         10002                 Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        10003                 Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        10004                 Row3    DB  '-'               \n"
 "102        10005                 Row4    DB  '3'               \n"
 "103        10006                 Row5    DB  '3'               \n"
 "104        10007                 Row6    DB  '6'               \n"
 "105        10008                 Row7    DB  '2'               \n"
 '106        FFFE                                                \n'
 '107        ffff                  PatternTable2  DB "EXAMPLES"  \n'
 '108        FFFE                                                \n'
 '109        FFFE                  '
 ';-------------------------------------------------------------------------------\n'
 '110        FFFE                  ;           Interrupt Vectors \n'
 '111        FFFE                  '
 ';-------------------------------------------------------------------------------\n'
 '112        FFFE                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        10000                 DW      RESET                   ; '
 'establishes the label RESET as\n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0xC000',
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xFFFE',
 'Row0': '0x10000',
 'Row1': '0x10001',
 'Row2': '0x10002',
 'Row3': '0x10003',
 'Row4': '0x10004',
 'Row5': '0x10005',
 'Row6': '0x10006',
 'Row7': '0x10007'}
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         C000                                                \n'
 '31         C000                  ;define a table (array) of 8 bytes\n'
 '32         c002                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         C000                  ; bytes in RAM space          \n'
 '34         C000                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         C000                  ;  literally "Current address minus\n'
 '36         C000                  ;  address of BufferTable"    \n'
 '37         C000                                                \n'
 '38         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         E000                  ; this is Program memory start\n'
 '41         E000                  ; address for MSP430G2553 (16K)\n'
 '42         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         e002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         E000                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         E000                                                \n'
 '46         e002                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         E000                                                \n'
 '48         E000                  MainProgramStart              \n'
 '49         E000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         e002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         e004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         E000                  ClearNextByte                 \n'
 '53         e002                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         E000                                                \n'
 '55         e002                  inc R14                ; point to next byte '
 'in table\n'
 '56         e004                  dec R15                ; done them all '
 'yet?\n'
 '57         e006                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         E000                  FinishedClearingRAMtable      \n'
 '59         E000                                                \n'
 '60         E000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         e002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         e004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         e006                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         E000                                                \n'
 '65         E000                  GetNextByte                   \n'
 '66         e002                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         E000                                                \n'
 '68         e002                  inc R13                    ;increment '
 'source addr\n'
 '69         e004                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         e006                  dec R15                ; done them all '
 'yet?\n'
 '71         e008                  jnz  GetNextByte     ; if no, do some more\n'
 '72         E000                  FinishedCopyingTableToRAM     \n'
 '73         E000                                                \n'
 '74         e002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         e004                  jnz    Done                   \n'
 '76         E000                                                \n'
 '77         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         E000                  ;           End of main code  \n'
 '79         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         E000                                                \n'
 '81         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         E000                  ;           Subroutines       \n'
 '83         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         E000                                                \n'
 '85         E000                  ; none used here              \n'
 '86         E000                                                \n'
 '87         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         E000                  ;           End of all Subroutines\n'
 '89         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         E000                                                \n'
 '91         E000                                                \n'
 '92         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         E000                  ;           Definition of Program Data '
 'Memory\n'
 '94         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         FFFE                                                \n'
 '97         10000                 PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         10001                 Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         10002                 Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        10003                 Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        10004                 Row3    DB  '-'               \n"
 "102        10005                 Row4    DB  '3'               \n"
 "103        10006                 Row5    DB  '3'               \n"
 "104        10007                 Row6    DB  '6'               \n"
 "105        10008                 Row7    DB  '2'               \n"
 '106        FFFE                                                \n'
 '107        ffff                  PatternTable2  DB "EXAMPLES"  \n'
 '108        FFFE                                                \n'
 '109        FFFE                  '
 ';-------------------------------------------------------------------------------\n'
 '110        FFFE                  ;           Interrupt Vectors \n'
 '111        FFFE                  '
 ';-------------------------------------------------------------------------------\n'
 '112        FFFE                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        10000                 DW      RESET                   ; '
 'establishes the label RESET as\n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:0x00ne
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': None,
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': None,
 'Row0': None,
 'Row1': None,
 'Row2': None,
 'Row3': None,
 'Row4': None,
 'Row5': None,
 'Row6': None,
 'Row7': None}
INFO:BABY ASSEMBLER:Flines:
('0          C000                  '
 ';-------------------------------------------------------------------------------\n'
 '1          C000                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          C000                  ;                             \n'
 '3          C000                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          C000                  ;                             \n'
 '5          C000                  ;   Target: TI MSP430 family - simulation\n'
 '6          C000                  ;                             \n'
 '7          C000                  ;       Date:           July 25, 2017\n'
 '8          C000                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          C000                  ;                             \n'
 '10         C000                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         C000                  ;       Adapted from:   earlier example '
 'code\n'
 '12         C000                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         C000                  ;                             \n'
 '14         C000                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '16         C000                  ; Definition of Constants     \n'
 '17         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '18         C000                  ; Watchdog timer definitions  \n'
 '19         C000                  WDTCTL     EQU     0x0120     \n'
 '20         C000                  WDTPW      EQU     0x5A00     \n'
 '21         C000                  WDTHOLD    EQU     0x0080     \n'
 '22         C000                                                \n'
 '23         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '24         C000                  ; Definition of Variables     \n'
 '25         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '26         C000                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:0x00ne
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': None,
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': None,
 'Row0': None,
 'Row1': None,
 'Row2': None,
 'Row3': None,
 'Row4': None,
 'Row5': None,
 'Row6': None,
 'Row7': None}
INFO:BABY ASSEMBLER:Flines:
('0          C000                  '
 ';-------------------------------------------------------------------------------\n'
 '1          C000                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          C000                  ;                             \n'
 '3          C000                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          C000                  ;                             \n'
 '5          C000                  ;   Target: TI MSP430 family - simulation\n'
 '6          C000                  ;                             \n'
 '7          C000                  ;       Date:           July 25, 2017\n'
 '8          C000                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          C000                  ;                             \n'
 '10         C000                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         C000                  ;       Adapted from:   earlier example '
 'code\n'
 '12         C000                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         C000                  ;                             \n'
 '14         C000                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '16         C000                  ; Definition of Constants     \n'
 '17         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '18         C000                  ; Watchdog timer definitions  \n'
 '19         C000                  WDTCTL     EQU     0x0120     \n'
 '20         C000                  WDTPW      EQU     0x5A00     \n'
 '21         C000                  WDTHOLD    EQU     0x0080     \n'
 '22         C000                                                \n'
 '23         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '24         C000                  ; Definition of Variables     \n'
 '25         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '26         C000                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:0x00ne
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': None,
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': None,
 'Row0': None,
 'Row1': None,
 'Row2': None,
 'Row3': None,
 'Row4': None,
 'Row5': None,
 'Row6': None,
 'Row7': None}
INFO:BABY ASSEMBLER:Flines:
('0          C000                  '
 ';-------------------------------------------------------------------------------\n'
 '1          C000                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          C000                  ;                             \n'
 '3          C000                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          C000                  ;                             \n'
 '5          C000                  ;   Target: TI MSP430 family - simulation\n'
 '6          C000                  ;                             \n'
 '7          C000                  ;       Date:           July 25, 2017\n'
 '8          C000                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          C000                  ;                             \n'
 '10         C000                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         C000                  ;       Adapted from:   earlier example '
 'code\n'
 '12         C000                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         C000                  ;                             \n'
 '14         C000                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '16         C000                  ; Definition of Constants     \n'
 '17         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '18         C000                  ; Watchdog timer definitions  \n'
 '19         C000                  WDTCTL     EQU     0x0120     \n'
 '20         C000                  WDTPW      EQU     0x5A00     \n'
 '21         C000                  WDTHOLD    EQU     0x0080     \n'
 '22         C000                                                \n'
 '23         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '24         C000                  ; Definition of Variables     \n'
 '25         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '26         C000                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xC000
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
DEBUG:BABY ASSEMBLER:0xFFFE
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0xC000',
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xFFFE',
 'Row0': '0x10000',
 'Row1': '0x10001',
 'Row2': '0x10002',
 'Row3': '0x10003',
 'Row4': '0x10004',
 'Row5': '0x10005',
 'Row6': '0x10006',
 'Row7': '0x10007'}
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         C000                                                \n'
 '31         C000                  ;define a table (array) of 8 bytes\n'
 '32         c002                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         C000                  ; bytes in RAM space          \n'
 '34         C000                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         C000                  ;  literally "Current address minus\n'
 '36         C000                  ;  address of BufferTable"    \n'
 '37         C000                                                \n'
 '38         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         E000                  ; this is Program memory start\n'
 '41         E000                  ; address for MSP430G2553 (16K)\n'
 '42         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         e002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         E000                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         E000                                                \n'
 '46         e002                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         E000                                                \n'
 '48         E000                  MainProgramStart              \n'
 '49         E000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         e002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         e004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         E000                  ClearNextByte                 \n'
 '53         e002                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         E000                                                \n'
 '55         e002                  inc R14                ; point to next byte '
 'in table\n'
 '56         e004                  dec R15                ; done them all '
 'yet?\n'
 '57         e006                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         E000                  FinishedClearingRAMtable      \n'
 '59         E000                                                \n'
 '60         E000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         e002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         e004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         e006                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         E000                                                \n'
 '65         E000                  GetNextByte                   \n'
 '66         e002                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         E000                                                \n'
 '68         e002                  inc R13                    ;increment '
 'source addr\n'
 '69         e004                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         e006                  dec R15                ; done them all '
 'yet?\n'
 '71         e008                  jnz  GetNextByte     ; if no, do some more\n'
 '72         E000                  FinishedCopyingTableToRAM     \n'
 '73         E000                                                \n'
 '74         e002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         e004                  jnz    Done                   \n'
 '76         E000                                                \n'
 '77         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         E000                  ;           End of main code  \n'
 '79         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         E000                                                \n'
 '81         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         E000                  ;           Subroutines       \n'
 '83         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         E000                                                \n'
 '85         E000                  ; none used here              \n'
 '86         E000                                                \n'
 '87         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         E000                  ;           End of all Subroutines\n'
 '89         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         E000                                                \n'
 '91         E000                                                \n'
 '92         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         E000                  ;           Definition of Program Data '
 'Memory\n'
 '94         E000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         FFFE                                                \n'
 '97         10000                 PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         10001                 Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         10002                 Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        10003                 Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        10004                 Row3    DB  '-'               \n"
 "102        10005                 Row4    DB  '3'               \n"
 "103        10006                 Row5    DB  '3'               \n"
 "104        10007                 Row6    DB  '6'               \n"
 "105        10008                 Row7    DB  '2'               \n"
 '106        FFFE                                                \n'
 '107        ffff                  PatternTable2  DB "EXAMPLES"  \n'
 '108        FFFE                                                \n'
 '109        FFFE                  '
 ';-------------------------------------------------------------------------------\n'
 '110        FFFE                  ;           Interrupt Vectors \n'
 '111        FFFE                  '
 ';-------------------------------------------------------------------------------\n'
 '112        FFFE                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        10000                 DW      RESET                   ; '
 'establishes the label RESET as\n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:0x00ne
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': None,
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': None,
 'Row0': None,
 'Row1': None,
 'Row2': None,
 'Row3': None,
 'Row4': None,
 'Row5': None,
 'Row6': None,
 'Row7': None}
INFO:BABY ASSEMBLER:Flines:
('0          C000                  '
 ';-------------------------------------------------------------------------------\n'
 '1          C000                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          C000                  ;                             \n'
 '3          C000                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          C000                  ;                             \n'
 '5          C000                  ;   Target: TI MSP430 family - simulation\n'
 '6          C000                  ;                             \n'
 '7          C000                  ;       Date:           July 25, 2017\n'
 '8          C000                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          C000                  ;                             \n'
 '10         C000                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         C000                  ;       Adapted from:   earlier example '
 'code\n'
 '12         C000                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         C000                  ;                             \n'
 '14         C000                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '16         C000                  ; Definition of Constants     \n'
 '17         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '18         C000                  ; Watchdog timer definitions  \n'
 '19         C000                  WDTCTL     EQU     0x0120     \n'
 '20         C000                  WDTPW      EQU     0x5A00     \n'
 '21         C000                  WDTHOLD    EQU     0x0080     \n'
 '22         C000                                                \n'
 '23         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '24         C000                  ; Definition of Variables     \n'
 '25         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '26         C000                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:0x00ne
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': None,
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': None,
 'Row0': None,
 'Row1': None,
 'Row2': None,
 'Row3': None,
 'Row4': None,
 'Row5': None,
 'Row6': None,
 'Row7': None}
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:0x00ne
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': None,
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': None,
 'Row0': None,
 'Row1': None,
 'Row2': None,
 'Row3': None,
 'Row4': None,
 'Row5': None,
 'Row6': None,
 'Row7': None}
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Changed all the addresses in the previous lines to this address.
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:0x00ne
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': None,
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': None,
 'Row0': None,
 'Row1': None,
 'Row2': None,
 'Row3': None,
 'Row4': None,
 'Row5': None,
 'Row6': None,
 'Row7': None}
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:0x00ne
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:None
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': None,
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': None,
 'Row0': None,
 'Row1': None,
 'Row2': None,
 'Row3': None,
 'Row4': None,
 'Row5': None,
 'Row6': None,
 'Row7': None}
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': None,
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': None,
 'Row0': None,
 'Row1': None,
 'Row2': None,
 'Row3': None,
 'Row4': None,
 'Row5': None,
 'Row6': None,
 'Row7': None}
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': None,
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': None,
 'Row0': None,
 'Row1': None,
 'Row2': None,
 'Row3': None,
 'Row4': None,
 'Row5': None,
 'Row6': None,
 'Row7': None}
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': None,
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': None,
 'Row0': None,
 'Row1': None,
 'Row2': None,
 'Row3': None,
 'Row4': None,
 'Row5': None,
 'Row6': None,
 'Row7': None}
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': None,
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': None,
 'Row0': None,
 'Row1': None,
 'Row2': None,
 'Row3': None,
 'Row4': None,
 'Row5': None,
 'Row6': None,
 'Row7': None}
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': None,
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': None,
 'Row0': None,
 'Row1': None,
 'Row2': None,
 'Row3': None,
 'Row4': None,
 'Row5': None,
 'Row6': None,
 'Row7': None}
INFO:BABY ASSEMBLER:Flines:
''
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': None,
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': None,
 'Row0': None,
 'Row1': None,
 'Row2': None,
 'Row3': None,
 'Row4': None,
 'Row5': None,
 'Row6': None,
 'Row7': None}
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': None,
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': None,
 'Row0': None,
 'Row1': None,
 'Row2': None,
 'Row3': None,
 'Row4': None,
 'Row5': None,
 'Row6': None,
 'Row7': None}
INFO:BABY ASSEMBLER:Flines:
''
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': None,
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': None,
 'Row0': None,
 'Row1': None,
 'Row2': None,
 'Row3': None,
 'Row4': None,
 'Row5': None,
 'Row6': None,
 'Row7': None}
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': None,
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': None,
 'Row0': None,
 'Row1': None,
 'Row2': None,
 'Row3': None,
 'Row4': None,
 'Row5': None,
 'Row6': None,
 'Row7': None}
WARNING:BABY ASSEMBLER:Column contains NoneType
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:[None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 '0x0200',
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 '0xC000',
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 '0xE000',
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 '0xFFFE',
 None,
 None,
 None,
 None]
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': None,
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': None,
 'Row0': None,
 'Row1': None,
 'Row2': None,
 'Row3': None,
 'Row4': None,
 'Row5': None,
 'Row6': None,
 'Row7': None}
WARNING:BABY ASSEMBLER:Column contains NoneType
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:[None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 '0x0200',
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 '0xC000',
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 '0xE000',
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 '0xFFFE',
 None,
 None,
 None,
 None]
DEBUG:BABY ASSEMBLER:['0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 '0xC000',
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 '0xE000',
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 '0xFFFE',
 None,
 None,
 None,
 None]
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': None,
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': None,
 'Row0': None,
 'Row1': None,
 'Row2': None,
 'Row3': None,
 'Row4': None,
 'Row5': None,
 'Row6': None,
 'Row7': None}
WARNING:BABY ASSEMBLER:Column contains NoneType
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:['0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 '0xC000',
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 '0xE000',
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 '0xFFFE',
 None,
 None,
 None,
 None]
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': None,
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': None,
 'Row0': None,
 'Row1': None,
 'Row2': None,
 'Row3': None,
 'Row4': None,
 'Row5': None,
 'Row6': None,
 'Row7': None}
WARNING:BABY ASSEMBLER:Column contains NoneType
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:['0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0xC000',
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 '0xE000',
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 '0xFFFE',
 None,
 None,
 None,
 None]
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0200',
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': None,
 'Row0': None,
 'Row1': None,
 'Row2': None,
 'Row3': None,
 'Row4': None,
 'Row5': None,
 'Row6': None,
 'Row7': None}
WARNING:BABY ASSEMBLER:Column contains NoneType
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0200                                                \n'
 '31         0200                  ;define a table (array) of 8 bytes\n'
 '32         202                   BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         0200                  ; bytes in RAM space          \n'
 '34         0200                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         0200                  ;  literally "Current address minus\n'
 '36         0200                  ;  address of BufferTable"    \n'
 '37         0200                                                \n'
 '38         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:['0x0200',
 '0xC000',
 '0xE000',
 '0xFFFE',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 '0xC000',
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 '0xE000',
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 '0xFFFE',
 None,
 None,
 None,
 None]
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': None,
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': None,
 'Row0': None,
 'Row1': None,
 'Row2': None,
 'Row3': None,
 'Row4': None,
 'Row5': None,
 'Row6': None,
 'Row7': None}
WARNING:BABY ASSEMBLER:Column contains NoneType
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          C000                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          E000                  ;                             \n'
 '3          FFFE                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:['0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0xC000',
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 '0xE000',
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 '0xFFFE',
 None,
 None,
 None,
 None]
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0200',
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': None,
 'Row0': None,
 'Row1': None,
 'Row2': None,
 'Row3': None,
 'Row4': None,
 'Row5': None,
 'Row6': None,
 'Row7': None}
WARNING:BABY ASSEMBLER:Column contains NoneType
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0200                                                \n'
 '31         0200                  ;define a table (array) of 8 bytes\n'
 '32         202                   BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         0200                  ; bytes in RAM space          \n'
 '34         0200                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         0200                  ;  literally "Current address minus\n'
 '36         0200                  ;  address of BufferTable"    \n'
 '37         0200                                                \n'
 '38         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:['0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0xC000',
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 '0xE000',
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 '0xFFFE',
 None,
 None,
 None,
 None]
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0200',
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': None,
 'Row0': None,
 'Row1': None,
 'Row2': None,
 'Row3': None,
 'Row4': None,
 'Row5': None,
 'Row6': None,
 'Row7': None}
WARNING:BABY ASSEMBLER:Column contains NoneType
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0200                                                \n'
 '31         0200                  ;define a table (array) of 8 bytes\n'
 '32         202                   BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         0200                  ; bytes in RAM space          \n'
 '34         0200                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         0200                  ;  literally "Current address minus\n'
 '36         0200                  ;  address of BufferTable"    \n'
 '37         0200                                                \n'
 '38         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:['0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0xC000',
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 '0xE000',
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 '0xFFFE',
 None,
 None,
 None,
 None]
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0200',
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': None,
 'Row0': None,
 'Row1': None,
 'Row2': None,
 'Row3': None,
 'Row4': None,
 'Row5': None,
 'Row6': None,
 'Row7': None}
WARNING:BABY ASSEMBLER:Column contains NoneType
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0200                                                \n'
 '31         0200                  ;define a table (array) of 8 bytes\n'
 '32         202                   BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         0200                  ; bytes in RAM space          \n'
 '34         0200                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         0200                  ;  literally "Current address minus\n'
 '36         0200                  ;  address of BufferTable"    \n'
 '37         0200                                                \n'
 '38         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:['0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0xC000',
 '0xE000',
 '0xFFFE',
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 '0xC000',
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 '0xE000',
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 '0xFFFE',
 None,
 None,
 None,
 None]
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': None,
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': None,
 'Row0': None,
 'Row1': None,
 'Row2': None,
 'Row3': None,
 'Row4': None,
 'Row5': None,
 'Row6': None,
 'Row7': None}
WARNING:BABY ASSEMBLER:Column contains NoneType
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         FFFE                                                \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:['0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xFFFE',
 None,
 None,
 None,
 None]
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0200',
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xE000',
 'Row0': '0xe002',
 'Row1': '0xe003',
 'Row2': '0xe004',
 'Row3': '0xe005',
 'Row4': '0xe006',
 'Row5': '0xe007',
 'Row6': '0xe008',
 'Row7': '0xe009'}
WARNING:BABY ASSEMBLER:Column contains NoneType
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0200                                                \n'
 '31         0200                  ;define a table (array) of 8 bytes\n'
 '32         202                   BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         0200                  ; bytes in RAM space          \n'
 '34         0200                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         0200                  ;  literally "Current address minus\n'
 '36         0200                  ;  address of BufferTable"    \n'
 '37         0200                                                \n'
 '38         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         C000                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         C000                                                \n'
 '46         c002                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         C000                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         c002                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         c002                  inc R14                ; point to next byte '
 'in table\n'
 '56         c004                  dec R15                ; done them all '
 'yet?\n'
 '57         c006                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         c006                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         c002                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         c002                  inc R13                    ;increment '
 'source addr\n'
 '69         c004                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         c006                  dec R15                ; done them all '
 'yet?\n'
 '71         c008                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c004                  jnz    Done                   \n'
 '76         C000                                                \n'
 '77         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         C000                  ;           End of main code  \n'
 '79         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         C000                                                \n'
 '81         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         C000                  ;           Subroutines       \n'
 '83         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         C000                                                \n'
 '85         C000                  ; none used here              \n'
 '86         C000                                                \n'
 '87         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         C000                  ;           End of all Subroutines\n'
 '89         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         C000                                                \n'
 '91         C000                                                \n'
 '92         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         C000                  ;           Definition of Program Data '
 'Memory\n'
 '94         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         e002                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e003                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e004                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e005                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e006                  Row3    DB  '-'               \n"
 "102        e007                  Row4    DB  '3'               \n"
 "103        e008                  Row5    DB  '3'               \n"
 "104        e009                  Row6    DB  '6'               \n"
 "105        e00a                  Row7    DB  '2'               \n"
 '106        E000                                                \n'
 '107        e001                  PatternTable2  DB "EXAMPLES"  \n'
 '108        E000                                                \n'
 '109        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '110        E000                  ;           Interrupt Vectors \n'
 '111        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '112        E000                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        10000                 DW      RESET                   ; '
 'establishes the label RESET as\n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:['0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xFFFE',
 None,
 None,
 None,
 None]
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0200',
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xE000',
 'Row0': '0xe002',
 'Row1': '0xe003',
 'Row2': '0xe004',
 'Row3': '0xe005',
 'Row4': '0xe006',
 'Row5': '0xe007',
 'Row6': '0xe008',
 'Row7': '0xe009'}
WARNING:BABY ASSEMBLER:Column contains NoneType
INFO:BABY ASSEMBLER:Flines:
''
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:['0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xFFFE',
 None,
 None,
 None,
 None]
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0200',
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xE000',
 'Row0': '0xe002',
 'Row1': '0xe003',
 'Row2': '0xe004',
 'Row3': '0xe005',
 'Row4': '0xe006',
 'Row5': '0xe007',
 'Row6': '0xe008',
 'Row7': '0xe009'}
WARNING:BABY ASSEMBLER:Column contains NoneType
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0200                                                \n'
 '31         0200                  ;define a table (array) of 8 bytes\n'
 '32         202                   BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         0200                  ; bytes in RAM space          \n'
 '34         0200                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         0200                  ;  literally "Current address minus\n'
 '36         0200                  ;  address of BufferTable"    \n'
 '37         0200                                                \n'
 '38         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         C000                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         C000                                                \n'
 '46         c002                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         C000                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         c002                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         c002                  inc R14                ; point to next byte '
 'in table\n'
 '56         c004                  dec R15                ; done them all '
 'yet?\n'
 '57         c006                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         c006                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         c002                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         c002                  inc R13                    ;increment '
 'source addr\n'
 '69         c004                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         c006                  dec R15                ; done them all '
 'yet?\n'
 '71         c008                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c004                  jnz    Done                   \n'
 '76         C000                                                \n'
 '77         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         C000                  ;           End of main code  \n'
 '79         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         C000                                                \n'
 '81         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         C000                  ;           Subroutines       \n'
 '83         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         C000                                                \n'
 '85         C000                  ; none used here              \n'
 '86         C000                                                \n'
 '87         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         C000                  ;           End of all Subroutines\n'
 '89         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         C000                                                \n'
 '91         C000                                                \n'
 '92         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         C000                  ;           Definition of Program Data '
 'Memory\n'
 '94         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         e002                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e003                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e004                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e005                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e006                  Row3    DB  '-'               \n"
 "102        e007                  Row4    DB  '3'               \n"
 "103        e008                  Row5    DB  '3'               \n"
 "104        e009                  Row6    DB  '6'               \n"
 "105        e00a                  Row7    DB  '2'               \n"
 '106        E000                                                \n'
 '107        e001                  PatternTable2  DB "EXAMPLES"  \n'
 '108        E000                                                \n'
 '109        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '110        E000                  ;           Interrupt Vectors \n'
 '111        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '112        E000                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        10000                 DW      RESET                   ; '
 'establishes the label RESET as\n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:['0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xFFFE',
 None,
 None,
 None,
 None]
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0200',
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xE000',
 'Row0': '0xe002',
 'Row1': '0xe003',
 'Row2': '0xe004',
 'Row3': '0xe005',
 'Row4': '0xe006',
 'Row5': '0xe007',
 'Row6': '0xe008',
 'Row7': '0xe009'}
WARNING:BABY ASSEMBLER:Column contains NoneType
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0200                                                \n'
 '31         0200                  ;define a table (array) of 8 bytes\n'
 '32         202                   BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         0200                  ; bytes in RAM space          \n'
 '34         0200                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         0200                  ;  literally "Current address minus\n'
 '36         0200                  ;  address of BufferTable"    \n'
 '37         0200                                                \n'
 '38         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         C000                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         C000                                                \n'
 '46         c002                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         C000                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         c002                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         c002                  inc R14                ; point to next byte '
 'in table\n'
 '56         c004                  dec R15                ; done them all '
 'yet?\n'
 '57         c006                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         c006                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         c002                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         c002                  inc R13                    ;increment '
 'source addr\n'
 '69         c004                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         c006                  dec R15                ; done them all '
 'yet?\n'
 '71         c008                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c004                  jnz    Done                   \n'
 '76         C000                                                \n'
 '77         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         C000                  ;           End of main code  \n'
 '79         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         C000                                                \n'
 '81         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         C000                  ;           Subroutines       \n'
 '83         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         C000                                                \n'
 '85         C000                  ; none used here              \n'
 '86         C000                                                \n'
 '87         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         C000                  ;           End of all Subroutines\n'
 '89         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         C000                                                \n'
 '91         C000                                                \n'
 '92         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         C000                  ;           Definition of Program Data '
 'Memory\n'
 '94         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         e002                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e003                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e004                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e005                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e006                  Row3    DB  '-'               \n"
 "102        e007                  Row4    DB  '3'               \n"
 "103        e008                  Row5    DB  '3'               \n"
 "104        e009                  Row6    DB  '6'               \n"
 "105        e00a                  Row7    DB  '2'               \n"
 '106        E000                                                \n'
 '107        e001                  PatternTable2  DB "EXAMPLES"  \n'
 '108        E000                                                \n'
 '109        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '110        E000                  ;           Interrupt Vectors \n'
 '111        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '112        E000                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        10000                 DW      RESET                   ; '
 'establishes the label RESET as\n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:['0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xFFFE',
 None,
 None,
 None,
 None]
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0200',
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xE000',
 'Row0': '0xe002',
 'Row1': '0xe003',
 'Row2': '0xe004',
 'Row3': '0xe005',
 'Row4': '0xe006',
 'Row5': '0xe007',
 'Row6': '0xe008',
 'Row7': '0xe009'}
WARNING:BABY ASSEMBLER:Column contains NoneType
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0200                                                \n'
 '31         0200                  ;define a table (array) of 8 bytes\n'
 '32         0202                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         0200                  ; bytes in RAM space          \n'
 '34         0200                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         0200                  ;  literally "Current address minus\n'
 '36         0200                  ;  address of BufferTable"    \n'
 '37         0200                                                \n'
 '38         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         C000                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         C000                                                \n'
 '46         c002                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         C000                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         c002                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         c002                  inc R14                ; point to next byte '
 'in table\n'
 '56         c004                  dec R15                ; done them all '
 'yet?\n'
 '57         c006                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         c006                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         c002                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         c002                  inc R13                    ;increment '
 'source addr\n'
 '69         c004                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         c006                  dec R15                ; done them all '
 'yet?\n'
 '71         c008                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c004                  jnz    Done                   \n'
 '76         C000                                                \n'
 '77         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         C000                  ;           End of main code  \n'
 '79         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         C000                                                \n'
 '81         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         C000                  ;           Subroutines       \n'
 '83         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         C000                                                \n'
 '85         C000                  ; none used here              \n'
 '86         C000                                                \n'
 '87         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         C000                  ;           End of all Subroutines\n'
 '89         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         C000                                                \n'
 '91         C000                                                \n'
 '92         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         C000                  ;           Definition of Program Data '
 'Memory\n'
 '94         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         e002                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e003                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e004                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e005                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e006                  Row3    DB  '-'               \n"
 "102        e007                  Row4    DB  '3'               \n"
 "103        e008                  Row5    DB  '3'               \n"
 "104        e009                  Row6    DB  '6'               \n"
 "105        e00a                  Row7    DB  '2'               \n"
 '106        E000                                                \n'
 '107        e001                  PatternTable2  DB "EXAMPLES"  \n'
 '108        E000                                                \n'
 '109        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '110        E000                  ;           Interrupt Vectors \n'
 '111        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '112        E000                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        10000                 DW      RESET                   ; '
 'establishes the label RESET as\n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:['0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xFFFE',
 None,
 None,
 None,
 None]
DEBUG:BABY ASSEMBLER:Storing previous val of None into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of None into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of None into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of None into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of None into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of None into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of None into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of None into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of None into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of None into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of None into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of None into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of None into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of None into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of None into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of None into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of None into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of None into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of None into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xFFFE
DEBUG:BABY ASSEMBLER:Storing previous val of 0xe002 into old val None
DEBUG:BABY ASSEMBLER:Storing previous val of None into old val None
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0200',
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xE000',
 'Row0': '0xe002',
 'Row1': '0xe003',
 'Row2': '0xe004',
 'Row3': '0xe005',
 'Row4': '0xe006',
 'Row5': '0xe007',
 'Row6': '0xe008',
 'Row7': '0xe009'}
WARNING:BABY ASSEMBLER:Column contains NoneType
INFO:BABY ASSEMBLER:Flines:
''
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:['0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xFFFE',
 None,
 None,
 None,
 None]
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xFFFE
DEBUG:BABY ASSEMBLER:Storing previous val of 0xe002 into old val None
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0200',
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xE000',
 'Row0': '0xe002',
 'Row1': '0xe003',
 'Row2': '0xe004',
 'Row3': '0xe005',
 'Row4': '0xe006',
 'Row5': '0xe007',
 'Row6': '0xe008',
 'Row7': '0xe009'}
WARNING:BABY ASSEMBLER:Column contains NoneType
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0200                                                \n'
 '31         0200                  ;define a table (array) of 8 bytes\n'
 '32         0202                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         0202                  ; bytes in RAM space          \n'
 '34         0200                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         0200                  ;  literally "Current address minus\n'
 '36         0200                  ;  address of BufferTable"    \n'
 '37         0200                                                \n'
 '38         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '39         0200                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         0200                  ; this is Program memory start\n'
 '41         0200                  ; address for MSP430G2553 (16K)\n'
 '42         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '43         0202                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         0202                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         C000                                                \n'
 '46         c002                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         C000                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         c002                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         c002                  inc R14                ; point to next byte '
 'in table\n'
 '56         c004                  dec R15                ; done them all '
 'yet?\n'
 '57         c006                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         c006                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         c002                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         c002                  inc R13                    ;increment '
 'source addr\n'
 '69         c004                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         c006                  dec R15                ; done them all '
 'yet?\n'
 '71         c008                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c004                  jnz    Done                   \n'
 '76         C000                                                \n'
 '77         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         C000                  ;           End of main code  \n'
 '79         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         C000                                                \n'
 '81         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         C000                  ;           Subroutines       \n'
 '83         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         C000                                                \n'
 '85         C000                  ; none used here              \n'
 '86         C000                                                \n'
 '87         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         C000                  ;           End of all Subroutines\n'
 '89         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         C000                                                \n'
 '91         C000                                                \n'
 '92         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         C000                  ;           Definition of Program Data '
 'Memory\n'
 '94         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         C000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         e002                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e003                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e004                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e005                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e006                  Row3    DB  '-'               \n"
 "102        e007                  Row4    DB  '3'               \n"
 "103        e008                  Row5    DB  '3'               \n"
 "104        e009                  Row6    DB  '6'               \n"
 "105        e00a                  Row7    DB  '2'               \n"
 '106        E000                                                \n'
 '107        e001                  PatternTable2  DB "EXAMPLES"  \n'
 '108        E000                                                \n'
 '109        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '110        E000                  ;           Interrupt Vectors \n'
 '111        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '112        E000                                                \n'
 '113        E000                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        e002                  DW      RESET                   ; '
 'establishes the label RESET as\n'
 '115        e002                  ; the starting point          \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:['0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xFFFE',
 None,
 None,
 None,
 None]
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xFFFE
DEBUG:BABY ASSEMBLER:Storing previous val of 0xe002 into old val None
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0200',
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xE000',
 'Row0': '0xe002',
 'Row1': '0xe003',
 'Row2': '0xe004',
 'Row3': '0xe005',
 'Row4': '0xe006',
 'Row5': '0xe007',
 'Row6': '0xe008',
 'Row7': '0xe009'}
WARNING:BABY ASSEMBLER:Column contains NoneType
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0200                                                \n'
 '31         0200                  ;define a table (array) of 8 bytes\n'
 '32         0202                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         0202                  ; bytes in RAM space          \n'
 '34         0202                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         0202                  ;  literally "Current address minus\n'
 '36         0202                  ;  address of BufferTable"    \n'
 '37         0200                                                \n'
 '38         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '39         0200                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         0200                  ; this is Program memory start\n'
 '41         0200                  ; address for MSP430G2553 (16K)\n'
 '42         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '43         0202                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         0202                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         C000                                                \n'
 '46         c002                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         C000                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         c002                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         c002                  inc R14                ; point to next byte '
 'in table\n'
 '56         c004                  dec R15                ; done them all '
 'yet?\n'
 '57         c006                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         c006                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         c002                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         c002                  inc R13                    ;increment '
 'source addr\n'
 '69         c004                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         c006                  dec R15                ; done them all '
 'yet?\n'
 '71         c008                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c004                  jnz    Done                   \n'
 '76         C000                                                \n'
 '77         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         C000                  ;           End of main code  \n'
 '79         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         C000                                                \n'
 '81         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         C000                  ;           Subroutines       \n'
 '83         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         C000                                                \n'
 '85         C000                  ; none used here              \n'
 '86         C000                                                \n'
 '87         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         C000                  ;           End of all Subroutines\n'
 '89         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         C000                                                \n'
 '91         C000                                                \n'
 '92         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         C000                  ;           Definition of Program Data '
 'Memory\n'
 '94         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         C000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         e002                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e003                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e004                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e005                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e006                  Row3    DB  '-'               \n"
 "102        e007                  Row4    DB  '3'               \n"
 "103        e008                  Row5    DB  '3'               \n"
 "104        e009                  Row6    DB  '6'               \n"
 "105        e00a                  Row7    DB  '2'               \n"
 '106        E000                                                \n'
 '107        e001                  PatternTable2  DB "EXAMPLES"  \n'
 '108        E000                                                \n'
 '109        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '110        E000                  ;           Interrupt Vectors \n'
 '111        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '112        E000                                                \n'
 '113        E000                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        e002                  DW      RESET                   ; '
 'establishes the label RESET as\n'
 '115        e002                  ; the starting point          \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:['0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xFFFE',
 None,
 None,
 None,
 None]
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xFFFE
DEBUG:BABY ASSEMBLER:Storing previous val of 0xe002 into old val None
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0200',
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xE000',
 'Row0': '0xe002',
 'Row1': '0xe003',
 'Row2': '0xe004',
 'Row3': '0xe005',
 'Row4': '0xe006',
 'Row5': '0xe007',
 'Row6': '0xe008',
 'Row7': '0xe009'}
WARNING:BABY ASSEMBLER:Column contains NoneType
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0200                                                \n'
 '31         0200                  ;define a table (array) of 8 bytes\n'
 '32         0202                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         0202                  ; bytes in RAM space          \n'
 '34         0202                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         0202                  ;  literally "Current address minus\n'
 '36         0202                  ;  address of BufferTable"    \n'
 '37         0200                                                \n'
 '38         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '39         0200                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         0200                  ; this is Program memory start\n'
 '41         0200                  ; address for MSP430G2553 (16K)\n'
 '42         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '43         0202                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         0202                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         C000                                                \n'
 '46         c002                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         C000                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         c002                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         c002                  inc R14                ; point to next byte '
 'in table\n'
 '56         c004                  dec R15                ; done them all '
 'yet?\n'
 '57         c006                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         c006                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         c002                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         c002                  inc R13                    ;increment '
 'source addr\n'
 '69         c004                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         c006                  dec R15                ; done them all '
 'yet?\n'
 '71         c008                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c004                  jnz    Done                   \n'
 '76         C000                                                \n'
 '77         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         C000                  ;           End of main code  \n'
 '79         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         C000                                                \n'
 '81         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         C000                  ;           Subroutines       \n'
 '83         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         C000                                                \n'
 '85         C000                  ; none used here              \n'
 '86         C000                                                \n'
 '87         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         C000                  ;           End of all Subroutines\n'
 '89         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         C000                                                \n'
 '91         C000                                                \n'
 '92         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         C000                  ;           Definition of Program Data '
 'Memory\n'
 '94         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         C000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         e002                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e003                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e004                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e005                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e006                  Row3    DB  '-'               \n"
 "102        e007                  Row4    DB  '3'               \n"
 "103        e008                  Row5    DB  '3'               \n"
 "104        e009                  Row6    DB  '6'               \n"
 "105        e00a                  Row7    DB  '2'               \n"
 '106        E000                                                \n'
 '107        e001                  PatternTable2  DB "EXAMPLES"  \n'
 '108        E000                                                \n'
 '109        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '110        E000                  ;           Interrupt Vectors \n'
 '111        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '112        E000                                                \n'
 '113        E000                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        e002                  DW      RESET                   ; '
 'establishes the label RESET as\n'
 '115        e002                  ; the starting point          \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:['0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xFFFE',
 None,
 None,
 None,
 None]
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xFFFE
DEBUG:BABY ASSEMBLER:Storing previous val of 0xe002 into old val None
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0200',
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xE000',
 'Row0': '0xe002',
 'Row1': '0xe003',
 'Row2': '0xe004',
 'Row3': '0xe005',
 'Row4': '0xe006',
 'Row5': '0xe007',
 'Row6': '0xe008',
 'Row7': '0xe009'}
WARNING:BABY ASSEMBLER:Column contains NoneType
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0200                                                \n'
 '31         0200                  ;define a table (array) of 8 bytes\n'
 '32         0202                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         0202                  ; bytes in RAM space          \n'
 '34         0202                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         0202                  ;  literally "Current address minus\n'
 '36         0202                  ;  address of BufferTable"    \n'
 '37         0200                                                \n'
 '38         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '39         0200                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         0200                  ; this is Program memory start\n'
 '41         0200                  ; address for MSP430G2553 (16K)\n'
 '42         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '43         0202                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         0202                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         C000                                                \n'
 '46         c002                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         C000                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         c002                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         c002                  inc R14                ; point to next byte '
 'in table\n'
 '56         c004                  dec R15                ; done them all '
 'yet?\n'
 '57         c006                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         c006                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         c002                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         c002                  inc R13                    ;increment '
 'source addr\n'
 '69         c004                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         c006                  dec R15                ; done them all '
 'yet?\n'
 '71         c008                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c004                  jnz    Done                   \n'
 '76         C000                                                \n'
 '77         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         C000                  ;           End of main code  \n'
 '79         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         C000                                                \n'
 '81         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         C000                  ;           Subroutines       \n'
 '83         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         C000                                                \n'
 '85         C000                  ; none used here              \n'
 '86         C000                                                \n'
 '87         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         C000                  ;           End of all Subroutines\n'
 '89         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         C000                                                \n'
 '91         C000                                                \n'
 '92         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         C000                  ;           Definition of Program Data '
 'Memory\n'
 '94         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         C000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         e002                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e003                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e004                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e005                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e006                  Row3    DB  '-'               \n"
 "102        e007                  Row4    DB  '3'               \n"
 "103        e008                  Row5    DB  '3'               \n"
 "104        e009                  Row6    DB  '6'               \n"
 "105        e00a                  Row7    DB  '2'               \n"
 '106        E000                                                \n'
 '107        e001                  PatternTable2  DB "EXAMPLES"  \n'
 '108        E000                                                \n'
 '109        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '110        E000                  ;           Interrupt Vectors \n'
 '111        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '112        E000                                                \n'
 '113        E000                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        e002                  DW      RESET                   ; '
 'establishes the label RESET as\n'
 '115        e002                  ; the starting point          \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:['0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xFFFE',
 None,
 None,
 None,
 None]
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xFFFE
DEBUG:BABY ASSEMBLER:Storing previous val of 0xe002 into old val None
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0200',
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xE000',
 'Row0': '0xe002',
 'Row1': '0xe003',
 'Row2': '0xe004',
 'Row3': '0xe005',
 'Row4': '0xe006',
 'Row5': '0xe007',
 'Row6': '0xe008',
 'Row7': '0xe009'}
WARNING:BABY ASSEMBLER:Column contains NoneType
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0200                                                \n'
 '31         0200                  ;define a table (array) of 8 bytes\n'
 '32         0202                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         0202                  ; bytes in RAM space          \n'
 '34         0202                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         0202                  ;  literally "Current address minus\n'
 '36         0202                  ;  address of BufferTable"    \n'
 '37         0200                                                \n'
 '38         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '39         0200                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         0200                  ; this is Program memory start\n'
 '41         0200                  ; address for MSP430G2553 (16K)\n'
 '42         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '43         0202                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         0202                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         C000                                                \n'
 '46         c002                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         C000                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         c002                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         c002                  inc R14                ; point to next byte '
 'in table\n'
 '56         c004                  dec R15                ; done them all '
 'yet?\n'
 '57         c006                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         c006                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         c002                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         c002                  inc R13                    ;increment '
 'source addr\n'
 '69         c004                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         c006                  dec R15                ; done them all '
 'yet?\n'
 '71         c008                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c004                  jnz    Done                   \n'
 '76         C000                                                \n'
 '77         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         C000                  ;           End of main code  \n'
 '79         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         C000                                                \n'
 '81         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         C000                  ;           Subroutines       \n'
 '83         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         C000                                                \n'
 '85         C000                  ; none used here              \n'
 '86         C000                                                \n'
 '87         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         C000                  ;           End of all Subroutines\n'
 '89         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         C000                                                \n'
 '91         C000                                                \n'
 '92         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         C000                  ;           Definition of Program Data '
 'Memory\n'
 '94         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         C000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         e002                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e003                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e004                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e005                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e006                  Row3    DB  '-'               \n"
 "102        e007                  Row4    DB  '3'               \n"
 "103        e008                  Row5    DB  '3'               \n"
 "104        e009                  Row6    DB  '6'               \n"
 "105        e00a                  Row7    DB  '2'               \n"
 '106        E000                                                \n'
 '107        e001                  PatternTable2  DB "EXAMPLES"  \n'
 '108        E000                                                \n'
 '109        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '110        E000                  ;           Interrupt Vectors \n'
 '111        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '112        E000                                                \n'
 '113        E000                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        e002                  DW      RESET                   ; '
 'establishes the label RESET as\n'
 '115        e002                  ; the starting point          \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:['0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xFFFE',
 None,
 None,
 None,
 None]
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xFFFE
DEBUG:BABY ASSEMBLER:Storing previous val of 0xe002 into old val None
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0200',
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xE000',
 'Row0': '0xe002',
 'Row1': '0xe003',
 'Row2': '0xe004',
 'Row3': '0xe005',
 'Row4': '0xe006',
 'Row5': '0xe007',
 'Row6': '0xe008',
 'Row7': '0xe009'}
WARNING:BABY ASSEMBLER:Column contains NoneType
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0200                                                \n'
 '31         0200                  ;define a table (array) of 8 bytes\n'
 '32         0202                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         0202                  ; bytes in RAM space          \n'
 '34         0202                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         0202                  ;  literally "Current address minus\n'
 '36         0202                  ;  address of BufferTable"    \n'
 '37         0200                                                \n'
 '38         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '39         0200                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         0200                  ; this is Program memory start\n'
 '41         0200                  ; address for MSP430G2553 (16K)\n'
 '42         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '43         0202                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         0202                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         C000                                                \n'
 '46         c002                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         C000                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         c002                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         c002                  inc R14                ; point to next byte '
 'in table\n'
 '56         c004                  dec R15                ; done them all '
 'yet?\n'
 '57         c006                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         c006                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         c002                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         c002                  inc R13                    ;increment '
 'source addr\n'
 '69         c004                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         c006                  dec R15                ; done them all '
 'yet?\n'
 '71         c008                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c004                  jnz    Done                   \n'
 '76         C000                                                \n'
 '77         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         C000                  ;           End of main code  \n'
 '79         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         C000                                                \n'
 '81         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         C000                  ;           Subroutines       \n'
 '83         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         C000                                                \n'
 '85         C000                  ; none used here              \n'
 '86         C000                                                \n'
 '87         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         C000                  ;           End of all Subroutines\n'
 '89         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         C000                                                \n'
 '91         C000                                                \n'
 '92         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         C000                  ;           Definition of Program Data '
 'Memory\n'
 '94         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         C000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         e002                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e003                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e004                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e005                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e006                  Row3    DB  '-'               \n"
 "102        e007                  Row4    DB  '3'               \n"
 "103        e008                  Row5    DB  '3'               \n"
 "104        e009                  Row6    DB  '6'               \n"
 "105        e00a                  Row7    DB  '2'               \n"
 '106        E000                                                \n'
 '107        e001                  PatternTable2  DB "EXAMPLES"  \n'
 '108        E000                                                \n'
 '109        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '110        E000                  ;           Interrupt Vectors \n'
 '111        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '112        E000                                                \n'
 '113        E000                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        e002                  DW      RESET                   ; '
 'establishes the label RESET as\n'
 '115        e002                  ; the starting point          \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:['0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xFFFE',
 None,
 None,
 None,
 None]
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xFFFE
DEBUG:BABY ASSEMBLER:Storing previous val of 0xe002 into old val None
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0200',
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xE000',
 'Row0': '0xe002',
 'Row1': '0xe003',
 'Row2': '0xe004',
 'Row3': '0xe005',
 'Row4': '0xe006',
 'Row5': '0xe007',
 'Row6': '0xe008',
 'Row7': '0xe009'}
WARNING:BABY ASSEMBLER:Column contains NoneType
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0200                                                \n'
 '31         0200                  ;define a table (array) of 8 bytes\n'
 '32         0202                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         0202                  ; bytes in RAM space          \n'
 '34         0202                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         0202                  ;  literally "Current address minus\n'
 '36         0202                  ;  address of BufferTable"    \n'
 '37         0200                                                \n'
 '38         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '39         0200                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         0200                  ; this is Program memory start\n'
 '41         0200                  ; address for MSP430G2553 (16K)\n'
 '42         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '43         0202                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         0202                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         C000                                                \n'
 '46         c002                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         C000                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         c002                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         c002                  inc R14                ; point to next byte '
 'in table\n'
 '56         c004                  dec R15                ; done them all '
 'yet?\n'
 '57         c006                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         c006                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         c002                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         c002                  inc R13                    ;increment '
 'source addr\n'
 '69         c004                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         c006                  dec R15                ; done them all '
 'yet?\n'
 '71         c008                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c004                  jnz    Done                   \n'
 '76         C000                                                \n'
 '77         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         C000                  ;           End of main code  \n'
 '79         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         C000                                                \n'
 '81         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         C000                  ;           Subroutines       \n'
 '83         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         C000                                                \n'
 '85         C000                  ; none used here              \n'
 '86         C000                                                \n'
 '87         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         C000                  ;           End of all Subroutines\n'
 '89         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         C000                                                \n'
 '91         C000                                                \n'
 '92         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         C000                  ;           Definition of Program Data '
 'Memory\n'
 '94         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         C000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         e002                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e003                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e004                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e005                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e006                  Row3    DB  '-'               \n"
 "102        e007                  Row4    DB  '3'               \n"
 "103        e008                  Row5    DB  '3'               \n"
 "104        e009                  Row6    DB  '6'               \n"
 "105        e00a                  Row7    DB  '2'               \n"
 '106        E000                                                \n'
 '107        e001                  PatternTable2  DB "EXAMPLES"  \n'
 '108        E000                                                \n'
 '109        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '110        E000                  ;           Interrupt Vectors \n'
 '111        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '112        E000                                                \n'
 '113        E000                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        e002                  DW      RESET                   ; '
 'establishes the label RESET as\n'
 '115        e002                  ; the starting point          \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:['0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xFFFE',
 None,
 None,
 None,
 None]
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xFFFE
DEBUG:BABY ASSEMBLER:Storing previous val of 0xe002 into old val None
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0200',
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xE000',
 'Row0': '0xe002',
 'Row1': '0xe003',
 'Row2': '0xe004',
 'Row3': '0xe005',
 'Row4': '0xe006',
 'Row5': '0xe007',
 'Row6': '0xe008',
 'Row7': '0xe009'}
WARNING:BABY ASSEMBLER:Column contains NoneType
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0200                                                \n'
 '31         0200                  ;define a table (array) of 8 bytes\n'
 '32         0202                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         0202                  ; bytes in RAM space          \n'
 '34         0202                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         0202                  ;  literally "Current address minus\n'
 '36         0202                  ;  address of BufferTable"    \n'
 '37         0200                                                \n'
 '38         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '39         0200                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         0200                  ; this is Program memory start\n'
 '41         0200                  ; address for MSP430G2553 (16K)\n'
 '42         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '43         0202                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         0202                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         C000                                                \n'
 '46         c002                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         C000                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         c002                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         c002                  inc R14                ; point to next byte '
 'in table\n'
 '56         c004                  dec R15                ; done them all '
 'yet?\n'
 '57         c006                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         c006                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         c002                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         c002                  inc R13                    ;increment '
 'source addr\n'
 '69         c004                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         c006                  dec R15                ; done them all '
 'yet?\n'
 '71         c008                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c004                  jnz    Done                   \n'
 '76         C000                                                \n'
 '77         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         C000                  ;           End of main code  \n'
 '79         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         C000                                                \n'
 '81         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         C000                  ;           Subroutines       \n'
 '83         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         C000                                                \n'
 '85         C000                  ; none used here              \n'
 '86         C000                                                \n'
 '87         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         C000                  ;           End of all Subroutines\n'
 '89         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         C000                                                \n'
 '91         C000                                                \n'
 '92         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         C000                  ;           Definition of Program Data '
 'Memory\n'
 '94         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         C000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         e002                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e003                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e004                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e005                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e006                  Row3    DB  '-'               \n"
 "102        e007                  Row4    DB  '3'               \n"
 "103        e008                  Row5    DB  '3'               \n"
 "104        e009                  Row6    DB  '6'               \n"
 "105        e00a                  Row7    DB  '2'               \n"
 '106        E000                                                \n'
 '107        e001                  PatternTable2  DB "EXAMPLES"  \n'
 '108        E000                                                \n'
 '109        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '110        E000                  ;           Interrupt Vectors \n'
 '111        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '112        E000                                                \n'
 '113        E000                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        e002                  DW      RESET                   ; '
 'establishes the label RESET as\n'
 '115        e002                  ; the starting point          \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:['0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xFFFE',
 None,
 None,
 None,
 None]
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xFFFE
DEBUG:BABY ASSEMBLER:Storing previous val of 0xe002 into old val None
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0200',
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xE000',
 'Row0': '0xe002',
 'Row1': '0xe003',
 'Row2': '0xe004',
 'Row3': '0xe005',
 'Row4': '0xe006',
 'Row5': '0xe007',
 'Row6': '0xe008',
 'Row7': '0xe009'}
WARNING:BABY ASSEMBLER:Column contains NoneType
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0200                                                \n'
 '31         0200                  ;define a table (array) of 8 bytes\n'
 '32         0202                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         0202                  ; bytes in RAM space          \n'
 '34         0202                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         0202                  ;  literally "Current address minus\n'
 '36         0202                  ;  address of BufferTable"    \n'
 '37         0200                                                \n'
 '38         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '39         0200                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         0200                  ; this is Program memory start\n'
 '41         0200                  ; address for MSP430G2553 (16K)\n'
 '42         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '43         0202                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         0202                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         C000                                                \n'
 '46         c002                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         C000                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         c002                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         c002                  inc R14                ; point to next byte '
 'in table\n'
 '56         c004                  dec R15                ; done them all '
 'yet?\n'
 '57         c006                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         c006                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         c002                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         c002                  inc R13                    ;increment '
 'source addr\n'
 '69         c004                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         c006                  dec R15                ; done them all '
 'yet?\n'
 '71         c008                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c004                  jnz    Done                   \n'
 '76         C000                                                \n'
 '77         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         C000                  ;           End of main code  \n'
 '79         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         C000                                                \n'
 '81         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         C000                  ;           Subroutines       \n'
 '83         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         C000                                                \n'
 '85         C000                  ; none used here              \n'
 '86         C000                                                \n'
 '87         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         C000                  ;           End of all Subroutines\n'
 '89         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         C000                                                \n'
 '91         C000                                                \n'
 '92         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         C000                  ;           Definition of Program Data '
 'Memory\n'
 '94         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         C000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         e002                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e003                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e004                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e005                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e006                  Row3    DB  '-'               \n"
 "102        e007                  Row4    DB  '3'               \n"
 "103        e008                  Row5    DB  '3'               \n"
 "104        e009                  Row6    DB  '6'               \n"
 "105        e00a                  Row7    DB  '2'               \n"
 '106        E000                                                \n'
 '107        e001                  PatternTable2  DB "EXAMPLES"  \n'
 '108        E000                                                \n'
 '109        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '110        E000                  ;           Interrupt Vectors \n'
 '111        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '112        E000                                                \n'
 '113        E000                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        e002                  DW      RESET                   ; '
 'establishes the label RESET as\n'
 '115        e002                  ; the starting point          \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:['0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xFFFE',
 None,
 None,
 None,
 None]
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xFFFE
DEBUG:BABY ASSEMBLER:Storing previous val of 0xe002 into old val None
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0200',
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xE000',
 'Row0': '0xe002',
 'Row1': '0xe003',
 'Row2': '0xe004',
 'Row3': '0xe005',
 'Row4': '0xe006',
 'Row5': '0xe007',
 'Row6': '0xe008',
 'Row7': '0xe009'}
WARNING:BABY ASSEMBLER:Column contains NoneType
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0200                                                \n'
 '31         0200                  ;define a table (array) of 8 bytes\n'
 '32         0202                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         0202                  ; bytes in RAM space          \n'
 '34         0202                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         0202                  ;  literally "Current address minus\n'
 '36         0202                  ;  address of BufferTable"    \n'
 '37         0200                                                \n'
 '38         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '39         0200                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         0200                  ; this is Program memory start\n'
 '41         0200                  ; address for MSP430G2553 (16K)\n'
 '42         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '43         0202                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         0202                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         C000                                                \n'
 '46         c002                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         C000                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         c002                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         c002                  inc R14                ; point to next byte '
 'in table\n'
 '56         c004                  dec R15                ; done them all '
 'yet?\n'
 '57         c006                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         c006                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         c002                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         c002                  inc R13                    ;increment '
 'source addr\n'
 '69         c004                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         c006                  dec R15                ; done them all '
 'yet?\n'
 '71         c008                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c004                  jnz    Done                   \n'
 '76         C000                                                \n'
 '77         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         C000                  ;           End of main code  \n'
 '79         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         C000                                                \n'
 '81         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         C000                  ;           Subroutines       \n'
 '83         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         C000                                                \n'
 '85         C000                  ; none used here              \n'
 '86         C000                                                \n'
 '87         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         C000                  ;           End of all Subroutines\n'
 '89         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         C000                                                \n'
 '91         C000                                                \n'
 '92         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         C000                  ;           Definition of Program Data '
 'Memory\n'
 '94         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         C000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         e002                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e003                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e004                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e005                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e006                  Row3    DB  '-'               \n"
 "102        e007                  Row4    DB  '3'               \n"
 "103        e008                  Row5    DB  '3'               \n"
 "104        e009                  Row6    DB  '6'               \n"
 "105        e00a                  Row7    DB  '2'               \n"
 '106        E000                                                \n'
 '107        e001                  PatternTable2  DB "EXAMPLES"  \n'
 '108        E000                                                \n'
 '109        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '110        E000                  ;           Interrupt Vectors \n'
 '111        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '112        E000                                                \n'
 '113        E000                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        e002                  DW      RESET                   ; '
 'establishes the label RESET as\n'
 '115        e002                  ; the starting point          \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:['0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xFFFE',
 None,
 None,
 None,
 None]
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xFFFE
DEBUG:BABY ASSEMBLER:Storing previous val of 0xe002 into old val None
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0200',
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xE000',
 'Row0': '0xe002',
 'Row1': '0xe003',
 'Row2': '0xe004',
 'Row3': '0xe005',
 'Row4': '0xe006',
 'Row5': '0xe007',
 'Row6': '0xe008',
 'Row7': '0xe009'}
WARNING:BABY ASSEMBLER:Column contains NoneType
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0200                                                \n'
 '31         0200                  ;define a table (array) of 8 bytes\n'
 '32         0202                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         0202                  ; bytes in RAM space          \n'
 '34         0202                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         0202                  ;  literally "Current address minus\n'
 '36         0202                  ;  address of BufferTable"    \n'
 '37         0200                                                \n'
 '38         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '39         0200                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         0200                  ; this is Program memory start\n'
 '41         0200                  ; address for MSP430G2553 (16K)\n'
 '42         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '43         0202                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         0202                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         C000                                                \n'
 '46         c002                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         C000                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         c002                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         c002                  inc R14                ; point to next byte '
 'in table\n'
 '56         c004                  dec R15                ; done them all '
 'yet?\n'
 '57         c006                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         c006                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         c002                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         c002                  inc R13                    ;increment '
 'source addr\n'
 '69         c004                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         c006                  dec R15                ; done them all '
 'yet?\n'
 '71         c008                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c004                  jnz    Done                   \n'
 '76         C000                                                \n'
 '77         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         C000                  ;           End of main code  \n'
 '79         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         C000                                                \n'
 '81         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         C000                  ;           Subroutines       \n'
 '83         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         C000                                                \n'
 '85         C000                  ; none used here              \n'
 '86         C000                                                \n'
 '87         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         C000                  ;           End of all Subroutines\n'
 '89         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         C000                                                \n'
 '91         C000                                                \n'
 '92         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         C000                  ;           Definition of Program Data '
 'Memory\n'
 '94         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         C000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         e002                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e003                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e004                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e005                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e006                  Row3    DB  '-'               \n"
 "102        e007                  Row4    DB  '3'               \n"
 "103        e008                  Row5    DB  '3'               \n"
 "104        e009                  Row6    DB  '6'               \n"
 "105        e00a                  Row7    DB  '2'               \n"
 '106        E000                                                \n'
 '107        e001                  PatternTable2  DB "EXAMPLES"  \n'
 '108        E000                                                \n'
 '109        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '110        E000                  ;           Interrupt Vectors \n'
 '111        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '112        E000                                                \n'
 '113        E000                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        e002                  DW      RESET                   ; '
 'establishes the label RESET as\n'
 '115        e002                  ; the starting point          \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:['0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xFFFE',
 None,
 None,
 None,
 None]
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xFFFE
DEBUG:BABY ASSEMBLER:Storing previous val of 0xe002 into old val None
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0200',
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xE000',
 'Row0': '0xe002',
 'Row1': '0xe003',
 'Row2': '0xe004',
 'Row3': '0xe005',
 'Row4': '0xe006',
 'Row5': '0xe007',
 'Row6': '0xe008',
 'Row7': '0xe009'}
WARNING:BABY ASSEMBLER:Column contains NoneType
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0200                                                \n'
 '31         0200                  ;define a table (array) of 8 bytes\n'
 '32         0202                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         0202                  ; bytes in RAM space          \n'
 '34         0202                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         0202                  ;  literally "Current address minus\n'
 '36         0202                  ;  address of BufferTable"    \n'
 '37         0200                                                \n'
 '38         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '39         0200                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         0200                  ; this is Program memory start\n'
 '41         0200                  ; address for MSP430G2553 (16K)\n'
 '42         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '43         0202                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         0202                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         C000                                                \n'
 '46         c002                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         C000                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         c002                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         c002                  inc R14                ; point to next byte '
 'in table\n'
 '56         c004                  dec R15                ; done them all '
 'yet?\n'
 '57         c006                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         c006                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         c002                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         c002                  inc R13                    ;increment '
 'source addr\n'
 '69         c004                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         c006                  dec R15                ; done them all '
 'yet?\n'
 '71         c008                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c004                  jnz    Done                   \n'
 '76         C000                                                \n'
 '77         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         C000                  ;           End of main code  \n'
 '79         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         C000                                                \n'
 '81         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         C000                  ;           Subroutines       \n'
 '83         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         C000                                                \n'
 '85         C000                  ; none used here              \n'
 '86         C000                                                \n'
 '87         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         C000                  ;           End of all Subroutines\n'
 '89         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         C000                                                \n'
 '91         C000                                                \n'
 '92         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         C000                  ;           Definition of Program Data '
 'Memory\n'
 '94         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         C000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         e002                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e003                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e004                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e005                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e006                  Row3    DB  '-'               \n"
 "102        e007                  Row4    DB  '3'               \n"
 "103        e008                  Row5    DB  '3'               \n"
 "104        e009                  Row6    DB  '6'               \n"
 "105        e00a                  Row7    DB  '2'               \n"
 '106        E000                                                \n'
 '107        e001                  PatternTable2  DB "EXAMPLES"  \n'
 '108        E000                                                \n'
 '109        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '110        E000                  ;           Interrupt Vectors \n'
 '111        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '112        E000                                                \n'
 '113        E000                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        e002                  DW      RESET                   ; '
 'establishes the label RESET as\n'
 '115        e002                  ; the starting point          \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:['0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xFFFE',
 None,
 None,
 None,
 None]
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xFFFE
DEBUG:BABY ASSEMBLER:Storing previous val of 0xe002 into old val None
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0200',
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xE000',
 'Row0': '0xe002',
 'Row1': '0xe003',
 'Row2': '0xe004',
 'Row3': '0xe005',
 'Row4': '0xe006',
 'Row5': '0xe007',
 'Row6': '0xe008',
 'Row7': '0xe009'}
WARNING:BABY ASSEMBLER:Column contains NoneType
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0200                                                \n'
 '31         0200                  ;define a table (array) of 8 bytes\n'
 '32         0202                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         0202                  ; bytes in RAM space          \n'
 '34         0202                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         0202                  ;  literally "Current address minus\n'
 '36         0202                  ;  address of BufferTable"    \n'
 '37         0200                                                \n'
 '38         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '39         0200                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         0200                  ; this is Program memory start\n'
 '41         0200                  ; address for MSP430G2553 (16K)\n'
 '42         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '43         0202                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         0202                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         C000                                                \n'
 '46         c002                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         C000                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         c002                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         c002                  inc R14                ; point to next byte '
 'in table\n'
 '56         c004                  dec R15                ; done them all '
 'yet?\n'
 '57         c006                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         c006                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         c002                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         c002                  inc R13                    ;increment '
 'source addr\n'
 '69         c004                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         c006                  dec R15                ; done them all '
 'yet?\n'
 '71         c008                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c004                  jnz    Done                   \n'
 '76         C000                                                \n'
 '77         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         C000                  ;           End of main code  \n'
 '79         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         C000                                                \n'
 '81         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         C000                  ;           Subroutines       \n'
 '83         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         C000                                                \n'
 '85         C000                  ; none used here              \n'
 '86         C000                                                \n'
 '87         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         C000                  ;           End of all Subroutines\n'
 '89         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         C000                                                \n'
 '91         C000                                                \n'
 '92         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         C000                  ;           Definition of Program Data '
 'Memory\n'
 '94         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         C000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         e002                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e003                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e004                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e005                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e006                  Row3    DB  '-'               \n"
 "102        e007                  Row4    DB  '3'               \n"
 "103        e008                  Row5    DB  '3'               \n"
 "104        e009                  Row6    DB  '6'               \n"
 "105        e00a                  Row7    DB  '2'               \n"
 '106        E000                                                \n'
 '107        e001                  PatternTable2  DB "EXAMPLES"  \n'
 '108        E000                                                \n'
 '109        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '110        E000                  ;           Interrupt Vectors \n'
 '111        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '112        E000                                                \n'
 '113        E000                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        e002                  DW      RESET                   ; '
 'establishes the label RESET as\n'
 '115        e002                  ; the starting point          \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:['0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xFFFE',
 None,
 None,
 None,
 None]
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xFFFE
DEBUG:BABY ASSEMBLER:Storing previous val of 0xe002 into old val None
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0200',
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xE000',
 'Row0': '0xe002',
 'Row1': '0xe003',
 'Row2': '0xe004',
 'Row3': '0xe005',
 'Row4': '0xe006',
 'Row5': '0xe007',
 'Row6': '0xe008',
 'Row7': '0xe009'}
WARNING:BABY ASSEMBLER:Column contains NoneType
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0200                                                \n'
 '31         0200                  ;define a table (array) of 8 bytes\n'
 '32         0202                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         0202                  ; bytes in RAM space          \n'
 '34         0202                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         0202                  ;  literally "Current address minus\n'
 '36         0202                  ;  address of BufferTable"    \n'
 '37         0200                                                \n'
 '38         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '39         0200                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         0200                  ; this is Program memory start\n'
 '41         0200                  ; address for MSP430G2553 (16K)\n'
 '42         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '43         0202                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         0202                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         C000                                                \n'
 '46         c002                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         C000                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         c002                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         c002                  inc R14                ; point to next byte '
 'in table\n'
 '56         c004                  dec R15                ; done them all '
 'yet?\n'
 '57         c006                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         c006                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         c002                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         c002                  inc R13                    ;increment '
 'source addr\n'
 '69         c004                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         c006                  dec R15                ; done them all '
 'yet?\n'
 '71         c008                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c004                  jnz    Done                   \n'
 '76         C000                                                \n'
 '77         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         C000                  ;           End of main code  \n'
 '79         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         C000                                                \n'
 '81         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         C000                  ;           Subroutines       \n'
 '83         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         C000                                                \n'
 '85         C000                  ; none used here              \n'
 '86         C000                                                \n'
 '87         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         C000                  ;           End of all Subroutines\n'
 '89         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         C000                                                \n'
 '91         C000                                                \n'
 '92         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         C000                  ;           Definition of Program Data '
 'Memory\n'
 '94         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         C000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         e002                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e003                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e004                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e005                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e006                  Row3    DB  '-'               \n"
 "102        e007                  Row4    DB  '3'               \n"
 "103        e008                  Row5    DB  '3'               \n"
 "104        e009                  Row6    DB  '6'               \n"
 "105        e00a                  Row7    DB  '2'               \n"
 '106        E000                                                \n'
 '107        e001                  PatternTable2  DB "EXAMPLES"  \n'
 '108        E000                                                \n'
 '109        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '110        E000                  ;           Interrupt Vectors \n'
 '111        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '112        E000                                                \n'
 '113        E000                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        e002                  DW      RESET                   ; '
 'establishes the label RESET as\n'
 '115        e002                  ; the starting point          \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:['0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xFFFE',
 None,
 None,
 None,
 None]
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xc002 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x10000 into old val None
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0200',
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xE000',
 'Row0': '0xe002',
 'Row1': '0xe003',
 'Row2': '0xe004',
 'Row3': '0xe005',
 'Row4': '0xe006',
 'Row5': '0xe007',
 'Row6': '0xe008',
 'Row7': '0xe009'}
WARNING:BABY ASSEMBLER:Column contains NoneType
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0200                                                \n'
 '31         0200                  ;define a table (array) of 8 bytes\n'
 '32         0202                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         0202                  ; bytes in RAM space          \n'
 '34         0202                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         0202                  ;  literally "Current address minus\n'
 '36         0202                  ;  address of BufferTable"    \n'
 '37         0200                                                \n'
 '38         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         C000                                                \n'
 '46         c002                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         C000                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         c002                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         c002                  inc R14                ; point to next byte '
 'in table\n'
 '56         c004                  dec R15                ; done them all '
 'yet?\n'
 '57         c006                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         c006                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         c002                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         c002                  inc R13                    ;increment '
 'source addr\n'
 '69         c004                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         c006                  dec R15                ; done them all '
 'yet?\n'
 '71         c008                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c004                  jnz    Done                   \n'
 '76         C000                                                \n'
 '77         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         C000                  ;           End of main code  \n'
 '79         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         C000                                                \n'
 '81         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         C000                  ;           Subroutines       \n'
 '83         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         C000                                                \n'
 '85         C000                  ; none used here              \n'
 '86         C000                                                \n'
 '87         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         C000                  ;           End of all Subroutines\n'
 '89         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         C000                                                \n'
 '91         C000                                                \n'
 '92         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         C000                  ;           Definition of Program Data '
 'Memory\n'
 '94         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         e002                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e003                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e004                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e005                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e006                  Row3    DB  '-'               \n"
 "102        e007                  Row4    DB  '3'               \n"
 "103        e008                  Row5    DB  '3'               \n"
 "104        e009                  Row6    DB  '6'               \n"
 "105        e00a                  Row7    DB  '2'               \n"
 '106        E000                                                \n'
 '107        e001                  PatternTable2  DB "EXAMPLES"  \n'
 '108        E000                                                \n'
 '109        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '110        E000                  ;           Interrupt Vectors \n'
 '111        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '112        E000                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        10000                 DW      RESET                   ; '
 'establishes the label RESET as\n'
 '115        10000                 ; the starting point          \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:['0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xFFFE',
 None,
 None,
 None,
 None]
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xc002 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x10000 into old val None
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0200',
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xE000',
 'Row0': '0xe002',
 'Row1': '0xe003',
 'Row2': '0xe004',
 'Row3': '0xe005',
 'Row4': '0xe006',
 'Row5': '0xe007',
 'Row6': '0xe008',
 'Row7': '0xe009'}
WARNING:BABY ASSEMBLER:Column contains NoneType
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0200                                                \n'
 '31         0200                  ;define a table (array) of 8 bytes\n'
 '32         0202                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         0202                  ; bytes in RAM space          \n'
 '34         0202                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         0202                  ;  literally "Current address minus\n'
 '36         0202                  ;  address of BufferTable"    \n'
 '37         0200                                                \n'
 '38         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         C000                                                \n'
 '46         c002                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         C000                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         c002                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         c002                  inc R14                ; point to next byte '
 'in table\n'
 '56         c004                  dec R15                ; done them all '
 'yet?\n'
 '57         c006                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         c006                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         c002                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         c002                  inc R13                    ;increment '
 'source addr\n'
 '69         c004                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         c006                  dec R15                ; done them all '
 'yet?\n'
 '71         c008                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c004                  jnz    Done                   \n'
 '76         C000                                                \n'
 '77         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         C000                  ;           End of main code  \n'
 '79         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         C000                                                \n'
 '81         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         C000                  ;           Subroutines       \n'
 '83         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         C000                                                \n'
 '85         C000                  ; none used here              \n'
 '86         C000                                                \n'
 '87         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         C000                  ;           End of all Subroutines\n'
 '89         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         C000                                                \n'
 '91         C000                                                \n'
 '92         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         C000                  ;           Definition of Program Data '
 'Memory\n'
 '94         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         e002                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e003                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e004                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e005                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e006                  Row3    DB  '-'               \n"
 "102        e007                  Row4    DB  '3'               \n"
 "103        e008                  Row5    DB  '3'               \n"
 "104        e009                  Row6    DB  '6'               \n"
 "105        e00a                  Row7    DB  '2'               \n"
 '106        E000                                                \n'
 '107        e001                  PatternTable2  DB "EXAMPLES"  \n'
 '108        E000                                                \n'
 '109        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '110        E000                  ;           Interrupt Vectors \n'
 '111        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '112        E000                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        10000                 DW      RESET                   ; '
 'establishes the label RESET as\n'
 '115        10000                 ; the starting point          \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:['0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xFFFE',
 None,
 None,
 None,
 None]
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xc002 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x10000 into old val None
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0200',
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xE000',
 'Row0': '0xe002',
 'Row1': '0xe003',
 'Row2': '0xe004',
 'Row3': '0xe005',
 'Row4': '0xe006',
 'Row5': '0xe007',
 'Row6': '0xe008',
 'Row7': '0xe009'}
WARNING:BABY ASSEMBLER:Column contains NoneType
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0200                                                \n'
 '31         0200                  ;define a table (array) of 8 bytes\n'
 '32         0202                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         0202                  ; bytes in RAM space          \n'
 '34         0202                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         0202                  ;  literally "Current address minus\n'
 '36         0202                  ;  address of BufferTable"    \n'
 '37         0200                                                \n'
 '38         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         C000                                                \n'
 '46         c002                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         C000                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         c002                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         c002                  inc R14                ; point to next byte '
 'in table\n'
 '56         c004                  dec R15                ; done them all '
 'yet?\n'
 '57         c006                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         c006                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         c002                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         c002                  inc R13                    ;increment '
 'source addr\n'
 '69         c004                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         c006                  dec R15                ; done them all '
 'yet?\n'
 '71         c008                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c004                  jnz    Done                   \n'
 '76         C000                                                \n'
 '77         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         C000                  ;           End of main code  \n'
 '79         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         C000                                                \n'
 '81         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         C000                  ;           Subroutines       \n'
 '83         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         C000                                                \n'
 '85         C000                  ; none used here              \n'
 '86         C000                                                \n'
 '87         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         C000                  ;           End of all Subroutines\n'
 '89         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         C000                                                \n'
 '91         C000                                                \n'
 '92         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         C000                  ;           Definition of Program Data '
 'Memory\n'
 '94         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         e002                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e003                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e004                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e005                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e006                  Row3    DB  '-'               \n"
 "102        e007                  Row4    DB  '3'               \n"
 "103        e008                  Row5    DB  '3'               \n"
 "104        e009                  Row6    DB  '6'               \n"
 "105        e00a                  Row7    DB  '2'               \n"
 '106        E000                                                \n'
 '107        e001                  PatternTable2  DB "EXAMPLES"  \n'
 '108        E000                                                \n'
 '109        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '110        E000                  ;           Interrupt Vectors \n'
 '111        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '112        E000                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        10000                 DW      RESET                   ; '
 'establishes the label RESET as\n'
 '115        10000                 ; the starting point          \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:['0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xFFFE',
 None,
 None,
 None,
 None]
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xc002 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x10000 into old val None
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0200',
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xE000',
 'Row0': '0xe002',
 'Row1': '0xe003',
 'Row2': '0xe004',
 'Row3': '0xe005',
 'Row4': '0xe006',
 'Row5': '0xe007',
 'Row6': '0xe008',
 'Row7': '0xe009'}
WARNING:BABY ASSEMBLER:Column contains NoneType
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0200                                                \n'
 '31         0200                  ;define a table (array) of 8 bytes\n'
 '32         0202                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         0202                  ; bytes in RAM space          \n'
 '34         0202                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         0202                  ;  literally "Current address minus\n'
 '36         0202                  ;  address of BufferTable"    \n'
 '37         0200                                                \n'
 '38         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         C000                                                \n'
 '46         c002                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         C000                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         c002                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         c002                  inc R14                ; point to next byte '
 'in table\n'
 '56         c004                  dec R15                ; done them all '
 'yet?\n'
 '57         c006                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         c006                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         c002                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         c002                  inc R13                    ;increment '
 'source addr\n'
 '69         c004                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         c006                  dec R15                ; done them all '
 'yet?\n'
 '71         c008                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c004                  jnz    Done                   \n'
 '76         C000                                                \n'
 '77         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         C000                  ;           End of main code  \n'
 '79         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         C000                                                \n'
 '81         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         C000                  ;           Subroutines       \n'
 '83         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         C000                                                \n'
 '85         C000                  ; none used here              \n'
 '86         C000                                                \n'
 '87         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         C000                  ;           End of all Subroutines\n'
 '89         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         C000                                                \n'
 '91         C000                                                \n'
 '92         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         C000                  ;           Definition of Program Data '
 'Memory\n'
 '94         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         e002                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e003                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e004                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e005                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e006                  Row3    DB  '-'               \n"
 "102        e007                  Row4    DB  '3'               \n"
 "103        e008                  Row5    DB  '3'               \n"
 "104        e009                  Row6    DB  '6'               \n"
 "105        e00a                  Row7    DB  '2'               \n"
 '106        E000                                                \n'
 '107        e001                  PatternTable2  DB "EXAMPLES"  \n'
 '108        E000                                                \n'
 '109        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '110        E000                  ;           Interrupt Vectors \n'
 '111        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '112        E000                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        10000                 DW      RESET                   ; '
 'establishes the label RESET as\n'
 '115        10000                 ; the starting point          \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:['0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xFFFE',
 None,
 None,
 None,
 None]
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xc002 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Storing previous val of 0x10000 into old val None
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0200',
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xE000',
 'Row0': '0xe002',
 'Row1': '0xe003',
 'Row2': '0xe004',
 'Row3': '0xe005',
 'Row4': '0xe006',
 'Row5': '0xe007',
 'Row6': '0xe008',
 'Row7': '0xe009'}
WARNING:BABY ASSEMBLER:Column contains NoneType
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0200                                                \n'
 '31         0200                  ;define a table (array) of 8 bytes\n'
 '32         0202                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         0202                  ; bytes in RAM space          \n'
 '34         0202                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         0202                  ;  literally "Current address minus\n'
 '36         0202                  ;  address of BufferTable"    \n'
 '37         0200                                                \n'
 '38         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         C000                                                \n'
 '46         c002                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         C000                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         c002                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         c002                  inc R14                ; point to next byte '
 'in table\n'
 '56         c004                  dec R15                ; done them all '
 'yet?\n'
 '57         c006                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         c006                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         c002                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         c002                  inc R13                    ;increment '
 'source addr\n'
 '69         c004                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         c006                  dec R15                ; done them all '
 'yet?\n'
 '71         c008                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c004                  jnz    Done                   \n'
 '76         C000                                                \n'
 '77         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         C000                  ;           End of main code  \n'
 '79         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         C000                                                \n'
 '81         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         C000                  ;           Subroutines       \n'
 '83         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         C000                                                \n'
 '85         C000                  ; none used here              \n'
 '86         C000                                                \n'
 '87         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         C000                  ;           End of all Subroutines\n'
 '89         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         C000                                                \n'
 '91         C000                                                \n'
 '92         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         C000                  ;           Definition of Program Data '
 'Memory\n'
 '94         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         e002                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e003                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e004                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e005                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e006                  Row3    DB  '-'               \n"
 "102        e007                  Row4    DB  '3'               \n"
 "103        e008                  Row5    DB  '3'               \n"
 "104        e009                  Row6    DB  '6'               \n"
 "105        e00a                  Row7    DB  '2'               \n"
 '106        E000                                                \n'
 '107        e001                  PatternTable2  DB "EXAMPLES"  \n'
 '108        E000                                                \n'
 '109        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '110        E000                  ;           Interrupt Vectors \n'
 '111        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '112        E000                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        10000                 DW      RESET                   ; '
 'establishes the label RESET as\n'
 '115        10000                 ; the starting point          \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:['0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xFFFE',
 None,
 None,
 None,
 None]
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: ;   Test source code for Advanced Microcontroller Software
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;   Purpose:  To provide test code for the class Assembler Project
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;   Target: TI MSP430 family - simulation
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;       Date:           July 25, 2017
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;       Last Revision:  1.1  July 26, 2017 - minor updates
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;       Written by:     Dr. Michael Helm, ECE dept, Texas Tech University
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;       Adapted from:   earlier example code
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;       Assembler/IDE:  class assembler project
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;       HW I/O assignments: none assigned for this example
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ; Definition of Constants
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ; Watchdog timer definitions
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: WDTCTL     EQU     0x0120
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: WDTPW      EQU     0x5A00
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: WDTHOLD    EQU     0x0080
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ; Definition of Variables
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ORG   0x0200     ; beginning of RAM space
DEBUG:BABY ASSEMBLER:Stripped line: LoopCount       DB    0
DEBUG:BABY ASSEMBLER:Stripped line: Count           DB    0
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;define a table (array) of 8 bytes
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: BufferTable:    DS    8        ; this will allocate 8 bytes of uninitialized
DEBUG:BABY ASSEMBLER:Stripped line: ; bytes in RAM space
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: BufferTableSize EQU $ - BufferTable   ; capture table size into a constant
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;  literally "Current address minus
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;  address of BufferTable"
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ORG     0xC000                  ; Program Reset (prog memory start)
DEBUG:BABY ASSEMBLER:Stripped line: ; this is Program memory start
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ; address for MSP430G2553 (16K)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: RESET       mov.w   #0x0400, SP       ; Initialize stackpointer(to end of RAM +1)
DEBUG:BABY ASSEMBLER:Stripped line: ; RAM is 512 bytes, last position is 3FFh
DEBUG:BABY ASSEMBLER:Storing previous val of 0xc002 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: StopWDT     mov.w   #WDTPW+WDTHOLD, &WDTCTL  ; Stop WDT (Watchdog timer)
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: MainProgramStart
DEBUG:BABY ASSEMBLER:Stripped line: ; objective here is clear out the BufferTable in RAM to all zeros
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: mov #BufferTableSize, R15    ; R15 is a loop counter
DEBUG:BABY ASSEMBLER:Stripped line: mov #BufferTable, R14        ; R14 points to start of RAM table
DEBUG:BABY ASSEMBLER:Stripped line: ClearNextByte
DEBUG:BABY ASSEMBLER:Stripped line: mov.b #0,  0(R14)      ; clear the location to zero
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: inc R14                ; point to next byte in table
DEBUG:BABY ASSEMBLER:Stripped line: dec R15                ; done them all yet?
DEBUG:BABY ASSEMBLER:Stripped line: jnz  ClearNextByte     ; if no, do some more
DEBUG:BABY ASSEMBLER:Stripped line: FinishedClearingRAMtable
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ; now copy fixed constant table from Program Memory into RAM table
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: mov #BufferTableSize, R15    ; R15 is a loop counter
DEBUG:BABY ASSEMBLER:Stripped line: mov #BufferTable, R14        ; R14 points to start of RAM table
DEBUG:BABY ASSEMBLER:Stripped line: mov #PatternTable2, R13      ; R13 points to start of ROM table
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: GetNextByte
DEBUG:BABY ASSEMBLER:Stripped line: mov.b 0(R13),  0(R14)      ; copy byte from ROM table to RAM table
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: inc R13                    ;increment source addr
DEBUG:BABY ASSEMBLER:Stripped line: inc R14                ; point to next byte in RAM table
DEBUG:BABY ASSEMBLER:Stripped line: dec R15                ; done them all yet?
DEBUG:BABY ASSEMBLER:Stripped line: jnz  GetNextByte     ; if no, do some more
DEBUG:BABY ASSEMBLER:Stripped line: FinishedCopyingTableToRAM
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: Done        jz     Done           ;  halt here
DEBUG:BABY ASSEMBLER:Stripped line: jnz    Done
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ;           End of main code
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ;           Subroutines
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ; none used here
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ;           End of all Subroutines
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ;           Definition of Program Data Memory
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ORG   0xE000
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: PatternTable1           ; this is just an example table (or perhaps more
DEBUG:BABY ASSEMBLER:Stripped line: Row0    DB  'E'   ; familar concept is this is an array of bytes
DEBUG:BABY ASSEMBLER:Stripped line: Row1    DB  'C'   ; containing 8 bytes as defined here)
DEBUG:BABY ASSEMBLER:Stripped line: Row2    DB  'E'   ;  PatternTable1 is the name of the table (or array)
DEBUG:BABY ASSEMBLER:Stripped line: Row3    DB  '-'
DEBUG:BABY ASSEMBLER:Stripped line: Row4    DB  '3'
DEBUG:BABY ASSEMBLER:Stripped line: Row5    DB  '3'
DEBUG:BABY ASSEMBLER:Stripped line: Row6    DB  '6'
DEBUG:BABY ASSEMBLER:Stripped line: Row7    DB  '2'
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: PatternTable2  DB "EXAMPLES"
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Stripped line: ;           Interrupt Vectors
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ORG     0xFFFE                  ; MSP430 RESET Vector
DEBUG:BABY ASSEMBLER:Stripped line: DW      RESET                   ; establishes the label RESET as
DEBUG:BABY ASSEMBLER:Stripped line: ; the starting point
DEBUG:BABY ASSEMBLER:Storing previous val of 0x10000 into old val None
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: END                             ; END of all code for this program
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0200',
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xE000',
 'Row0': '0xe002',
 'Row1': '0xe003',
 'Row2': '0xe004',
 'Row3': '0xe005',
 'Row4': '0xe006',
 'Row5': '0xe007',
 'Row6': '0xe008',
 'Row7': '0xe009'}
WARNING:BABY ASSEMBLER:Column contains NoneType
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0200                                                \n'
 '31         0200                  ;define a table (array) of 8 bytes\n'
 '32         0202                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         0202                  ; bytes in RAM space          \n'
 '34         0202                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         0202                  ;  literally "Current address minus\n'
 '36         0202                  ;  address of BufferTable"    \n'
 '37         0200                                                \n'
 '38         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         C000                                                \n'
 '46         c002                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         C000                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         c002                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         c002                  inc R14                ; point to next byte '
 'in table\n'
 '56         c004                  dec R15                ; done them all '
 'yet?\n'
 '57         c006                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         c006                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         c002                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         c002                  inc R13                    ;increment '
 'source addr\n'
 '69         c004                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         c006                  dec R15                ; done them all '
 'yet?\n'
 '71         c008                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c004                  jnz    Done                   \n'
 '76         C000                                                \n'
 '77         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         C000                  ;           End of main code  \n'
 '79         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         C000                                                \n'
 '81         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         C000                  ;           Subroutines       \n'
 '83         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         C000                                                \n'
 '85         C000                  ; none used here              \n'
 '86         C000                                                \n'
 '87         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         C000                  ;           End of all Subroutines\n'
 '89         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         C000                                                \n'
 '91         C000                                                \n'
 '92         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         C000                  ;           Definition of Program Data '
 'Memory\n'
 '94         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         e002                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e003                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e004                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e005                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e006                  Row3    DB  '-'               \n"
 "102        e007                  Row4    DB  '3'               \n"
 "103        e008                  Row5    DB  '3'               \n"
 "104        e009                  Row6    DB  '6'               \n"
 "105        e00a                  Row7    DB  '2'               \n"
 '106        E000                                                \n'
 '107        e001                  PatternTable2  DB "EXAMPLES"  \n'
 '108        E000                                                \n'
 '109        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '110        E000                  ;           Interrupt Vectors \n'
 '111        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '112        E000                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        10000                 DW      RESET                   ; '
 'establishes the label RESET as\n'
 '115        10000                 ; the starting point          \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:['0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xFFFE',
 None,
 None,
 None,
 None]
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: ;   Test source code for Advanced Microcontroller Software
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;   Purpose:  To provide test code for the class Assembler Project
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;   Target: TI MSP430 family - simulation
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;       Date:           July 25, 2017
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;       Last Revision:  1.1  July 26, 2017 - minor updates
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;       Written by:     Dr. Michael Helm, ECE dept, Texas Tech University
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;       Adapted from:   earlier example code
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;       Assembler/IDE:  class assembler project
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;       HW I/O assignments: none assigned for this example
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ; Definition of Constants
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ; Watchdog timer definitions
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: WDTCTL     EQU     0x0120
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: WDTPW      EQU     0x5A00
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: WDTHOLD    EQU     0x0080
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ; Definition of Variables
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ORG   0x0200     ; beginning of RAM space
DEBUG:BABY ASSEMBLER:Stripped line: LoopCount       DB    0
DEBUG:BABY ASSEMBLER:Stripped line: Count           DB    0
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;define a table (array) of 8 bytes
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: BufferTable:    DS    8        ; this will allocate 8 bytes of uninitialized
DEBUG:BABY ASSEMBLER:Stripped line: ; bytes in RAM space
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: BufferTableSize EQU $ - BufferTable   ; capture table size into a constant
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;  literally "Current address minus
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;  address of BufferTable"
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ORG     0xC000                  ; Program Reset (prog memory start)
DEBUG:BABY ASSEMBLER:Stripped line: ; this is Program memory start
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ; address for MSP430G2553 (16K)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: RESET       mov.w   #0x0400, SP       ; Initialize stackpointer(to end of RAM +1)
DEBUG:BABY ASSEMBLER:Stripped line: ; RAM is 512 bytes, last position is 3FFh
DEBUG:BABY ASSEMBLER:Storing previous val of 0xc002 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: StopWDT     mov.w   #WDTPW+WDTHOLD, &WDTCTL  ; Stop WDT (Watchdog timer)
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: MainProgramStart
DEBUG:BABY ASSEMBLER:Stripped line: ; objective here is clear out the BufferTable in RAM to all zeros
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: mov #BufferTableSize, R15    ; R15 is a loop counter
DEBUG:BABY ASSEMBLER:Stripped line: mov #BufferTable, R14        ; R14 points to start of RAM table
DEBUG:BABY ASSEMBLER:Stripped line: ClearNextByte
DEBUG:BABY ASSEMBLER:Stripped line: mov.b #0,  0(R14)      ; clear the location to zero
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: inc R14                ; point to next byte in table
DEBUG:BABY ASSEMBLER:Stripped line: dec R15                ; done them all yet?
DEBUG:BABY ASSEMBLER:Stripped line: jnz  ClearNextByte     ; if no, do some more
DEBUG:BABY ASSEMBLER:Stripped line: FinishedClearingRAMtable
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ; now copy fixed constant table from Program Memory into RAM table
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: mov #BufferTableSize, R15    ; R15 is a loop counter
DEBUG:BABY ASSEMBLER:Stripped line: mov #BufferTable, R14        ; R14 points to start of RAM table
DEBUG:BABY ASSEMBLER:Stripped line: mov #PatternTable2, R13      ; R13 points to start of ROM table
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: GetNextByte
DEBUG:BABY ASSEMBLER:Stripped line: mov.b 0(R13),  0(R14)      ; copy byte from ROM table to RAM table
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: inc R13                    ;increment source addr
DEBUG:BABY ASSEMBLER:Stripped line: inc R14                ; point to next byte in RAM table
DEBUG:BABY ASSEMBLER:Stripped line: dec R15                ; done them all yet?
DEBUG:BABY ASSEMBLER:Stripped line: jnz  GetNextByte     ; if no, do some more
DEBUG:BABY ASSEMBLER:Stripped line: FinishedCopyingTableToRAM
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: Done        jz     Done           ;  halt here
DEBUG:BABY ASSEMBLER:Stripped line: jnz    Done
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ;           End of main code
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ;           Subroutines
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ; none used here
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ;           End of all Subroutines
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ;           Definition of Program Data Memory
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ORG   0xE000
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: PatternTable1           ; this is just an example table (or perhaps more
DEBUG:BABY ASSEMBLER:Stripped line: Row0    DB  'E'   ; familar concept is this is an array of bytes
DEBUG:BABY ASSEMBLER:Stripped line: Row1    DB  'C'   ; containing 8 bytes as defined here)
DEBUG:BABY ASSEMBLER:Stripped line: Row2    DB  'E'   ;  PatternTable1 is the name of the table (or array)
DEBUG:BABY ASSEMBLER:Stripped line: Row3    DB  '-'
DEBUG:BABY ASSEMBLER:Stripped line: Row4    DB  '3'
DEBUG:BABY ASSEMBLER:Stripped line: Row5    DB  '3'
DEBUG:BABY ASSEMBLER:Stripped line: Row6    DB  '6'
DEBUG:BABY ASSEMBLER:Stripped line: Row7    DB  '2'
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: PatternTable2  DB "EXAMPLES"
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Stripped line: ;           Interrupt Vectors
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ORG     0xFFFE                  ; MSP430 RESET Vector
DEBUG:BABY ASSEMBLER:Stripped line: DW      RESET                   ; establishes the label RESET as
DEBUG:BABY ASSEMBLER:Stripped line: ; the starting point
DEBUG:BABY ASSEMBLER:Storing previous val of 0x10000 into old val None
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: END                             ; END of all code for this program
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0200',
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xE000',
 'Row0': '0xe002',
 'Row1': '0xe003',
 'Row2': '0xe004',
 'Row3': '0xe005',
 'Row4': '0xe006',
 'Row5': '0xe007',
 'Row6': '0xe008',
 'Row7': '0xe009'}
WARNING:BABY ASSEMBLER:Column contains NoneType
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0200                                                \n'
 '31         0200                  ;define a table (array) of 8 bytes\n'
 '32         0202                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         0202                  ; bytes in RAM space          \n'
 '34         0202                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         0202                  ;  literally "Current address minus\n'
 '36         0202                  ;  address of BufferTable"    \n'
 '37         0200                                                \n'
 '38         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         C000                                                \n'
 '46         c002                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         C000                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         c002                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         c002                  inc R14                ; point to next byte '
 'in table\n'
 '56         c004                  dec R15                ; done them all '
 'yet?\n'
 '57         c006                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         c006                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         c002                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         c002                  inc R13                    ;increment '
 'source addr\n'
 '69         c004                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         c006                  dec R15                ; done them all '
 'yet?\n'
 '71         c008                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c004                  jnz    Done                   \n'
 '76         C000                                                \n'
 '77         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         C000                  ;           End of main code  \n'
 '79         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         C000                                                \n'
 '81         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         C000                  ;           Subroutines       \n'
 '83         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         C000                                                \n'
 '85         C000                  ; none used here              \n'
 '86         C000                                                \n'
 '87         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         C000                  ;           End of all Subroutines\n'
 '89         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         C000                                                \n'
 '91         C000                                                \n'
 '92         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         C000                  ;           Definition of Program Data '
 'Memory\n'
 '94         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         e002                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e003                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e004                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e005                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e006                  Row3    DB  '-'               \n"
 "102        e007                  Row4    DB  '3'               \n"
 "103        e008                  Row5    DB  '3'               \n"
 "104        e009                  Row6    DB  '6'               \n"
 "105        e00a                  Row7    DB  '2'               \n"
 '106        E000                                                \n'
 '107        e001                  PatternTable2  DB "EXAMPLES"  \n'
 '108        E000                                                \n'
 '109        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '110        E000                  ;           Interrupt Vectors \n'
 '111        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '112        E000                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        10000                 DW      RESET                   ; '
 'establishes the label RESET as\n'
 '115        10000                 ; the starting point          \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:['0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xFFFE',
 None,
 None,
 None,
 None]
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: ;   Test source code for Advanced Microcontroller Software
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;   Purpose:  To provide test code for the class Assembler Project
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;   Target: TI MSP430 family - simulation
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;       Date:           July 25, 2017
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;       Last Revision:  1.1  July 26, 2017 - minor updates
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;       Written by:     Dr. Michael Helm, ECE dept, Texas Tech University
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;       Adapted from:   earlier example code
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;       Assembler/IDE:  class assembler project
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;       HW I/O assignments: none assigned for this example
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ; Definition of Constants
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ; Watchdog timer definitions
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: WDTCTL     EQU     0x0120
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: WDTPW      EQU     0x5A00
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: WDTHOLD    EQU     0x0080
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ; Definition of Variables
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ORG   0x0200     ; beginning of RAM space
DEBUG:BABY ASSEMBLER:Stripped line: LoopCount       DB    0
DEBUG:BABY ASSEMBLER:Stripped line: Count           DB    0
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;define a table (array) of 8 bytes
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: BufferTable:    DS    8        ; this will allocate 8 bytes of uninitialized
DEBUG:BABY ASSEMBLER:Stripped line: ; bytes in RAM space
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: BufferTableSize EQU $ - BufferTable   ; capture table size into a constant
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;  literally "Current address minus
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;  address of BufferTable"
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ORG     0xC000                  ; Program Reset (prog memory start)
DEBUG:BABY ASSEMBLER:Stripped line: ; this is Program memory start
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ; address for MSP430G2553 (16K)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: RESET       mov.w   #0x0400, SP       ; Initialize stackpointer(to end of RAM +1)
DEBUG:BABY ASSEMBLER:Stripped line: ; RAM is 512 bytes, last position is 3FFh
DEBUG:BABY ASSEMBLER:Storing previous val of 0xc002 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: StopWDT     mov.w   #WDTPW+WDTHOLD, &WDTCTL  ; Stop WDT (Watchdog timer)
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: MainProgramStart
DEBUG:BABY ASSEMBLER:Stripped line: ; objective here is clear out the BufferTable in RAM to all zeros
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: mov #BufferTableSize, R15    ; R15 is a loop counter
DEBUG:BABY ASSEMBLER:Stripped line: mov #BufferTable, R14        ; R14 points to start of RAM table
DEBUG:BABY ASSEMBLER:Stripped line: ClearNextByte
DEBUG:BABY ASSEMBLER:Stripped line: mov.b #0,  0(R14)      ; clear the location to zero
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: inc R14                ; point to next byte in table
DEBUG:BABY ASSEMBLER:Stripped line: dec R15                ; done them all yet?
DEBUG:BABY ASSEMBLER:Stripped line: jnz  ClearNextByte     ; if no, do some more
DEBUG:BABY ASSEMBLER:Stripped line: FinishedClearingRAMtable
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ; now copy fixed constant table from Program Memory into RAM table
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: mov #BufferTableSize, R15    ; R15 is a loop counter
DEBUG:BABY ASSEMBLER:Stripped line: mov #BufferTable, R14        ; R14 points to start of RAM table
DEBUG:BABY ASSEMBLER:Stripped line: mov #PatternTable2, R13      ; R13 points to start of ROM table
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: GetNextByte
DEBUG:BABY ASSEMBLER:Stripped line: mov.b 0(R13),  0(R14)      ; copy byte from ROM table to RAM table
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: inc R13                    ;increment source addr
DEBUG:BABY ASSEMBLER:Stripped line: inc R14                ; point to next byte in RAM table
DEBUG:BABY ASSEMBLER:Stripped line: dec R15                ; done them all yet?
DEBUG:BABY ASSEMBLER:Stripped line: jnz  GetNextByte     ; if no, do some more
DEBUG:BABY ASSEMBLER:Stripped line: FinishedCopyingTableToRAM
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: Done        jz     Done           ;  halt here
DEBUG:BABY ASSEMBLER:Stripped line: jnz    Done
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ;           End of main code
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ;           Subroutines
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ; none used here
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ;           End of all Subroutines
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ;           Definition of Program Data Memory
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ORG   0xE000
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: PatternTable1           ; this is just an example table (or perhaps more
DEBUG:BABY ASSEMBLER:Stripped line: Row0    DB  'E'   ; familar concept is this is an array of bytes
DEBUG:BABY ASSEMBLER:Stripped line: Row1    DB  'C'   ; containing 8 bytes as defined here)
DEBUG:BABY ASSEMBLER:Stripped line: Row2    DB  'E'   ;  PatternTable1 is the name of the table (or array)
DEBUG:BABY ASSEMBLER:Stripped line: Row3    DB  '-'
DEBUG:BABY ASSEMBLER:Stripped line: Row4    DB  '3'
DEBUG:BABY ASSEMBLER:Stripped line: Row5    DB  '3'
DEBUG:BABY ASSEMBLER:Stripped line: Row6    DB  '6'
DEBUG:BABY ASSEMBLER:Stripped line: Row7    DB  '2'
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: PatternTable2  DB "EXAMPLES"
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Stripped line: ;           Interrupt Vectors
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ORG     0xFFFE                  ; MSP430 RESET Vector
DEBUG:BABY ASSEMBLER:Stripped line: DW      RESET                   ; establishes the label RESET as
DEBUG:BABY ASSEMBLER:Stripped line: ; the starting point
DEBUG:BABY ASSEMBLER:Storing previous val of 0x10000 into old val None
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: END                             ; END of all code for this program
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0200',
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xE000',
 'Row0': '0xe002',
 'Row1': '0xe003',
 'Row2': '0xe004',
 'Row3': '0xe005',
 'Row4': '0xe006',
 'Row5': '0xe007',
 'Row6': '0xe008',
 'Row7': '0xe009'}
WARNING:BABY ASSEMBLER:Column contains NoneType
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0200                                                \n'
 '31         0200                  ;define a table (array) of 8 bytes\n'
 '32         0202                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         0202                  ; bytes in RAM space          \n'
 '34         0202                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         0202                  ;  literally "Current address minus\n'
 '36         0202                  ;  address of BufferTable"    \n'
 '37         0200                                                \n'
 '38         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         C000                                                \n'
 '46         c002                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         C000                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         c002                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         c002                  inc R14                ; point to next byte '
 'in table\n'
 '56         c004                  dec R15                ; done them all '
 'yet?\n'
 '57         c006                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         c006                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         c002                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         c002                  inc R13                    ;increment '
 'source addr\n'
 '69         c004                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         c006                  dec R15                ; done them all '
 'yet?\n'
 '71         c008                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c004                  jnz    Done                   \n'
 '76         C000                                                \n'
 '77         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         C000                  ;           End of main code  \n'
 '79         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         C000                                                \n'
 '81         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         C000                  ;           Subroutines       \n'
 '83         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         C000                                                \n'
 '85         C000                  ; none used here              \n'
 '86         C000                                                \n'
 '87         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         C000                  ;           End of all Subroutines\n'
 '89         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         C000                                                \n'
 '91         C000                                                \n'
 '92         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         C000                  ;           Definition of Program Data '
 'Memory\n'
 '94         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         e002                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e003                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e004                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e005                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e006                  Row3    DB  '-'               \n"
 "102        e007                  Row4    DB  '3'               \n"
 "103        e008                  Row5    DB  '3'               \n"
 "104        e009                  Row6    DB  '6'               \n"
 "105        e00a                  Row7    DB  '2'               \n"
 '106        E000                                                \n'
 '107        e001                  PatternTable2  DB "EXAMPLES"  \n'
 '108        E000                                                \n'
 '109        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '110        E000                  ;           Interrupt Vectors \n'
 '111        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '112        E000                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        10000                 DW      RESET                   ; '
 'establishes the label RESET as\n'
 '115        10000                 ; the starting point          \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:['0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xFFFE',
 None,
 None,
 None,
 None]
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: ;   Test source code for Advanced Microcontroller Software
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;   Purpose:  To provide test code for the class Assembler Project
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;   Target: TI MSP430 family - simulation
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;       Date:           July 25, 2017
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;       Last Revision:  1.1  July 26, 2017 - minor updates
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;       Written by:     Dr. Michael Helm, ECE dept, Texas Tech University
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;       Adapted from:   earlier example code
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;       Assembler/IDE:  class assembler project
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;       HW I/O assignments: none assigned for this example
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ; Definition of Constants
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ; Watchdog timer definitions
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: WDTCTL     EQU     0x0120
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: WDTPW      EQU     0x5A00
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: WDTHOLD    EQU     0x0080
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ; Definition of Variables
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ORG   0x0200     ; beginning of RAM space
DEBUG:BABY ASSEMBLER:Stripped line: LoopCount       DB    0
DEBUG:BABY ASSEMBLER:Stripped line: Count           DB    0
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;define a table (array) of 8 bytes
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: BufferTable:    DS    8        ; this will allocate 8 bytes of uninitialized
DEBUG:BABY ASSEMBLER:Stripped line: ; bytes in RAM space
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: BufferTableSize EQU $ - BufferTable   ; capture table size into a constant
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;  literally "Current address minus
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;  address of BufferTable"
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ORG     0xC000                  ; Program Reset (prog memory start)
DEBUG:BABY ASSEMBLER:Stripped line: ; this is Program memory start
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ; address for MSP430G2553 (16K)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: RESET       mov.w   #0x0400, SP       ; Initialize stackpointer(to end of RAM +1)
DEBUG:BABY ASSEMBLER:Stripped line: ; RAM is 512 bytes, last position is 3FFh
DEBUG:BABY ASSEMBLER:Storing previous val of 0xc002 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: StopWDT     mov.w   #WDTPW+WDTHOLD, &WDTCTL  ; Stop WDT (Watchdog timer)
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: MainProgramStart
DEBUG:BABY ASSEMBLER:Stripped line: ; objective here is clear out the BufferTable in RAM to all zeros
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: mov #BufferTableSize, R15    ; R15 is a loop counter
DEBUG:BABY ASSEMBLER:Stripped line: mov #BufferTable, R14        ; R14 points to start of RAM table
DEBUG:BABY ASSEMBLER:Stripped line: ClearNextByte
DEBUG:BABY ASSEMBLER:Stripped line: mov.b #0,  0(R14)      ; clear the location to zero
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: inc R14                ; point to next byte in table
DEBUG:BABY ASSEMBLER:Stripped line: dec R15                ; done them all yet?
DEBUG:BABY ASSEMBLER:Stripped line: jnz  ClearNextByte     ; if no, do some more
DEBUG:BABY ASSEMBLER:Stripped line: FinishedClearingRAMtable
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ; now copy fixed constant table from Program Memory into RAM table
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: mov #BufferTableSize, R15    ; R15 is a loop counter
DEBUG:BABY ASSEMBLER:Stripped line: mov #BufferTable, R14        ; R14 points to start of RAM table
DEBUG:BABY ASSEMBLER:Stripped line: mov #PatternTable2, R13      ; R13 points to start of ROM table
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: GetNextByte
DEBUG:BABY ASSEMBLER:Stripped line: mov.b 0(R13),  0(R14)      ; copy byte from ROM table to RAM table
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: inc R13                    ;increment source addr
DEBUG:BABY ASSEMBLER:Stripped line: inc R14                ; point to next byte in RAM table
DEBUG:BABY ASSEMBLER:Stripped line: dec R15                ; done them all yet?
DEBUG:BABY ASSEMBLER:Stripped line: jnz  GetNextByte     ; if no, do some more
DEBUG:BABY ASSEMBLER:Stripped line: FinishedCopyingTableToRAM
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: Done        jz     Done           ;  halt here
DEBUG:BABY ASSEMBLER:Stripped line: jnz    Done
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ;           End of main code
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ;           Subroutines
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ; none used here
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ;           End of all Subroutines
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ;           Definition of Program Data Memory
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ORG   0xE000
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: PatternTable1           ; this is just an example table (or perhaps more
DEBUG:BABY ASSEMBLER:Stripped line: Row0    DB  'E'   ; familar concept is this is an array of bytes
DEBUG:BABY ASSEMBLER:Stripped line: Row1    DB  'C'   ; containing 8 bytes as defined here)
DEBUG:BABY ASSEMBLER:Stripped line: Row2    DB  'E'   ;  PatternTable1 is the name of the table (or array)
DEBUG:BABY ASSEMBLER:Stripped line: Row3    DB  '-'
DEBUG:BABY ASSEMBLER:Stripped line: Row4    DB  '3'
DEBUG:BABY ASSEMBLER:Stripped line: Row5    DB  '3'
DEBUG:BABY ASSEMBLER:Stripped line: Row6    DB  '6'
DEBUG:BABY ASSEMBLER:Stripped line: Row7    DB  '2'
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: PatternTable2  DB "EXAMPLES"
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Stripped line: ;           Interrupt Vectors
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ORG     0xFFFE                  ; MSP430 RESET Vector
DEBUG:BABY ASSEMBLER:Stripped line: DW      RESET                   ; establishes the label RESET as
DEBUG:BABY ASSEMBLER:Stripped line: ; the starting point
DEBUG:BABY ASSEMBLER:Storing previous val of 0x10000 into old val None
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: END                             ; END of all code for this program
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0200',
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xE000',
 'Row0': '0xe002',
 'Row1': '0xe003',
 'Row2': '0xe004',
 'Row3': '0xe005',
 'Row4': '0xe006',
 'Row5': '0xe007',
 'Row6': '0xe008',
 'Row7': '0xe009'}
WARNING:BABY ASSEMBLER:Column contains NoneType
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0200                                                \n'
 '31         0200                  ;define a table (array) of 8 bytes\n'
 '32         0202                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         0202                  ; bytes in RAM space          \n'
 '34         0202                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         0202                  ;  literally "Current address minus\n'
 '36         0202                  ;  address of BufferTable"    \n'
 '37         0200                                                \n'
 '38         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         C000                                                \n'
 '46         c002                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         C000                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         c002                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         c002                  inc R14                ; point to next byte '
 'in table\n'
 '56         c004                  dec R15                ; done them all '
 'yet?\n'
 '57         c006                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         c006                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         c002                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         c002                  inc R13                    ;increment '
 'source addr\n'
 '69         c004                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         c006                  dec R15                ; done them all '
 'yet?\n'
 '71         c008                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c004                  jnz    Done                   \n'
 '76         C000                                                \n'
 '77         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         C000                  ;           End of main code  \n'
 '79         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         C000                                                \n'
 '81         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         C000                  ;           Subroutines       \n'
 '83         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         C000                                                \n'
 '85         C000                  ; none used here              \n'
 '86         C000                                                \n'
 '87         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         C000                  ;           End of all Subroutines\n'
 '89         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         C000                                                \n'
 '91         C000                                                \n'
 '92         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         C000                  ;           Definition of Program Data '
 'Memory\n'
 '94         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         e002                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e003                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e004                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e005                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e006                  Row3    DB  '-'               \n"
 "102        e007                  Row4    DB  '3'               \n"
 "103        e008                  Row5    DB  '3'               \n"
 "104        e009                  Row6    DB  '6'               \n"
 "105        e00a                  Row7    DB  '2'               \n"
 '106        E000                                                \n'
 '107        e001                  PatternTable2  DB "EXAMPLES"  \n'
 '108        E000                                                \n'
 '109        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '110        E000                  ;           Interrupt Vectors \n'
 '111        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '112        E000                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        10000                 DW      RESET                   ; '
 'establishes the label RESET as\n'
 '115        10000                 ; the starting point          \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:['0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xFFFE',
 None,
 None,
 None,
 None]
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: ;   Test source code for Advanced Microcontroller Software
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;   Purpose:  To provide test code for the class Assembler Project
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;   Target: TI MSP430 family - simulation
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;       Date:           July 25, 2017
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;       Last Revision:  1.1  July 26, 2017 - minor updates
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;       Written by:     Dr. Michael Helm, ECE dept, Texas Tech University
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;       Adapted from:   earlier example code
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;       Assembler/IDE:  class assembler project
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;       HW I/O assignments: none assigned for this example
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ; Definition of Constants
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ; Watchdog timer definitions
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: WDTCTL     EQU     0x0120
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: WDTPW      EQU     0x5A00
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: WDTHOLD    EQU     0x0080
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ; Definition of Variables
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ORG   0x0200     ; beginning of RAM space
DEBUG:BABY ASSEMBLER:Stripped line: LoopCount       DB    0
DEBUG:BABY ASSEMBLER:Stripped line: Count           DB    0
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;define a table (array) of 8 bytes
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: BufferTable:    DS    8        ; this will allocate 8 bytes of uninitialized
DEBUG:BABY ASSEMBLER:Stripped line: ; bytes in RAM space
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: BufferTableSize EQU $ - BufferTable   ; capture table size into a constant
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;  literally "Current address minus
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;  address of BufferTable"
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ORG     0xC000                  ; Program Reset (prog memory start)
DEBUG:BABY ASSEMBLER:Stripped line: ; this is Program memory start
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ; address for MSP430G2553 (16K)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: RESET       mov.w   #0x0400, SP       ; Initialize stackpointer(to end of RAM +1)
DEBUG:BABY ASSEMBLER:Stripped line: ; RAM is 512 bytes, last position is 3FFh
DEBUG:BABY ASSEMBLER:Storing previous val of 0xc002 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: StopWDT     mov.w   #WDTPW+WDTHOLD, &WDTCTL  ; Stop WDT (Watchdog timer)
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: MainProgramStart
DEBUG:BABY ASSEMBLER:Stripped line: ; objective here is clear out the BufferTable in RAM to all zeros
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: mov #BufferTableSize, R15    ; R15 is a loop counter
DEBUG:BABY ASSEMBLER:Stripped line: mov #BufferTable, R14        ; R14 points to start of RAM table
DEBUG:BABY ASSEMBLER:Stripped line: ClearNextByte
DEBUG:BABY ASSEMBLER:Stripped line: mov.b #0,  0(R14)      ; clear the location to zero
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: inc R14                ; point to next byte in table
DEBUG:BABY ASSEMBLER:Stripped line: dec R15                ; done them all yet?
DEBUG:BABY ASSEMBLER:Stripped line: jnz  ClearNextByte     ; if no, do some more
DEBUG:BABY ASSEMBLER:Stripped line: FinishedClearingRAMtable
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ; now copy fixed constant table from Program Memory into RAM table
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: mov #BufferTableSize, R15    ; R15 is a loop counter
DEBUG:BABY ASSEMBLER:Stripped line: mov #BufferTable, R14        ; R14 points to start of RAM table
DEBUG:BABY ASSEMBLER:Stripped line: mov #PatternTable2, R13      ; R13 points to start of ROM table
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: GetNextByte
DEBUG:BABY ASSEMBLER:Stripped line: mov.b 0(R13),  0(R14)      ; copy byte from ROM table to RAM table
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: inc R13                    ;increment source addr
DEBUG:BABY ASSEMBLER:Stripped line: inc R14                ; point to next byte in RAM table
DEBUG:BABY ASSEMBLER:Stripped line: dec R15                ; done them all yet?
DEBUG:BABY ASSEMBLER:Stripped line: jnz  GetNextByte     ; if no, do some more
DEBUG:BABY ASSEMBLER:Stripped line: FinishedCopyingTableToRAM
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: Done        jz     Done           ;  halt here
DEBUG:BABY ASSEMBLER:Stripped line: jnz    Done
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ;           End of main code
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ;           Subroutines
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ; none used here
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ;           End of all Subroutines
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ;           Definition of Program Data Memory
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ORG   0xE000
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: PatternTable1           ; this is just an example table (or perhaps more
DEBUG:BABY ASSEMBLER:Stripped line: Row0    DB  'E'   ; familar concept is this is an array of bytes
DEBUG:BABY ASSEMBLER:Stripped line: Row1    DB  'C'   ; containing 8 bytes as defined here)
DEBUG:BABY ASSEMBLER:Stripped line: Row2    DB  'E'   ;  PatternTable1 is the name of the table (or array)
DEBUG:BABY ASSEMBLER:Stripped line: Row3    DB  '-'
DEBUG:BABY ASSEMBLER:Stripped line: Row4    DB  '3'
DEBUG:BABY ASSEMBLER:Stripped line: Row5    DB  '3'
DEBUG:BABY ASSEMBLER:Stripped line: Row6    DB  '6'
DEBUG:BABY ASSEMBLER:Stripped line: Row7    DB  '2'
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: PatternTable2  DB "EXAMPLES"
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Stripped line: ;           Interrupt Vectors
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ORG     0xFFFE                  ; MSP430 RESET Vector
DEBUG:BABY ASSEMBLER:Stripped line: DW      RESET                   ; establishes the label RESET as
DEBUG:BABY ASSEMBLER:Stripped line: ; the starting point
DEBUG:BABY ASSEMBLER:Storing previous val of 0x10000 into old val None
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: END                             ; END of all code for this program
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0200',
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xE000',
 'Row0': '0xe002',
 'Row1': '0xe003',
 'Row2': '0xe004',
 'Row3': '0xe005',
 'Row4': '0xe006',
 'Row5': '0xe007',
 'Row6': '0xe008',
 'Row7': '0xe009'}
WARNING:BABY ASSEMBLER:Column contains NoneType
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0200                                                \n'
 '31         0200                  ;define a table (array) of 8 bytes\n'
 '32         0202                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         0202                  ; bytes in RAM space          \n'
 '34         0202                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         0202                  ;  literally "Current address minus\n'
 '36         0202                  ;  address of BufferTable"    \n'
 '37         0200                                                \n'
 '38         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         C000                                                \n'
 '46         c002                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         C000                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         c002                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         c002                  inc R14                ; point to next byte '
 'in table\n'
 '56         c004                  dec R15                ; done them all '
 'yet?\n'
 '57         c006                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         c006                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         c002                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         c002                  inc R13                    ;increment '
 'source addr\n'
 '69         c004                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         c006                  dec R15                ; done them all '
 'yet?\n'
 '71         c008                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c004                  jnz    Done                   \n'
 '76         C000                                                \n'
 '77         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         C000                  ;           End of main code  \n'
 '79         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         C000                                                \n'
 '81         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         C000                  ;           Subroutines       \n'
 '83         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         C000                                                \n'
 '85         C000                  ; none used here              \n'
 '86         C000                                                \n'
 '87         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         C000                  ;           End of all Subroutines\n'
 '89         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         C000                                                \n'
 '91         C000                                                \n'
 '92         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         C000                  ;           Definition of Program Data '
 'Memory\n'
 '94         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         e002                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e003                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e004                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e005                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e006                  Row3    DB  '-'               \n"
 "102        e007                  Row4    DB  '3'               \n"
 "103        e008                  Row5    DB  '3'               \n"
 "104        e009                  Row6    DB  '6'               \n"
 "105        e00a                  Row7    DB  '2'               \n"
 '106        E000                                                \n'
 '107        e001                  PatternTable2  DB "EXAMPLES"  \n'
 '108        E000                                                \n'
 '109        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '110        E000                  ;           Interrupt Vectors \n'
 '111        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '112        E000                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        10000                 DW      RESET                   ; '
 'establishes the label RESET as\n'
 '115        10000                 ; the starting point          \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:['0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xFFFE',
 None,
 None,
 None,
 None]
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: ;   Test source code for Advanced Microcontroller Software
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;   Purpose:  To provide test code for the class Assembler Project
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;   Target: TI MSP430 family - simulation
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;       Date:           July 25, 2017
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;       Last Revision:  1.1  July 26, 2017 - minor updates
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;       Written by:     Dr. Michael Helm, ECE dept, Texas Tech University
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;       Adapted from:   earlier example code
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;       Assembler/IDE:  class assembler project
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;       HW I/O assignments: none assigned for this example
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ; Definition of Constants
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ; Watchdog timer definitions
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: WDTCTL     EQU     0x0120
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: WDTPW      EQU     0x5A00
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: WDTHOLD    EQU     0x0080
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ; Definition of Variables
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ORG   0x0200     ; beginning of RAM space
DEBUG:BABY ASSEMBLER:Stripped line: LoopCount       DB    0
DEBUG:BABY ASSEMBLER:Stripped line: Count           DB    0
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;define a table (array) of 8 bytes
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: BufferTable:    DS    8        ; this will allocate 8 bytes of uninitialized
DEBUG:BABY ASSEMBLER:Stripped line: ; bytes in RAM space
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: BufferTableSize EQU $ - BufferTable   ; capture table size into a constant
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;  literally "Current address minus
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;  address of BufferTable"
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ORG     0xC000                  ; Program Reset (prog memory start)
DEBUG:BABY ASSEMBLER:Stripped line: ; this is Program memory start
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ; address for MSP430G2553 (16K)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: RESET       mov.w   #0x0400, SP       ; Initialize stackpointer(to end of RAM +1)
DEBUG:BABY ASSEMBLER:Stripped line: ; RAM is 512 bytes, last position is 3FFh
DEBUG:BABY ASSEMBLER:Storing previous val of 0xc002 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: StopWDT     mov.w   #WDTPW+WDTHOLD, &WDTCTL  ; Stop WDT (Watchdog timer)
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: MainProgramStart
DEBUG:BABY ASSEMBLER:Stripped line: ; objective here is clear out the BufferTable in RAM to all zeros
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: mov #BufferTableSize, R15    ; R15 is a loop counter
DEBUG:BABY ASSEMBLER:Stripped line: mov #BufferTable, R14        ; R14 points to start of RAM table
DEBUG:BABY ASSEMBLER:Stripped line: ClearNextByte
DEBUG:BABY ASSEMBLER:Stripped line: mov.b #0,  0(R14)      ; clear the location to zero
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: inc R14                ; point to next byte in table
DEBUG:BABY ASSEMBLER:Stripped line: dec R15                ; done them all yet?
DEBUG:BABY ASSEMBLER:Stripped line: jnz  ClearNextByte     ; if no, do some more
DEBUG:BABY ASSEMBLER:Stripped line: FinishedClearingRAMtable
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ; now copy fixed constant table from Program Memory into RAM table
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: mov #BufferTableSize, R15    ; R15 is a loop counter
DEBUG:BABY ASSEMBLER:Stripped line: mov #BufferTable, R14        ; R14 points to start of RAM table
DEBUG:BABY ASSEMBLER:Stripped line: mov #PatternTable2, R13      ; R13 points to start of ROM table
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: GetNextByte
DEBUG:BABY ASSEMBLER:Stripped line: mov.b 0(R13),  0(R14)      ; copy byte from ROM table to RAM table
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: inc R13                    ;increment source addr
DEBUG:BABY ASSEMBLER:Stripped line: inc R14                ; point to next byte in RAM table
DEBUG:BABY ASSEMBLER:Stripped line: dec R15                ; done them all yet?
DEBUG:BABY ASSEMBLER:Stripped line: jnz  GetNextByte     ; if no, do some more
DEBUG:BABY ASSEMBLER:Stripped line: FinishedCopyingTableToRAM
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: Done        jz     Done           ;  halt here
DEBUG:BABY ASSEMBLER:Stripped line: jnz    Done
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ;           End of main code
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ;           Subroutines
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ; none used here
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ;           End of all Subroutines
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ;           Definition of Program Data Memory
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ORG   0xE000
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: PatternTable1           ; this is just an example table (or perhaps more
DEBUG:BABY ASSEMBLER:Stripped line: Row0    DB  'E'   ; familar concept is this is an array of bytes
DEBUG:BABY ASSEMBLER:Stripped line: Row1    DB  'C'   ; containing 8 bytes as defined here)
DEBUG:BABY ASSEMBLER:Stripped line: Row2    DB  'E'   ;  PatternTable1 is the name of the table (or array)
DEBUG:BABY ASSEMBLER:Stripped line: Row3    DB  '-'
DEBUG:BABY ASSEMBLER:Stripped line: Row4    DB  '3'
DEBUG:BABY ASSEMBLER:Stripped line: Row5    DB  '3'
DEBUG:BABY ASSEMBLER:Stripped line: Row6    DB  '6'
DEBUG:BABY ASSEMBLER:Stripped line: Row7    DB  '2'
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: PatternTable2  DB "EXAMPLES"
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Stripped line: ;           Interrupt Vectors
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ORG     0xFFFE                  ; MSP430 RESET Vector
DEBUG:BABY ASSEMBLER:Stripped line: DW      RESET                   ; establishes the label RESET as
DEBUG:BABY ASSEMBLER:Stripped line: ; the starting point
DEBUG:BABY ASSEMBLER:Storing previous val of 0x10000 into old val None
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: END                             ; END of all code for this program
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0200',
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xE000',
 'Row0': '0xe002',
 'Row1': '0xe003',
 'Row2': '0xe004',
 'Row3': '0xe005',
 'Row4': '0xe006',
 'Row5': '0xe007',
 'Row6': '0xe008',
 'Row7': '0xe009'}
WARNING:BABY ASSEMBLER:Column contains NoneType
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0200                                                \n'
 '31         0200                  ;define a table (array) of 8 bytes\n'
 '32         0202                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         0202                  ; bytes in RAM space          \n'
 '34         0202                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         0202                  ;  literally "Current address minus\n'
 '36         0202                  ;  address of BufferTable"    \n'
 '37         0200                                                \n'
 '38         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         C000                                                \n'
 '46         c002                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         C000                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         c002                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         c002                  inc R14                ; point to next byte '
 'in table\n'
 '56         c004                  dec R15                ; done them all '
 'yet?\n'
 '57         c006                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         c006                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         c002                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         c002                  inc R13                    ;increment '
 'source addr\n'
 '69         c004                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         c006                  dec R15                ; done them all '
 'yet?\n'
 '71         c008                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c004                  jnz    Done                   \n'
 '76         C000                                                \n'
 '77         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         C000                  ;           End of main code  \n'
 '79         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         C000                                                \n'
 '81         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         C000                  ;           Subroutines       \n'
 '83         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         C000                                                \n'
 '85         C000                  ; none used here              \n'
 '86         C000                                                \n'
 '87         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         C000                  ;           End of all Subroutines\n'
 '89         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         C000                                                \n'
 '91         C000                                                \n'
 '92         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         C000                  ;           Definition of Program Data '
 'Memory\n'
 '94         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         e002                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e003                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e004                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e005                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e006                  Row3    DB  '-'               \n"
 "102        e007                  Row4    DB  '3'               \n"
 "103        e008                  Row5    DB  '3'               \n"
 "104        e009                  Row6    DB  '6'               \n"
 "105        e00a                  Row7    DB  '2'               \n"
 '106        E000                                                \n'
 '107        e001                  PatternTable2  DB "EXAMPLES"  \n'
 '108        E000                                                \n'
 '109        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '110        E000                  ;           Interrupt Vectors \n'
 '111        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '112        E000                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        10000                 DW      RESET                   ; '
 'establishes the label RESET as\n'
 '115        10000                 ; the starting point          \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:['0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xFFFE',
 None,
 None,
 None,
 None]
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: ;   Test source code for Advanced Microcontroller Software
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;   Purpose:  To provide test code for the class Assembler Project
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;   Target: TI MSP430 family - simulation
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;       Date:           July 25, 2017
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;       Last Revision:  1.1  July 26, 2017 - minor updates
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;       Written by:     Dr. Michael Helm, ECE dept, Texas Tech University
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;       Adapted from:   earlier example code
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;       Assembler/IDE:  class assembler project
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;       HW I/O assignments: none assigned for this example
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ; Definition of Constants
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ; Watchdog timer definitions
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: WDTCTL     EQU     0x0120
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: WDTPW      EQU     0x5A00
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: WDTHOLD    EQU     0x0080
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ; Definition of Variables
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ORG   0x0200     ; beginning of RAM space
DEBUG:BABY ASSEMBLER:Stripped line: LoopCount       DB    0
DEBUG:BABY ASSEMBLER:Stripped line: Count           DB    0
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;define a table (array) of 8 bytes
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: BufferTable:    DS    8        ; this will allocate 8 bytes of uninitialized
DEBUG:BABY ASSEMBLER:Stripped line: ; bytes in RAM space
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: BufferTableSize EQU $ - BufferTable   ; capture table size into a constant
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;  literally "Current address minus
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;  address of BufferTable"
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ORG     0xC000                  ; Program Reset (prog memory start)
DEBUG:BABY ASSEMBLER:Stripped line: ; this is Program memory start
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ; address for MSP430G2553 (16K)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: RESET       mov.w   #0x0400, SP       ; Initialize stackpointer(to end of RAM +1)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ; RAM is 512 bytes, last position is 3FFh
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: StopWDT     mov.w   #WDTPW+WDTHOLD, &WDTCTL  ; Stop WDT (Watchdog timer)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: MainProgramStart
DEBUG:BABY ASSEMBLER:Stripped line: ; objective here is clear out the BufferTable in RAM to all zeros
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: mov #BufferTableSize, R15    ; R15 is a loop counter
DEBUG:BABY ASSEMBLER:Stripped line: mov #BufferTable, R14        ; R14 points to start of RAM table
DEBUG:BABY ASSEMBLER:Stripped line: ClearNextByte
DEBUG:BABY ASSEMBLER:Stripped line: mov.b #0,  0(R14)      ; clear the location to zero
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: inc R14                ; point to next byte in table
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: dec R15                ; done them all yet?
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: jnz  ClearNextByte     ; if no, do some more
DEBUG:BABY ASSEMBLER:Stripped line: FinishedClearingRAMtable
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ; now copy fixed constant table from Program Memory into RAM table
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: mov #BufferTableSize, R15    ; R15 is a loop counter
DEBUG:BABY ASSEMBLER:Stripped line: mov #BufferTable, R14        ; R14 points to start of RAM table
DEBUG:BABY ASSEMBLER:Stripped line: mov #PatternTable2, R13      ; R13 points to start of ROM table
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: GetNextByte
DEBUG:BABY ASSEMBLER:Stripped line: mov.b 0(R13),  0(R14)      ; copy byte from ROM table to RAM table
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: inc R13                    ;increment source addr
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: inc R14                ; point to next byte in RAM table
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: dec R15                ; done them all yet?
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: jnz  GetNextByte     ; if no, do some more
DEBUG:BABY ASSEMBLER:Stripped line: FinishedCopyingTableToRAM
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: Done        jz     Done           ;  halt here
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: jnz    Done
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ;           End of main code
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ;           Subroutines
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ; none used here
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ;           End of all Subroutines
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ;           Definition of Program Data Memory
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ORG   0xE000
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: PatternTable1           ; this is just an example table (or perhaps more
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Stripped line: Row0    DB  'E'   ; familar concept is this is an array of bytes
DEBUG:BABY ASSEMBLER:Stripped line: Row1    DB  'C'   ; containing 8 bytes as defined here)
DEBUG:BABY ASSEMBLER:Stripped line: Row2    DB  'E'   ;  PatternTable1 is the name of the table (or array)
DEBUG:BABY ASSEMBLER:Stripped line: Row3    DB  '-'
DEBUG:BABY ASSEMBLER:Stripped line: Row4    DB  '3'
DEBUG:BABY ASSEMBLER:Stripped line: Row5    DB  '3'
DEBUG:BABY ASSEMBLER:Stripped line: Row6    DB  '6'
DEBUG:BABY ASSEMBLER:Stripped line: Row7    DB  '2'
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: PatternTable2  DB "EXAMPLES"
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Stripped line: ;           Interrupt Vectors
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ORG     0xFFFE                  ; MSP430 RESET Vector
DEBUG:BABY ASSEMBLER:Stripped line: DW      RESET                   ; establishes the label RESET as
DEBUG:BABY ASSEMBLER:Storing previous val of 0xFFFE into old val None
DEBUG:BABY ASSEMBLER:Stripped line: ; the starting point
DEBUG:BABY ASSEMBLER:Storing previous val of 0xFFFE into old val None
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: END                             ; END of all code for this program
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0200',
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xE000',
 'Row0': '0xE000',
 'Row1': '0xe001',
 'Row2': '0xe002',
 'Row3': '0xe003',
 'Row4': '0xe004',
 'Row5': '0xe005',
 'Row6': '0xe006',
 'Row7': '0xe007'}
WARNING:BABY ASSEMBLER:Column contains NoneType
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0200                                                \n'
 '31         0200                  ;define a table (array) of 8 bytes\n'
 '32         0202                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         0202                  ; bytes in RAM space          \n'
 '34         0202                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         0202                  ;  literally "Current address minus\n'
 '36         0202                  ;  address of BufferTable"    \n'
 '37         0200                                                \n'
 '38         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         C000                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         C000                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         C000                                                \n'
 '46         C000                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         C000                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         c002                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         c002                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         c006                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         c002                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         c002                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         C000                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c002                  jnz    Done                   \n'
 '76         C000                                                \n'
 '77         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         C000                  ;           End of main code  \n'
 '79         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         C000                                                \n'
 '81         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         C000                  ;           Subroutines       \n'
 '83         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         C000                                                \n'
 '85         C000                  ; none used here              \n'
 '86         C000                                                \n'
 '87         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         C000                  ;           End of all Subroutines\n'
 '89         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         C000                                                \n'
 '91         C000                                                \n'
 '92         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         C000                  ;           Definition of Program Data '
 'Memory\n'
 '94         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         E000                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e001                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e002                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e003                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e004                  Row3    DB  '-'               \n"
 "102        e005                  Row4    DB  '3'               \n"
 "103        e006                  Row5    DB  '3'               \n"
 "104        e007                  Row6    DB  '6'               \n"
 "105        e008                  Row7    DB  '2'               \n"
 '106        E000                                                \n'
 '107        e001                  PatternTable2  DB "EXAMPLES"  \n'
 '108        E000                                                \n'
 '109        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '110        E000                  ;           Interrupt Vectors \n'
 '111        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '112        E000                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        FFFE                  DW      RESET                   ; '
 'establishes the label RESET as\n'
 '115        FFFE                  ; the starting point          \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:['0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xFFFE',
 None,
 None,
 None,
 None]
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: ;   Test source code for Advanced Microcontroller Software
DEBUG:BABY ASSEMBLER:Stripped line: ;
DEBUG:BABY ASSEMBLER:Stripped line: ;   Purpose:  To provide test code for the class Assembler Project
DEBUG:BABY ASSEMBLER:Stripped line: ;
DEBUG:BABY ASSEMBLER:Stripped line: ;   Target: TI MSP430 family - simulation
DEBUG:BABY ASSEMBLER:Stripped line: ;
DEBUG:BABY ASSEMBLER:Stripped line: ;       Date:           July 25, 2017
DEBUG:BABY ASSEMBLER:Stripped line: ;       Last Revision:  1.1  July 26, 2017 - minor updates
DEBUG:BABY ASSEMBLER:Stripped line: ;
DEBUG:BABY ASSEMBLER:Stripped line: ;       Written by:     Dr. Michael Helm, ECE dept, Texas Tech University
DEBUG:BABY ASSEMBLER:Stripped line: ;       Adapted from:   earlier example code
DEBUG:BABY ASSEMBLER:Stripped line: ;       Assembler/IDE:  class assembler project
DEBUG:BABY ASSEMBLER:Stripped line: ;
DEBUG:BABY ASSEMBLER:Stripped line: ;       HW I/O assignments: none assigned for this example
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: ; Definition of Constants
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: ; Watchdog timer definitions
DEBUG:BABY ASSEMBLER:Stripped line: WDTCTL     EQU     0x0120
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: WDTPW      EQU     0x5A00
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: WDTHOLD    EQU     0x0080
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: ; Definition of Variables
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ORG   0x0200     ; beginning of RAM space
DEBUG:BABY ASSEMBLER:Stripped line: LoopCount       DB    0
DEBUG:BABY ASSEMBLER:Stripped line: Count           DB    0
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;define a table (array) of 8 bytes
DEBUG:BABY ASSEMBLER:Stripped line: BufferTable:    DS    8        ; this will allocate 8 bytes of uninitialized
DEBUG:BABY ASSEMBLER:Stripped line: ; bytes in RAM space
DEBUG:BABY ASSEMBLER:Stripped line: BufferTableSize EQU $ - BufferTable   ; capture table size into a constant
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Stripped line: ;  literally "Current address minus
DEBUG:BABY ASSEMBLER:Stripped line: ;  address of BufferTable"
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: ORG     0xC000                  ; Program Reset (prog memory start)
DEBUG:BABY ASSEMBLER:Stripped line: ; this is Program memory start
DEBUG:BABY ASSEMBLER:Stripped line: ; address for MSP430G2553 (16K)
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: RESET       mov.w   #0x0400, SP       ; Initialize stackpointer(to end of RAM +1)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ; RAM is 512 bytes, last position is 3FFh
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: StopWDT     mov.w   #WDTPW+WDTHOLD, &WDTCTL  ; Stop WDT (Watchdog timer)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: MainProgramStart
DEBUG:BABY ASSEMBLER:Stripped line: ; objective here is clear out the BufferTable in RAM to all zeros
DEBUG:BABY ASSEMBLER:Stripped line: mov #BufferTableSize, R15    ; R15 is a loop counter
DEBUG:BABY ASSEMBLER:Stripped line: mov #BufferTable, R14        ; R14 points to start of RAM table
DEBUG:BABY ASSEMBLER:Stripped line: ClearNextByte
DEBUG:BABY ASSEMBLER:Stripped line: mov.b #0,  0(R14)      ; clear the location to zero
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: inc R14                ; point to next byte in table
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: dec R15                ; done them all yet?
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: jnz  ClearNextByte     ; if no, do some more
DEBUG:BABY ASSEMBLER:Stripped line: FinishedClearingRAMtable
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ; now copy fixed constant table from Program Memory into RAM table
DEBUG:BABY ASSEMBLER:Stripped line: mov #BufferTableSize, R15    ; R15 is a loop counter
DEBUG:BABY ASSEMBLER:Stripped line: mov #BufferTable, R14        ; R14 points to start of RAM table
DEBUG:BABY ASSEMBLER:Stripped line: mov #PatternTable2, R13      ; R13 points to start of ROM table
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: GetNextByte
DEBUG:BABY ASSEMBLER:Stripped line: mov.b 0(R13),  0(R14)      ; copy byte from ROM table to RAM table
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: inc R13                    ;increment source addr
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: inc R14                ; point to next byte in RAM table
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: dec R15                ; done them all yet?
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: jnz  GetNextByte     ; if no, do some more
DEBUG:BABY ASSEMBLER:Stripped line: FinishedCopyingTableToRAM
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: Done        jz     Done           ;  halt here
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: jnz    Done
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: ;           End of main code
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: ;           Subroutines
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ; none used here
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: ;           End of all Subroutines
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: ;           Definition of Program Data Memory
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: ORG   0xE000
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: PatternTable1           ; this is just an example table (or perhaps more
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Stripped line: Row0    DB  'E'   ; familar concept is this is an array of bytes
DEBUG:BABY ASSEMBLER:Stripped line: Row1    DB  'C'   ; containing 8 bytes as defined here)
DEBUG:BABY ASSEMBLER:Stripped line: Row2    DB  'E'   ;  PatternTable1 is the name of the table (or array)
DEBUG:BABY ASSEMBLER:Stripped line: Row3    DB  '-'
DEBUG:BABY ASSEMBLER:Stripped line: Row4    DB  '3'
DEBUG:BABY ASSEMBLER:Stripped line: Row5    DB  '3'
DEBUG:BABY ASSEMBLER:Stripped line: Row6    DB  '6'
DEBUG:BABY ASSEMBLER:Stripped line: Row7    DB  '2'
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: PatternTable2  DB "EXAMPLES"
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: ;           Interrupt Vectors
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ORG     0xFFFE                  ; MSP430 RESET Vector
DEBUG:BABY ASSEMBLER:Stripped line: DW      RESET                   ; establishes the label RESET as
DEBUG:BABY ASSEMBLER:Storing previous val of 0xFFFE into old val None
DEBUG:BABY ASSEMBLER:Stripped line: ; the starting point
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: END                             ; END of all code for this program
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0200',
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xE000',
 'Row0': '0xE000',
 'Row1': '0xe001',
 'Row2': '0xe002',
 'Row3': '0xe003',
 'Row4': '0xe004',
 'Row5': '0xe005',
 'Row6': '0xe006',
 'Row7': '0xe007'}
WARNING:BABY ASSEMBLER:Column contains NoneType
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0200                                                \n'
 '31         0200                  ;define a table (array) of 8 bytes\n'
 '32         0202                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         0200                  ; bytes in RAM space          \n'
 '34         0200                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         0200                  ;  literally "Current address minus\n'
 '36         0200                  ;  address of BufferTable"    \n'
 '37         0200                                                \n'
 '38         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         C000                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         C000                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         C000                                                \n'
 '46         C000                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         C000                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         c002                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         c002                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         c006                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         c002                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         c002                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         C000                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c002                  jnz    Done                   \n'
 '76         C000                                                \n'
 '77         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         C000                  ;           End of main code  \n'
 '79         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         C000                                                \n'
 '81         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         C000                  ;           Subroutines       \n'
 '83         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         C000                                                \n'
 '85         C000                  ; none used here              \n'
 '86         C000                                                \n'
 '87         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         C000                  ;           End of all Subroutines\n'
 '89         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         C000                                                \n'
 '91         C000                                                \n'
 '92         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         C000                  ;           Definition of Program Data '
 'Memory\n'
 '94         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         E000                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e001                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e002                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e003                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e004                  Row3    DB  '-'               \n"
 "102        e005                  Row4    DB  '3'               \n"
 "103        e006                  Row5    DB  '3'               \n"
 "104        e007                  Row6    DB  '6'               \n"
 "105        e008                  Row7    DB  '2'               \n"
 '106        E000                                                \n'
 '107        e001                  PatternTable2  DB "EXAMPLES"  \n'
 '108        E000                                                \n'
 '109        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '110        E000                  ;           Interrupt Vectors \n'
 '111        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '112        E000                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        FFFE                  DW      RESET                   ; '
 'establishes the label RESET as\n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:['0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xFFFE',
 None,
 None,
 None,
 None]
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: ;   Test source code for Advanced Microcontroller Software
DEBUG:BABY ASSEMBLER:Stripped line: ;
DEBUG:BABY ASSEMBLER:Stripped line: ;   Purpose:  To provide test code for the class Assembler Project
DEBUG:BABY ASSEMBLER:Stripped line: ;
DEBUG:BABY ASSEMBLER:Stripped line: ;   Target: TI MSP430 family - simulation
DEBUG:BABY ASSEMBLER:Stripped line: ;
DEBUG:BABY ASSEMBLER:Stripped line: ;       Date:           July 25, 2017
DEBUG:BABY ASSEMBLER:Stripped line: ;       Last Revision:  1.1  July 26, 2017 - minor updates
DEBUG:BABY ASSEMBLER:Stripped line: ;
DEBUG:BABY ASSEMBLER:Stripped line: ;       Written by:     Dr. Michael Helm, ECE dept, Texas Tech University
DEBUG:BABY ASSEMBLER:Stripped line: ;       Adapted from:   earlier example code
DEBUG:BABY ASSEMBLER:Stripped line: ;       Assembler/IDE:  class assembler project
DEBUG:BABY ASSEMBLER:Stripped line: ;
DEBUG:BABY ASSEMBLER:Stripped line: ;       HW I/O assignments: none assigned for this example
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: ; Definition of Constants
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: ; Watchdog timer definitions
DEBUG:BABY ASSEMBLER:Stripped line: WDTCTL     EQU     0x0120
DEBUG:BABY ASSEMBLER:Stripped line: WDTPW      EQU     0x5A00
DEBUG:BABY ASSEMBLER:Stripped line: WDTHOLD    EQU     0x0080
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: ; Definition of Variables
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ORG   0x0200     ; beginning of RAM space
DEBUG:BABY ASSEMBLER:Stripped line: LoopCount       DB    0
DEBUG:BABY ASSEMBLER:Stripped line: Count           DB    0
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;define a table (array) of 8 bytes
DEBUG:BABY ASSEMBLER:Stripped line: BufferTable:    DS    8        ; this will allocate 8 bytes of uninitialized
DEBUG:BABY ASSEMBLER:Stripped line: ; bytes in RAM space
DEBUG:BABY ASSEMBLER:Stripped line: BufferTableSize EQU $ - BufferTable   ; capture table size into a constant
DEBUG:BABY ASSEMBLER:Stripped line: ;  literally "Current address minus
DEBUG:BABY ASSEMBLER:Stripped line: ;  address of BufferTable"
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: ORG     0xC000                  ; Program Reset (prog memory start)
DEBUG:BABY ASSEMBLER:Stripped line: ; this is Program memory start
DEBUG:BABY ASSEMBLER:Stripped line: ; address for MSP430G2553 (16K)
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: RESET       mov.w   #0x0400, SP       ; Initialize stackpointer(to end of RAM +1)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: ; RAM is 512 bytes, last position is 3FFh
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: StopWDT     mov.w   #WDTPW+WDTHOLD, &WDTCTL  ; Stop WDT (Watchdog timer)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: MainProgramStart
DEBUG:BABY ASSEMBLER:Stripped line: ; objective here is clear out the BufferTable in RAM to all zeros
DEBUG:BABY ASSEMBLER:Stripped line: mov #BufferTableSize, R15    ; R15 is a loop counter
DEBUG:BABY ASSEMBLER:Stripped line: mov #BufferTable, R14        ; R14 points to start of RAM table
DEBUG:BABY ASSEMBLER:Stripped line: ClearNextByte
DEBUG:BABY ASSEMBLER:Stripped line: mov.b #0,  0(R14)      ; clear the location to zero
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: inc R14                ; point to next byte in table
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: dec R15                ; done them all yet?
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: jnz  ClearNextByte     ; if no, do some more
DEBUG:BABY ASSEMBLER:Stripped line: FinishedClearingRAMtable
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ; now copy fixed constant table from Program Memory into RAM table
DEBUG:BABY ASSEMBLER:Stripped line: mov #BufferTableSize, R15    ; R15 is a loop counter
DEBUG:BABY ASSEMBLER:Stripped line: mov #BufferTable, R14        ; R14 points to start of RAM table
DEBUG:BABY ASSEMBLER:Stripped line: mov #PatternTable2, R13      ; R13 points to start of ROM table
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: GetNextByte
DEBUG:BABY ASSEMBLER:Stripped line: mov.b 0(R13),  0(R14)      ; copy byte from ROM table to RAM table
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: inc R13                    ;increment source addr
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: inc R14                ; point to next byte in RAM table
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: dec R15                ; done them all yet?
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: jnz  GetNextByte     ; if no, do some more
DEBUG:BABY ASSEMBLER:Stripped line: FinishedCopyingTableToRAM
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: Done        jz     Done           ;  halt here
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: jnz    Done
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: ;           End of main code
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: ;           Subroutines
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ; none used here
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: ;           End of all Subroutines
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: ;           Definition of Program Data Memory
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: ORG   0xE000
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: PatternTable1           ; this is just an example table (or perhaps more
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Stripped line: Row0    DB  'E'   ; familar concept is this is an array of bytes
DEBUG:BABY ASSEMBLER:Stripped line: Row1    DB  'C'   ; containing 8 bytes as defined here)
DEBUG:BABY ASSEMBLER:Stripped line: Row2    DB  'E'   ;  PatternTable1 is the name of the table (or array)
DEBUG:BABY ASSEMBLER:Stripped line: Row3    DB  '-'
DEBUG:BABY ASSEMBLER:Stripped line: Row4    DB  '3'
DEBUG:BABY ASSEMBLER:Stripped line: Row5    DB  '3'
DEBUG:BABY ASSEMBLER:Stripped line: Row6    DB  '6'
DEBUG:BABY ASSEMBLER:Stripped line: Row7    DB  '2'
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: PatternTable2  DB "EXAMPLES"
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: ;           Interrupt Vectors
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ORG     0xFFFE                  ; MSP430 RESET Vector
DEBUG:BABY ASSEMBLER:Stripped line: DW      RESET                   ; establishes the label RESET as
DEBUG:BABY ASSEMBLER:Storing previous val of 0xFFFE into old val None
DEBUG:BABY ASSEMBLER:Stripped line: ; the starting point
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: END                             ; END of all code for this program
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0200',
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xE000',
 'Row0': '0xE000',
 'Row1': '0xe001',
 'Row2': '0xe002',
 'Row3': '0xe003',
 'Row4': '0xe004',
 'Row5': '0xe005',
 'Row6': '0xe006',
 'Row7': '0xe007'}
WARNING:BABY ASSEMBLER:Column contains NoneType
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0200                                                \n'
 '31         0200                  ;define a table (array) of 8 bytes\n'
 '32         0202                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         0200                  ; bytes in RAM space          \n'
 '34         0200                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         0200                  ;  literally "Current address minus\n'
 '36         0200                  ;  address of BufferTable"    \n'
 '37         0200                                                \n'
 '38         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         C000                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         C000                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         C000                                                \n'
 '46         C000                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         C000                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         c002                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         c002                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         c006                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         c002                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         c002                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         C000                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c002                  jnz    Done                   \n'
 '76         C000                                                \n'
 '77         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         C000                  ;           End of main code  \n'
 '79         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         C000                                                \n'
 '81         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         C000                  ;           Subroutines       \n'
 '83         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         C000                                                \n'
 '85         C000                  ; none used here              \n'
 '86         C000                                                \n'
 '87         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         C000                  ;           End of all Subroutines\n'
 '89         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         C000                                                \n'
 '91         C000                                                \n'
 '92         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         C000                  ;           Definition of Program Data '
 'Memory\n'
 '94         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         E000                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e001                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e002                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e003                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e004                  Row3    DB  '-'               \n"
 "102        e005                  Row4    DB  '3'               \n"
 "103        e006                  Row5    DB  '3'               \n"
 "104        e007                  Row6    DB  '6'               \n"
 "105        e008                  Row7    DB  '2'               \n"
 '106        E000                                                \n'
 '107        e001                  PatternTable2  DB "EXAMPLES"  \n'
 '108        E000                                                \n'
 '109        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '110        E000                  ;           Interrupt Vectors \n'
 '111        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '112        E000                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        FFFE                  DW      RESET                   ; '
 'establishes the label RESET as\n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:['0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0x0200',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xC000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xE000',
 '0xFFFE',
 None,
 None,
 None,
 None]
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: ;   Test source code for Advanced Microcontroller Software
DEBUG:BABY ASSEMBLER:Stripped line: ;
DEBUG:BABY ASSEMBLER:Stripped line: ;   Purpose:  To provide test code for the class Assembler Project
DEBUG:BABY ASSEMBLER:Stripped line: ;
DEBUG:BABY ASSEMBLER:Stripped line: ;   Target: TI MSP430 family - simulation
DEBUG:BABY ASSEMBLER:Stripped line: ;
DEBUG:BABY ASSEMBLER:Stripped line: ;       Date:           July 25, 2017
DEBUG:BABY ASSEMBLER:Stripped line: ;       Last Revision:  1.1  July 26, 2017 - minor updates
DEBUG:BABY ASSEMBLER:Stripped line: ;
DEBUG:BABY ASSEMBLER:Stripped line: ;       Written by:     Dr. Michael Helm, ECE dept, Texas Tech University
DEBUG:BABY ASSEMBLER:Stripped line: ;       Adapted from:   earlier example code
DEBUG:BABY ASSEMBLER:Stripped line: ;       Assembler/IDE:  class assembler project
DEBUG:BABY ASSEMBLER:Stripped line: ;
DEBUG:BABY ASSEMBLER:Stripped line: ;       HW I/O assignments: none assigned for this example
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: ; Definition of Constants
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: ; Watchdog timer definitions
DEBUG:BABY ASSEMBLER:Stripped line: WDTCTL     EQU     0x0120
DEBUG:BABY ASSEMBLER:Stripped line: WDTPW      EQU     0x5A00
DEBUG:BABY ASSEMBLER:Stripped line: WDTHOLD    EQU     0x0080
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: ; Definition of Variables
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ORG   0x0200     ; beginning of RAM space
DEBUG:BABY ASSEMBLER:Stripped line: LoopCount       DB    0
DEBUG:BABY ASSEMBLER:Stripped line: Count           DB    0
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;define a table (array) of 8 bytes
DEBUG:BABY ASSEMBLER:Stripped line: BufferTable:    DS    8        ; this will allocate 8 bytes of uninitialized
DEBUG:BABY ASSEMBLER:Stripped line: ; bytes in RAM space
DEBUG:BABY ASSEMBLER:Stripped line: BufferTableSize EQU $ - BufferTable   ; capture table size into a constant
DEBUG:BABY ASSEMBLER:Stripped line: ;  literally "Current address minus
DEBUG:BABY ASSEMBLER:Stripped line: ;  address of BufferTable"
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: ORG     0xC000                  ; Program Reset (prog memory start)
DEBUG:BABY ASSEMBLER:Stripped line: ; this is Program memory start
DEBUG:BABY ASSEMBLER:Stripped line: ; address for MSP430G2553 (16K)
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: RESET       mov.w   #0x0400, SP       ; Initialize stackpointer(to end of RAM +1)
DEBUG:BABY ASSEMBLER:Stripped line: ; RAM is 512 bytes, last position is 3FFh
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: StopWDT     mov.w   #WDTPW+WDTHOLD, &WDTCTL  ; Stop WDT (Watchdog timer)
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: MainProgramStart
DEBUG:BABY ASSEMBLER:Stripped line: ; objective here is clear out the BufferTable in RAM to all zeros
DEBUG:BABY ASSEMBLER:Stripped line: mov #BufferTableSize, R15    ; R15 is a loop counter
DEBUG:BABY ASSEMBLER:Stripped line: mov #BufferTable, R14        ; R14 points to start of RAM table
DEBUG:BABY ASSEMBLER:Stripped line: ClearNextByte
DEBUG:BABY ASSEMBLER:Stripped line: mov.b #0,  0(R14)      ; clear the location to zero
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: inc R14                ; point to next byte in table
DEBUG:BABY ASSEMBLER:No match found for instruction inc (line 55)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: dec R15                ; done them all yet?
DEBUG:BABY ASSEMBLER:No match found for instruction dec (line 56)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: jnz  ClearNextByte     ; if no, do some more
DEBUG:BABY ASSEMBLER:Stripped line: FinishedClearingRAMtable
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ; now copy fixed constant table from Program Memory into RAM table
DEBUG:BABY ASSEMBLER:Stripped line: mov #BufferTableSize, R15    ; R15 is a loop counter
DEBUG:BABY ASSEMBLER:Stripped line: mov #BufferTable, R14        ; R14 points to start of RAM table
DEBUG:BABY ASSEMBLER:Stripped line: mov #PatternTable2, R13      ; R13 points to start of ROM table
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: GetNextByte
DEBUG:BABY ASSEMBLER:Stripped line: mov.b 0(R13),  0(R14)      ; copy byte from ROM table to RAM table
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: inc R13                    ;increment source addr
DEBUG:BABY ASSEMBLER:No match found for instruction inc (line 68)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: inc R14                ; point to next byte in RAM table
DEBUG:BABY ASSEMBLER:No match found for instruction inc (line 69)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: dec R15                ; done them all yet?
DEBUG:BABY ASSEMBLER:No match found for instruction dec (line 70)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:Stripped line: jnz  GetNextByte     ; if no, do some more
DEBUG:BABY ASSEMBLER:Stripped line: FinishedCopyingTableToRAM
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: Done        jz     Done           ;  halt here
DEBUG:BABY ASSEMBLER:Stripped line: jnz    Done
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: ;           End of main code
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: ;           Subroutines
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ; none used here
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: ;           End of all Subroutines
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: ;           Definition of Program Data Memory
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: ORG   0xE000
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: PatternTable1           ; this is just an example table (or perhaps more
DEBUG:BABY ASSEMBLER:No match found for instruction PatternTable1 (line 97)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:Stripped line: Row0    DB  'E'   ; familar concept is this is an array of bytes
DEBUG:BABY ASSEMBLER:Stripped line: Row1    DB  'C'   ; containing 8 bytes as defined here)
DEBUG:BABY ASSEMBLER:Stripped line: Row2    DB  'E'   ;  PatternTable1 is the name of the table (or array)
DEBUG:BABY ASSEMBLER:Stripped line: Row3    DB  '-'
DEBUG:BABY ASSEMBLER:Stripped line: Row4    DB  '3'
DEBUG:BABY ASSEMBLER:Stripped line: Row5    DB  '3'
DEBUG:BABY ASSEMBLER:Stripped line: Row6    DB  '6'
DEBUG:BABY ASSEMBLER:Stripped line: Row7    DB  '2'
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: PatternTable2  DB "EXAMPLES"
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: ;           Interrupt Vectors
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ORG     0xFFFE                  ; MSP430 RESET Vector
DEBUG:BABY ASSEMBLER:Stripped line: DW      RESET                   ; establishes the label RESET as
DEBUG:BABY ASSEMBLER:No match found for instruction DW (line 114)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xFFFE into old val None
DEBUG:BABY ASSEMBLER:Stripped line: ; the starting point
DEBUG:BABY ASSEMBLER:Stripped line: 
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: END                             ; END of all code for this program
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
DEBUG:BABY ASSEMBLER:Stripped line: ;-------------------------------------------------------------------------------
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0200',
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xE000',
 'Row0': '0xE000',
 'Row1': '0xe001',
 'Row2': '0xe002',
 'Row3': '0xe003',
 'Row4': '0xe004',
 'Row5': '0xe005',
 'Row6': '0xe006',
 'Row7': '0xe007'}
WARNING:BABY ASSEMBLER:Column contains NoneType
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0200                                                \n'
 '31         0200                  ;define a table (array) of 8 bytes\n'
 '32         0202                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         0200                  ; bytes in RAM space          \n'
 '34         0200                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         0200                  ;  literally "Current address minus\n'
 '36         0200                  ;  address of BufferTable"    \n'
 '37         0200                                                \n'
 '38         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         C000                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         C000                                                \n'
 '46         c002                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         C000                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         c002                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         c002                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         c006                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         c002                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         c002                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c004                  jnz    Done                   \n'
 '76         C000                                                \n'
 '77         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         C000                  ;           End of main code  \n'
 '79         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         C000                                                \n'
 '81         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         C000                  ;           Subroutines       \n'
 '83         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         C000                                                \n'
 '85         C000                  ; none used here              \n'
 '86         C000                                                \n'
 '87         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         C000                  ;           End of all Subroutines\n'
 '89         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         C000                                                \n'
 '91         C000                                                \n'
 '92         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         C000                  ;           Definition of Program Data '
 'Memory\n'
 '94         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         E000                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e001                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e002                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e003                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e004                  Row3    DB  '-'               \n"
 "102        e005                  Row4    DB  '3'               \n"
 "103        e006                  Row5    DB  '3'               \n"
 "104        e007                  Row6    DB  '6'               \n"
 "105        e008                  Row7    DB  '2'               \n"
 '106        E000                                                \n'
 '107        e001                  PatternTable2  DB "EXAMPLES"  \n'
 '108        E000                                                \n'
 '109        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '110        E000                  ;           Interrupt Vectors \n'
 '111        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '112        E000                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        FFFE                  DW      RESET                   ; '
 'establishes the label RESET as\n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:No match found for instruction inc (line 55)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:No match found for instruction dec (line 56)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:No match found for instruction inc (line 68)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:No match found for instruction inc (line 69)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:No match found for instruction dec (line 70)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:No match found for instruction PatternTable1 (line 97)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:No match found for instruction DW (line 114)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xFFFE into old val None
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0200',
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xE000',
 'Row0': '0xE000',
 'Row1': '0xe001',
 'Row2': '0xe002',
 'Row3': '0xe003',
 'Row4': '0xe004',
 'Row5': '0xe005',
 'Row6': '0xe006',
 'Row7': '0xe007'}
WARNING:BABY ASSEMBLER:Column contains NoneType
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0200                                                \n'
 '31         0200                  ;define a table (array) of 8 bytes\n'
 '32         0202                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         0200                  ; bytes in RAM space          \n'
 '34         0200                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         0200                  ;  literally "Current address minus\n'
 '36         0200                  ;  address of BufferTable"    \n'
 '37         0200                                                \n'
 '38         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         C000                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         C000                                                \n'
 '46         c002                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         C000                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         c002                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         c002                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         c006                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         c002                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         c002                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c004                  jnz    Done                   \n'
 '76         C000                                                \n'
 '77         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         C000                  ;           End of main code  \n'
 '79         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         C000                                                \n'
 '81         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         C000                  ;           Subroutines       \n'
 '83         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         C000                                                \n'
 '85         C000                  ; none used here              \n'
 '86         C000                                                \n'
 '87         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         C000                  ;           End of all Subroutines\n'
 '89         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         C000                                                \n'
 '91         C000                                                \n'
 '92         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         C000                  ;           Definition of Program Data '
 'Memory\n'
 '94         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         E000                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e001                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e002                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e003                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e004                  Row3    DB  '-'               \n"
 "102        e005                  Row4    DB  '3'               \n"
 "103        e006                  Row5    DB  '3'               \n"
 "104        e007                  Row6    DB  '6'               \n"
 "105        e008                  Row7    DB  '2'               \n"
 '106        E000                                                \n'
 '107        e001                  PatternTable2  DB "EXAMPLES"  \n'
 '108        E000                                                \n'
 '109        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '110        E000                  ;           Interrupt Vectors \n'
 '111        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '112        E000                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        FFFE                  DW      RESET                   ; '
 'establishes the label RESET as\n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:No match found for instruction inc (line 55)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:No match found for instruction dec (line 56)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:No match found for instruction inc (line 68)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:No match found for instruction inc (line 69)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:No match found for instruction dec (line 70)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:No match found for instruction PatternTable1 (line 97)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:No match found for instruction DW (line 114)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xFFFE into old val None
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0200',
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xE000',
 'Row0': '0xE000',
 'Row1': '0xe001',
 'Row2': '0xe002',
 'Row3': '0xe003',
 'Row4': '0xe004',
 'Row5': '0xe005',
 'Row6': '0xe006',
 'Row7': '0xe007'}
WARNING:BABY ASSEMBLER:Column contains NoneType
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0200                                                \n'
 '31         0200                  ;define a table (array) of 8 bytes\n'
 '32         0202                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         0200                  ; bytes in RAM space          \n'
 '34         0200                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         0200                  ;  literally "Current address minus\n'
 '36         0200                  ;  address of BufferTable"    \n'
 '37         0200                                                \n'
 '38         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         C000                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         C000                                                \n'
 '46         c002                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         C000                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         c002                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         c002                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         c006                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         c002                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         c002                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c004                  jnz    Done                   \n'
 '76         C000                                                \n'
 '77         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         C000                  ;           End of main code  \n'
 '79         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         C000                                                \n'
 '81         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         C000                  ;           Subroutines       \n'
 '83         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         C000                                                \n'
 '85         C000                  ; none used here              \n'
 '86         C000                                                \n'
 '87         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         C000                  ;           End of all Subroutines\n'
 '89         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         C000                                                \n'
 '91         C000                                                \n'
 '92         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         C000                  ;           Definition of Program Data '
 'Memory\n'
 '94         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         E000                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e001                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e002                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e003                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e004                  Row3    DB  '-'               \n"
 "102        e005                  Row4    DB  '3'               \n"
 "103        e006                  Row5    DB  '3'               \n"
 "104        e007                  Row6    DB  '6'               \n"
 "105        e008                  Row7    DB  '2'               \n"
 '106        E000                                                \n'
 '107        e001                  PatternTable2  DB "EXAMPLES"  \n'
 '108        E000                                                \n'
 '109        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '110        E000                  ;           Interrupt Vectors \n'
 '111        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '112        E000                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        FFFE                  DW      RESET                   ; '
 'establishes the label RESET as\n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:No match found for instruction inc (line 55)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:No match found for instruction dec (line 56)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:No match found for instruction inc (line 68)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:No match found for instruction inc (line 69)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:No match found for instruction dec (line 70)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:No match found for instruction PatternTable1 (line 97)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:No match found for instruction DW (line 114)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xFFFE into old val None
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0200',
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xE000',
 'Row0': '0xE000',
 'Row1': '0xe001',
 'Row2': '0xe002',
 'Row3': '0xe003',
 'Row4': '0xe004',
 'Row5': '0xe005',
 'Row6': '0xe006',
 'Row7': '0xe007'}
WARNING:BABY ASSEMBLER:Column contains NoneType
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0200                                                \n'
 '31         0200                  ;define a table (array) of 8 bytes\n'
 '32         0202                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         0200                  ; bytes in RAM space          \n'
 '34         0200                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         0200                  ;  literally "Current address minus\n'
 '36         0200                  ;  address of BufferTable"    \n'
 '37         0200                                                \n'
 '38         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         C000                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         C000                                                \n'
 '46         c002                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         C000                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         c002                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         c002                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         c006                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         c002                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         c002                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c004                  jnz    Done                   \n'
 '76         C000                                                \n'
 '77         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         C000                  ;           End of main code  \n'
 '79         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         C000                                                \n'
 '81         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         C000                  ;           Subroutines       \n'
 '83         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         C000                                                \n'
 '85         C000                  ; none used here              \n'
 '86         C000                                                \n'
 '87         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         C000                  ;           End of all Subroutines\n'
 '89         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         C000                                                \n'
 '91         C000                                                \n'
 '92         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         C000                  ;           Definition of Program Data '
 'Memory\n'
 '94         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         E000                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e001                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e002                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e003                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e004                  Row3    DB  '-'               \n"
 "102        e005                  Row4    DB  '3'               \n"
 "103        e006                  Row5    DB  '3'               \n"
 "104        e007                  Row6    DB  '6'               \n"
 "105        e008                  Row7    DB  '2'               \n"
 '106        E000                                                \n'
 '107        e001                  PatternTable2  DB "EXAMPLES"  \n'
 '108        E000                                                \n'
 '109        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '110        E000                  ;           Interrupt Vectors \n'
 '111        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '112        E000                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        FFFE                  DW      RESET                   ; '
 'establishes the label RESET as\n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:No match found for instruction inc (line 55)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:No match found for instruction dec (line 56)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:No match found for instruction inc (line 68)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:No match found for instruction inc (line 69)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:No match found for instruction dec (line 70)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:No match found for instruction PatternTable1 (line 97)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:No match found for instruction DW (line 114)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xFFFE into old val None
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0200',
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xE000',
 'Row0': '0xE000',
 'Row1': '0xe001',
 'Row2': '0xe002',
 'Row3': '0xe003',
 'Row4': '0xe004',
 'Row5': '0xe005',
 'Row6': '0xe006',
 'Row7': '0xe007'}
WARNING:BABY ASSEMBLER:Column contains NoneType
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0200                                                \n'
 '31         0200                  ;define a table (array) of 8 bytes\n'
 '32         0202                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         0200                  ; bytes in RAM space          \n'
 '34         0200                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         0200                  ;  literally "Current address minus\n'
 '36         0200                  ;  address of BufferTable"    \n'
 '37         0200                                                \n'
 '38         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         C000                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         C000                                                \n'
 '46         c002                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         C000                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         c002                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         c002                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         c006                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         c002                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         c002                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c004                  jnz    Done                   \n'
 '76         C000                                                \n'
 '77         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         C000                  ;           End of main code  \n'
 '79         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         C000                                                \n'
 '81         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         C000                  ;           Subroutines       \n'
 '83         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         C000                                                \n'
 '85         C000                  ; none used here              \n'
 '86         C000                                                \n'
 '87         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         C000                  ;           End of all Subroutines\n'
 '89         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         C000                                                \n'
 '91         C000                                                \n'
 '92         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         C000                  ;           Definition of Program Data '
 'Memory\n'
 '94         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         E000                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e001                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e002                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e003                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e004                  Row3    DB  '-'               \n"
 "102        e005                  Row4    DB  '3'               \n"
 "103        e006                  Row5    DB  '3'               \n"
 "104        e007                  Row6    DB  '6'               \n"
 "105        e008                  Row7    DB  '2'               \n"
 '106        E000                                                \n'
 '107        e001                  PatternTable2  DB "EXAMPLES"  \n'
 '108        E000                                                \n'
 '109        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '110        E000                  ;           Interrupt Vectors \n'
 '111        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '112        E000                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        FFFE                  DW      RESET                   ; '
 'establishes the label RESET as\n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:No match found for instruction inc (line 55)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:No match found for instruction dec (line 56)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:No match found for instruction inc (line 68)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:No match found for instruction inc (line 69)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:No match found for instruction dec (line 70)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:No match found for instruction PatternTable1 (line 97)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:No match found for instruction DW (line 114)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xFFFE into old val None
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0200',
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xE000',
 'Row0': '0xE000',
 'Row1': '0xe001',
 'Row2': '0xe002',
 'Row3': '0xe003',
 'Row4': '0xe004',
 'Row5': '0xe005',
 'Row6': '0xe006',
 'Row7': '0xe007'}
WARNING:BABY ASSEMBLER:Column contains NoneType
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0200                                                \n'
 '31         0200                  ;define a table (array) of 8 bytes\n'
 '32         0202                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         0200                  ; bytes in RAM space          \n'
 '34         0200                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         0200                  ;  literally "Current address minus\n'
 '36         0200                  ;  address of BufferTable"    \n'
 '37         0200                                                \n'
 '38         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         C000                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         C000                                                \n'
 '46         c002                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         C000                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         c002                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         c002                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         c006                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         c002                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         c002                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c004                  jnz    Done                   \n'
 '76         C000                                                \n'
 '77         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         C000                  ;           End of main code  \n'
 '79         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         C000                                                \n'
 '81         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         C000                  ;           Subroutines       \n'
 '83         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         C000                                                \n'
 '85         C000                  ; none used here              \n'
 '86         C000                                                \n'
 '87         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         C000                  ;           End of all Subroutines\n'
 '89         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         C000                                                \n'
 '91         C000                                                \n'
 '92         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         C000                  ;           Definition of Program Data '
 'Memory\n'
 '94         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         E000                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e001                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e002                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e003                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e004                  Row3    DB  '-'               \n"
 "102        e005                  Row4    DB  '3'               \n"
 "103        e006                  Row5    DB  '3'               \n"
 "104        e007                  Row6    DB  '6'               \n"
 "105        e008                  Row7    DB  '2'               \n"
 '106        E000                                                \n'
 '107        e001                  PatternTable2  DB "EXAMPLES"  \n'
 '108        E000                                                \n'
 '109        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '110        E000                  ;           Interrupt Vectors \n'
 '111        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '112        E000                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        FFFE                  DW      RESET                   ; '
 'establishes the label RESET as\n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:No match found for instruction inc (line 55)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:No match found for instruction dec (line 56)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:No match found for instruction inc (line 68)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:No match found for instruction inc (line 69)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:No match found for instruction dec (line 70)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:No match found for instruction PatternTable1 (line 97)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:No match found for instruction DW (line 114)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xFFFE into old val None
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0200',
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xE000',
 'Row0': '0xE000',
 'Row1': '0xe001',
 'Row2': '0xe002',
 'Row3': '0xe003',
 'Row4': '0xe004',
 'Row5': '0xe005',
 'Row6': '0xe006',
 'Row7': '0xe007'}
WARNING:BABY ASSEMBLER:Column contains NoneType
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0200                                                \n'
 '31         0200                  ;define a table (array) of 8 bytes\n'
 '32         0202                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         0200                  ; bytes in RAM space          \n'
 '34         0200                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         0200                  ;  literally "Current address minus\n'
 '36         0200                  ;  address of BufferTable"    \n'
 '37         0200                                                \n'
 '38         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         C000                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         C000                                                \n'
 '46         c002                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         C000                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         c002                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         c002                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         c006                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         c002                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         c002                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c004                  jnz    Done                   \n'
 '76         C000                                                \n'
 '77         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         C000                  ;           End of main code  \n'
 '79         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         C000                                                \n'
 '81         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         C000                  ;           Subroutines       \n'
 '83         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         C000                                                \n'
 '85         C000                  ; none used here              \n'
 '86         C000                                                \n'
 '87         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         C000                  ;           End of all Subroutines\n'
 '89         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         C000                                                \n'
 '91         C000                                                \n'
 '92         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         C000                  ;           Definition of Program Data '
 'Memory\n'
 '94         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         E000                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e001                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e002                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e003                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e004                  Row3    DB  '-'               \n"
 "102        e005                  Row4    DB  '3'               \n"
 "103        e006                  Row5    DB  '3'               \n"
 "104        e007                  Row6    DB  '6'               \n"
 "105        e008                  Row7    DB  '2'               \n"
 '106        E000                                                \n'
 '107        e001                  PatternTable2  DB "EXAMPLES"  \n'
 '108        E000                                                \n'
 '109        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '110        E000                  ;           Interrupt Vectors \n'
 '111        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '112        E000                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        FFFE                  DW      RESET                   ; '
 'establishes the label RESET as\n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:No match found for instruction inc (line 55)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:No match found for instruction dec (line 56)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:No match found for instruction inc (line 68)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:No match found for instruction inc (line 69)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:No match found for instruction dec (line 70)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:No match found for instruction PatternTable1 (line 97)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:No match found for instruction DW (line 114)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xFFFE into old val None
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0200',
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xE000',
 'Row0': '0xE000',
 'Row1': '0xe001',
 'Row2': '0xe002',
 'Row3': '0xe003',
 'Row4': '0xe004',
 'Row5': '0xe005',
 'Row6': '0xe006',
 'Row7': '0xe007'}
WARNING:BABY ASSEMBLER:Column contains NoneType
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0200                                                \n'
 '31         0200                  ;define a table (array) of 8 bytes\n'
 '32         0202                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         0200                  ; bytes in RAM space          \n'
 '34         0200                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         0200                  ;  literally "Current address minus\n'
 '36         0200                  ;  address of BufferTable"    \n'
 '37         0200                                                \n'
 '38         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         C000                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         C000                                                \n'
 '46         c002                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         C000                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         c002                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         c002                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         c006                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         c002                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         c002                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c004                  jnz    Done                   \n'
 '76         C000                                                \n'
 '77         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         C000                  ;           End of main code  \n'
 '79         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         C000                                                \n'
 '81         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         C000                  ;           Subroutines       \n'
 '83         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         C000                                                \n'
 '85         C000                  ; none used here              \n'
 '86         C000                                                \n'
 '87         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         C000                  ;           End of all Subroutines\n'
 '89         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         C000                                                \n'
 '91         C000                                                \n'
 '92         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         C000                  ;           Definition of Program Data '
 'Memory\n'
 '94         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         E000                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e001                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e002                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e003                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e004                  Row3    DB  '-'               \n"
 "102        e005                  Row4    DB  '3'               \n"
 "103        e006                  Row5    DB  '3'               \n"
 "104        e007                  Row6    DB  '6'               \n"
 "105        e008                  Row7    DB  '2'               \n"
 '106        E000                                                \n'
 '107        e001                  PatternTable2  DB "EXAMPLES"  \n'
 '108        E000                                                \n'
 '109        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '110        E000                  ;           Interrupt Vectors \n'
 '111        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '112        E000                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        FFFE                  DW      RESET                   ; '
 'establishes the label RESET as\n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:No match found for instruction inc (line 55)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:No match found for instruction dec (line 56)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:No match found for instruction inc (line 68)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:No match found for instruction inc (line 69)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:No match found for instruction dec (line 70)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:No match found for instruction PatternTable1 (line 97)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:No match found for instruction DW (line 114)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xFFFE into old val None
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0200',
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xE000',
 'Row0': '0xE000',
 'Row1': '0xe001',
 'Row2': '0xe002',
 'Row3': '0xe003',
 'Row4': '0xe004',
 'Row5': '0xe005',
 'Row6': '0xe006',
 'Row7': '0xe007'}
WARNING:BABY ASSEMBLER:Column contains NoneType
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0200                                                \n'
 '31         0200                  ;define a table (array) of 8 bytes\n'
 '32         0202                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         0200                  ; bytes in RAM space          \n'
 '34         0200                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         0200                  ;  literally "Current address minus\n'
 '36         0200                  ;  address of BufferTable"    \n'
 '37         0200                                                \n'
 '38         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         C000                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         C000                                                \n'
 '46         c002                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         C000                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         c002                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         c002                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         c006                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         c002                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         c002                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c004                  jnz    Done                   \n'
 '76         C000                                                \n'
 '77         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         C000                  ;           End of main code  \n'
 '79         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         C000                                                \n'
 '81         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         C000                  ;           Subroutines       \n'
 '83         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         C000                                                \n'
 '85         C000                  ; none used here              \n'
 '86         C000                                                \n'
 '87         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         C000                  ;           End of all Subroutines\n'
 '89         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         C000                                                \n'
 '91         C000                                                \n'
 '92         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         C000                  ;           Definition of Program Data '
 'Memory\n'
 '94         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         E000                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e001                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e002                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e003                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e004                  Row3    DB  '-'               \n"
 "102        e005                  Row4    DB  '3'               \n"
 "103        e006                  Row5    DB  '3'               \n"
 "104        e007                  Row6    DB  '6'               \n"
 "105        e008                  Row7    DB  '2'               \n"
 '106        E000                                                \n'
 '107        e001                  PatternTable2  DB "EXAMPLES"  \n'
 '108        E000                                                \n'
 '109        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '110        E000                  ;           Interrupt Vectors \n'
 '111        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '112        E000                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        FFFE                  DW      RESET                   ; '
 'establishes the label RESET as\n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:No match found for instruction inc (line 55)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:No match found for instruction dec (line 56)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:No match found for instruction inc (line 68)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:No match found for instruction inc (line 69)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:No match found for instruction dec (line 70)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:No match found for instruction PatternTable1 (line 97)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:No match found for instruction DW (line 114)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xFFFE into old val None
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0200',
 'Count': '0x0201',
 'LoopCount': '0x0200',
 'PatternTable2': '0xE000',
 'Row0': '0xE000',
 'Row1': '0xe001',
 'Row2': '0xe002',
 'Row3': '0xe003',
 'Row4': '0xe004',
 'Row5': '0xe005',
 'Row6': '0xe006',
 'Row7': '0xe007'}
WARNING:BABY ASSEMBLER:Column contains NoneType
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0200                                                \n'
 '31         0200                  ;define a table (array) of 8 bytes\n'
 '32         0202                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         0200                  ; bytes in RAM space          \n'
 '34         0200                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         0200                  ;  literally "Current address minus\n'
 '36         0200                  ;  address of BufferTable"    \n'
 '37         0200                                                \n'
 '38         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         C000                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         C000                                                \n'
 '46         c002                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         C000                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         c002                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         c002                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         c002                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         c004                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         c006                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         c002                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         c002                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c004                  jnz    Done                   \n'
 '76         C000                                                \n'
 '77         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         C000                  ;           End of main code  \n'
 '79         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         C000                                                \n'
 '81         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         C000                  ;           Subroutines       \n'
 '83         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         C000                                                \n'
 '85         C000                  ; none used here              \n'
 '86         C000                                                \n'
 '87         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         C000                  ;           End of all Subroutines\n'
 '89         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         C000                                                \n'
 '91         C000                                                \n'
 '92         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         C000                  ;           Definition of Program Data '
 'Memory\n'
 '94         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         E000                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e001                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e002                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e003                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e004                  Row3    DB  '-'               \n"
 "102        e005                  Row4    DB  '3'               \n"
 "103        e006                  Row5    DB  '3'               \n"
 "104        e007                  Row6    DB  '6'               \n"
 "105        e008                  Row7    DB  '2'               \n"
 '106        E000                                                \n'
 '107        e001                  PatternTable2  DB "EXAMPLES"  \n'
 '108        E000                                                \n'
 '109        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '110        E000                  ;           Interrupt Vectors \n'
 '111        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '112        E000                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        FFFE                  DW      RESET                   ; '
 'establishes the label RESET as\n')
WARNING:BABY ASSEMBLER:Column contains NoneType
WARNING:BABY ASSEMBLER:Column contains NoneType
WARNING:BABY ASSEMBLER:Column contains NoneType
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 1)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 2)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 3)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 4)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 5)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 6)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 7)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 8)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 9)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 10)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 11)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 12)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 13)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 14)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 15)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 16)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 17)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 18)
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 1)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 2)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 3)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 4)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 5)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 6)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 7)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 8)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 9)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 10)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 11)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 12)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 13)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 14)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 15)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 16)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 17)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 18)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 19)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 20)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 21)
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 1)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 2)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 3)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 4)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 5)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 6)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 7)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 8)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 9)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 10)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 11)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 12)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 13)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 14)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 15)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 16)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 17)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 18)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 19)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 20)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 21)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 23)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 24)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 25)
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 1)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 2)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 3)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 4)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 5)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 6)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 7)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 8)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 9)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 10)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 11)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 12)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 13)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 14)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 15)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 16)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 17)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 18)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 19)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 20)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 21)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 23)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 24)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 25)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 31)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200 (line 33)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200 (line 34)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200 (line 35)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200 (line 36)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 38)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000 (line 40)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000 (line 41)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000 (line 42)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xc002 into old val 0xC000 (line 44)
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 1)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 2)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 3)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 4)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 5)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 6)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 7)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 8)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 9)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 10)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 11)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 12)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 13)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 14)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 15)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 16)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 17)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 18)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 19)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 20)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 21)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 23)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 24)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 25)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 31)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200 (line 33)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200 (line 34)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200 (line 35)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200 (line 36)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 38)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000 (line 40)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000 (line 41)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000 (line 42)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xc002 into old val 0xC000 (line 44)
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 1)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 2)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 3)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 4)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 5)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 6)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 7)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 8)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 9)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 10)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 11)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 12)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 13)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 14)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 15)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 16)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 17)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 18)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 19)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 20)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 21)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 23)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 24)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 25)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 31)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200 (line 33)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200 (line 34)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200 (line 35)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200 (line 36)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 38)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000 (line 40)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000 (line 41)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000 (line 42)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xc002 into old val 0xC000 (line 44)
CRITICAL:BABY ASSEMBLER:Could not parse through instruction: "['MainProgramStart']" at line 48
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
INFO:BABY ASSEMBLER:None
INFO:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 1)
INFO:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 2)
INFO:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 3)
INFO:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 4)
INFO:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 5)
INFO:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 6)
INFO:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 7)
INFO:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 8)
INFO:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 9)
INFO:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 10)
INFO:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 11)
INFO:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 12)
INFO:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 13)
INFO:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 14)
INFO:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 15)
INFO:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 16)
INFO:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 17)
INFO:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 18)
INFO:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 19)
INFO:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 20)
INFO:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 21)
INFO:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 23)
INFO:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 24)
INFO:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 25)
INFO:BABY ASSEMBLER:None
INFO:BABY ASSEMBLER:None
INFO:BABY ASSEMBLER:None
INFO:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 31)
INFO:BABY ASSEMBLER:None
INFO:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200 (line 33)
INFO:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200 (line 34)
INFO:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200 (line 35)
INFO:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200 (line 36)
INFO:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 38)
INFO:BABY ASSEMBLER:None
INFO:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000 (line 40)
INFO:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000 (line 41)
INFO:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000 (line 42)
INFO:BABY ASSEMBLER:None
INFO:BABY ASSEMBLER:None
DEBUG:BABY ASSEMBLER:Storing previous val of 0xc002 into old val 0xC000 (line 44)
INFO:BABY ASSEMBLER:None
INFO:BABY ASSEMBLER:None
CRITICAL:BABY ASSEMBLER:Could not parse through instruction: "['MainProgramStart']" at line 48
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
INFO:BABY ASSEMBLER:Operation ;------------------------------------------------------------------------------- is None in opcode bits
INFO:BABY ASSEMBLER:Operation ; is None in opcode bits
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 1)
INFO:BABY ASSEMBLER:Operation ; is None in opcode bits
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 2)
INFO:BABY ASSEMBLER:Operation ; is None in opcode bits
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 3)
INFO:BABY ASSEMBLER:Operation ; is None in opcode bits
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 4)
INFO:BABY ASSEMBLER:Operation ; is None in opcode bits
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 5)
INFO:BABY ASSEMBLER:Operation ; is None in opcode bits
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 6)
INFO:BABY ASSEMBLER:Operation ; is None in opcode bits
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 7)
INFO:BABY ASSEMBLER:Operation ; is None in opcode bits
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 8)
INFO:BABY ASSEMBLER:Operation ; is None in opcode bits
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 9)
INFO:BABY ASSEMBLER:Operation ; is None in opcode bits
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 10)
INFO:BABY ASSEMBLER:Operation ; is None in opcode bits
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 11)
INFO:BABY ASSEMBLER:Operation ; is None in opcode bits
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 12)
INFO:BABY ASSEMBLER:Operation ; is None in opcode bits
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 13)
INFO:BABY ASSEMBLER:Operation ; is None in opcode bits
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 14)
INFO:BABY ASSEMBLER:Operation ;------------------------------------------------------------------------------- is None in opcode bits
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 15)
INFO:BABY ASSEMBLER:Operation ; is None in opcode bits
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 16)
INFO:BABY ASSEMBLER:Operation ;------------------------------------------------------------------------------- is None in opcode bits
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 17)
INFO:BABY ASSEMBLER:Operation ; is None in opcode bits
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 18)
INFO:BABY ASSEMBLER:Operation WDTCTL is None in opcode bits
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 19)
INFO:BABY ASSEMBLER:Operation WDTPW is None in opcode bits
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 20)
INFO:BABY ASSEMBLER:Operation WDTHOLD is None in opcode bits
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 21)
INFO:BABY ASSEMBLER:Operation ;------------------------------------------------------------------------------- is None in opcode bits
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 23)
INFO:BABY ASSEMBLER:Operation ; is None in opcode bits
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 24)
INFO:BABY ASSEMBLER:Operation ;------------------------------------------------------------------------------- is None in opcode bits
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 25)
INFO:BABY ASSEMBLER:Operation ORG is None in opcode bits
INFO:BABY ASSEMBLER:Operation LoopCount is None in opcode bits
INFO:BABY ASSEMBLER:Operation Count is None in opcode bits
INFO:BABY ASSEMBLER:Operation ;define is None in opcode bits
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 31)
INFO:BABY ASSEMBLER:Operation BufferTable: is None in opcode bits
INFO:BABY ASSEMBLER:Operation ; is None in opcode bits
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200 (line 33)
INFO:BABY ASSEMBLER:Operation BufferTableSize is None in opcode bits
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200 (line 34)
INFO:BABY ASSEMBLER:Operation ; is None in opcode bits
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200 (line 35)
INFO:BABY ASSEMBLER:Operation ; is None in opcode bits
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200 (line 36)
INFO:BABY ASSEMBLER:Operation ;------------------------------------------------------------------------------- is None in opcode bits
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 38)
INFO:BABY ASSEMBLER:Operation ORG is None in opcode bits
INFO:BABY ASSEMBLER:Operation ; is None in opcode bits
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000 (line 40)
INFO:BABY ASSEMBLER:Operation ; is None in opcode bits
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000 (line 41)
INFO:BABY ASSEMBLER:Operation ;------------------------------------------------------------------------------- is None in opcode bits
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000 (line 42)
INFO:BABY ASSEMBLER:Operation RESET is None in opcode bits
INFO:BABY ASSEMBLER:Operation ; is None in opcode bits
DEBUG:BABY ASSEMBLER:Storing previous val of 0xc002 into old val 0xC000 (line 44)
INFO:BABY ASSEMBLER:Operation StopWDT is None in opcode bits
INFO:BABY ASSEMBLER:Operation MainProgramStart is None in opcode bits
CRITICAL:BABY ASSEMBLER:Could not parse through instruction: "['MainProgramStart']" at line 48
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
INFO:BABY ASSEMBLER:Operation ;------------------------------------------------------------------------------- is None in opcode bits
CRITICAL:BABY ASSEMBLER:Could not parse through instruction: "[';-------------------------------------------------------------------------------']" at line 0
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
INFO:BABY ASSEMBLER:Operation ;------------------------------------------------------------------------------- is None in opcode bits
INFO:BABY ASSEMBLER:Operation ; is None in opcode bits
CRITICAL:BABY ASSEMBLER:Could not parse through instruction: "[';', 'Test', 'source', 'code', 'for', 'Advanced', 'Microcontroller', 'Software']" at line 1
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
INFO:BABY ASSEMBLER:Operation ;------------------------------------------------------------------------------- is None in opcode bits
INFO:BABY ASSEMBLER:Operation ; is None in opcode bits
CRITICAL:BABY ASSEMBLER:Could not parse through instruction: "[';', 'Test', 'source', 'code', 'for', 'Advanced', 'Microcontroller', 'Software']" at line 1
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
CRITICAL:BABY ASSEMBLER:Could not parse through instruction: "[';', 'Test', 'source', 'code', 'for', 'Advanced', 'Microcontroller', 'Software']" at line 1
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
INFO:BABY ASSEMBLER:here
INFO:BABY ASSEMBLER:here
CRITICAL:BABY ASSEMBLER:Could not parse through instruction: "[';', 'Test', 'source', 'code', 'for', 'Advanced', 'Microcontroller', 'Software']" at line 1
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
CRITICAL:BABY ASSEMBLER:Could not parse through instruction: "[';-------------------------------------------------------------------------------']" at line 0
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
CRITICAL:BABY ASSEMBLER:Could not parse through instruction: "[';-------------------------------------------------------------------------------']" at line 0
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
CRITICAL:BABY ASSEMBLER:Could not parse through instruction: "[';-------------------------------------------------------------------------------']" at line 0
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:No match found for instruction ; (line 1)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
CRITICAL:BABY ASSEMBLER:Could not parse through instruction: "[';']" at line 2
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:No found previous value. Continuing.
DEBUG:BABY ASSEMBLER:No match found for instruction ; (line 1)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
CRITICAL:BABY ASSEMBLER:Could not parse through instruction: "[';']" at line 2
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:No found previous value. Continuing.
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 19)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 20)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 21)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200 (line 34)
CRITICAL:BABY ASSEMBLER:Could not parse through instruction: "['MainProgramStart']" at line 48
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:No found previous value. Continuing.
CRITICAL:BABY ASSEMBLER:Could not parse through instruction: "[';', 'Test', 'source', 'code', 'for', 'Advanced', 'Microcontroller', 'Software']" at line 1
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:No found previous value. Continuing.
CRITICAL:BABY ASSEMBLER:Could not parse through instruction: "[';', 'Test', 'source', 'code', 'for', 'Advanced', 'Microcontroller', 'Software']" at line 1
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:No found previous value. Continuing.
DEBUG:BABY ASSEMBLER:No match found for instruction ; (line 1)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
CRITICAL:BABY ASSEMBLER:Could not parse through instruction: "[';']" at line 2
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Found comment at line 0
DEBUG:BABY ASSEMBLER:No found previous value. Continuing.
DEBUG:BABY ASSEMBLER:Found comment at line 1
DEBUG:BABY ASSEMBLER:No match found for instruction ; (line 1)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Found comment at line 2
CRITICAL:BABY ASSEMBLER:Could not parse through instruction: "[';']" at line 2
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Found comment at line 0
DEBUG:BABY ASSEMBLER:No found previous value. Continuing.
DEBUG:BABY ASSEMBLER:Found comment at line 1
DEBUG:BABY ASSEMBLER:Found comment at line 2
DEBUG:BABY ASSEMBLER:Found comment at line 3
DEBUG:BABY ASSEMBLER:Found comment at line 4
DEBUG:BABY ASSEMBLER:Found comment at line 5
DEBUG:BABY ASSEMBLER:Found comment at line 6
DEBUG:BABY ASSEMBLER:Found comment at line 7
DEBUG:BABY ASSEMBLER:Found comment at line 8
DEBUG:BABY ASSEMBLER:Found comment at line 9
DEBUG:BABY ASSEMBLER:Found comment at line 10
DEBUG:BABY ASSEMBLER:Found comment at line 11
DEBUG:BABY ASSEMBLER:Found comment at line 12
DEBUG:BABY ASSEMBLER:Found comment at line 13
DEBUG:BABY ASSEMBLER:Found comment at line 14
DEBUG:BABY ASSEMBLER:Found comment at line 15
DEBUG:BABY ASSEMBLER:Found comment at line 16
DEBUG:BABY ASSEMBLER:Found comment at line 17
DEBUG:BABY ASSEMBLER:Found comment at line 18
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 19)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 20)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 21)
DEBUG:BABY ASSEMBLER:Found comment at line 23
DEBUG:BABY ASSEMBLER:Found comment at line 24
DEBUG:BABY ASSEMBLER:Found comment at line 25
DEBUG:BABY ASSEMBLER:Found comment at line 31
DEBUG:BABY ASSEMBLER:Found comment at line 33
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200 (line 34)
DEBUG:BABY ASSEMBLER:Found comment at line 35
DEBUG:BABY ASSEMBLER:Found comment at line 36
DEBUG:BABY ASSEMBLER:Found comment at line 38
DEBUG:BABY ASSEMBLER:Found comment at line 40
DEBUG:BABY ASSEMBLER:Found comment at line 41
DEBUG:BABY ASSEMBLER:Found comment at line 42
DEBUG:BABY ASSEMBLER:Found comment at line 44
CRITICAL:BABY ASSEMBLER:Could not parse through instruction: "['MainProgramStart']" at line 48
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Found comment at line 0
DEBUG:BABY ASSEMBLER:No found previous value. Continuing.
DEBUG:BABY ASSEMBLER:Found comment at line 1
DEBUG:BABY ASSEMBLER:Found comment at line 2
DEBUG:BABY ASSEMBLER:Found comment at line 3
DEBUG:BABY ASSEMBLER:Found comment at line 4
DEBUG:BABY ASSEMBLER:Found comment at line 5
DEBUG:BABY ASSEMBLER:Found comment at line 6
DEBUG:BABY ASSEMBLER:Found comment at line 7
DEBUG:BABY ASSEMBLER:Found comment at line 8
DEBUG:BABY ASSEMBLER:Found comment at line 9
DEBUG:BABY ASSEMBLER:Found comment at line 10
DEBUG:BABY ASSEMBLER:Found comment at line 11
DEBUG:BABY ASSEMBLER:Found comment at line 12
DEBUG:BABY ASSEMBLER:Found comment at line 13
DEBUG:BABY ASSEMBLER:Found comment at line 14
DEBUG:BABY ASSEMBLER:Found comment at line 15
DEBUG:BABY ASSEMBLER:Found comment at line 16
DEBUG:BABY ASSEMBLER:Found comment at line 17
DEBUG:BABY ASSEMBLER:Found comment at line 18
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTCTL
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 19)
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTPW
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 20)
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTHOLD
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 21)
DEBUG:BABY ASSEMBLER:Found comment at line 23
DEBUG:BABY ASSEMBLER:Found comment at line 24
DEBUG:BABY ASSEMBLER:Found comment at line 25
DEBUG:BABY ASSEMBLER:No other matches so far for instruction LoopCount
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Count
DEBUG:BABY ASSEMBLER:Found comment at line 31
DEBUG:BABY ASSEMBLER:No other matches so far for instruction BufferTable:
DEBUG:BABY ASSEMBLER:Found comment at line 33
DEBUG:BABY ASSEMBLER:No other matches so far for instruction BufferTableSize
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200 (line 34)
DEBUG:BABY ASSEMBLER:Found comment at line 35
DEBUG:BABY ASSEMBLER:Found comment at line 36
DEBUG:BABY ASSEMBLER:Found comment at line 38
DEBUG:BABY ASSEMBLER:Found comment at line 40
DEBUG:BABY ASSEMBLER:Found comment at line 41
DEBUG:BABY ASSEMBLER:Found comment at line 42
DEBUG:BABY ASSEMBLER:No other matches so far for instruction RESET
DEBUG:BABY ASSEMBLER:Found comment at line 44
DEBUG:BABY ASSEMBLER:No other matches so far for instruction StopWDT
DEBUG:BABY ASSEMBLER:No other matches so far for instruction MainProgramStart
CRITICAL:BABY ASSEMBLER:Could not parse through instruction: "['MainProgramStart']" at line 48
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Found comment at line 0
DEBUG:BABY ASSEMBLER:No found previous value. Continuing.
DEBUG:BABY ASSEMBLER:Found comment at line 1
DEBUG:BABY ASSEMBLER:Found comment at line 2
DEBUG:BABY ASSEMBLER:Found comment at line 3
DEBUG:BABY ASSEMBLER:Found comment at line 4
DEBUG:BABY ASSEMBLER:Found comment at line 5
DEBUG:BABY ASSEMBLER:Found comment at line 6
DEBUG:BABY ASSEMBLER:Found comment at line 7
DEBUG:BABY ASSEMBLER:Found comment at line 8
DEBUG:BABY ASSEMBLER:Found comment at line 9
DEBUG:BABY ASSEMBLER:Found comment at line 10
DEBUG:BABY ASSEMBLER:Found comment at line 11
DEBUG:BABY ASSEMBLER:Found comment at line 12
DEBUG:BABY ASSEMBLER:Found comment at line 13
DEBUG:BABY ASSEMBLER:Found comment at line 14
DEBUG:BABY ASSEMBLER:Found comment at line 15
DEBUG:BABY ASSEMBLER:Found comment at line 16
DEBUG:BABY ASSEMBLER:Found comment at line 17
DEBUG:BABY ASSEMBLER:Found comment at line 18
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTCTL
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 19)
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTPW
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 20)
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTHOLD
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 21)
DEBUG:BABY ASSEMBLER:Found comment at line 23
DEBUG:BABY ASSEMBLER:Found comment at line 24
DEBUG:BABY ASSEMBLER:Found comment at line 25
DEBUG:BABY ASSEMBLER:No other matches so far for instruction LoopCount
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Count
DEBUG:BABY ASSEMBLER:Found comment at line 31
DEBUG:BABY ASSEMBLER:No other matches so far for instruction BufferTable:
DEBUG:BABY ASSEMBLER:Found comment at line 33
DEBUG:BABY ASSEMBLER:No other matches so far for instruction BufferTableSize
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200 (line 34)
DEBUG:BABY ASSEMBLER:Found comment at line 35
DEBUG:BABY ASSEMBLER:Found comment at line 36
DEBUG:BABY ASSEMBLER:Found comment at line 38
DEBUG:BABY ASSEMBLER:Found comment at line 40
DEBUG:BABY ASSEMBLER:Found comment at line 41
DEBUG:BABY ASSEMBLER:Found comment at line 42
DEBUG:BABY ASSEMBLER:No other matches so far for instruction RESET
DEBUG:BABY ASSEMBLER:Found comment at line 44
DEBUG:BABY ASSEMBLER:No other matches so far for instruction StopWDT
DEBUG:BABY ASSEMBLER:No other matches so far for instruction MainProgramStart
CRITICAL:BABY ASSEMBLER:Could not parse through instruction: "['MainProgramStart']" at line 48
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Found comment at line 0
DEBUG:BABY ASSEMBLER:No found previous value. Continuing.
DEBUG:BABY ASSEMBLER:Found comment at line 1
DEBUG:BABY ASSEMBLER:Found comment at line 2
DEBUG:BABY ASSEMBLER:Found comment at line 3
DEBUG:BABY ASSEMBLER:Found comment at line 4
DEBUG:BABY ASSEMBLER:Found comment at line 5
DEBUG:BABY ASSEMBLER:Found comment at line 6
DEBUG:BABY ASSEMBLER:Found comment at line 7
DEBUG:BABY ASSEMBLER:Found comment at line 8
DEBUG:BABY ASSEMBLER:Found comment at line 9
DEBUG:BABY ASSEMBLER:Found comment at line 10
DEBUG:BABY ASSEMBLER:Found comment at line 11
DEBUG:BABY ASSEMBLER:Found comment at line 12
DEBUG:BABY ASSEMBLER:Found comment at line 13
DEBUG:BABY ASSEMBLER:Found comment at line 14
DEBUG:BABY ASSEMBLER:Found comment at line 15
DEBUG:BABY ASSEMBLER:Found comment at line 16
DEBUG:BABY ASSEMBLER:Found comment at line 17
DEBUG:BABY ASSEMBLER:Found comment at line 18
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTCTL
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 19)
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTPW
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 20)
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTHOLD
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 21)
DEBUG:BABY ASSEMBLER:Found comment at line 23
DEBUG:BABY ASSEMBLER:Found comment at line 24
DEBUG:BABY ASSEMBLER:Found comment at line 25
DEBUG:BABY ASSEMBLER:No other matches so far for instruction LoopCount
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Count
DEBUG:BABY ASSEMBLER:Found comment at line 31
DEBUG:BABY ASSEMBLER:No other matches so far for instruction BufferTable:
DEBUG:BABY ASSEMBLER:Found comment at line 33
DEBUG:BABY ASSEMBLER:No other matches so far for instruction BufferTableSize
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200 (line 34)
DEBUG:BABY ASSEMBLER:Found comment at line 35
DEBUG:BABY ASSEMBLER:Found comment at line 36
DEBUG:BABY ASSEMBLER:Found comment at line 38
DEBUG:BABY ASSEMBLER:Found comment at line 40
DEBUG:BABY ASSEMBLER:Found comment at line 41
DEBUG:BABY ASSEMBLER:Found comment at line 42
DEBUG:BABY ASSEMBLER:No other matches so far for instruction RESET
DEBUG:BABY ASSEMBLER:Found comment at line 44
DEBUG:BABY ASSEMBLER:No other matches so far for instruction StopWDT
DEBUG:BABY ASSEMBLER:No other matches so far for instruction MainProgramStart
CRITICAL:BABY ASSEMBLER:Could not parse through instruction: "['MainProgramStart']" at line 48
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Found comment at line 0
DEBUG:BABY ASSEMBLER:No found previous value. Continuing.
DEBUG:BABY ASSEMBLER:Found comment at line 1
DEBUG:BABY ASSEMBLER:Found comment at line 2
DEBUG:BABY ASSEMBLER:Found comment at line 3
DEBUG:BABY ASSEMBLER:Found comment at line 4
DEBUG:BABY ASSEMBLER:Found comment at line 5
DEBUG:BABY ASSEMBLER:Found comment at line 6
DEBUG:BABY ASSEMBLER:Found comment at line 7
DEBUG:BABY ASSEMBLER:Found comment at line 8
DEBUG:BABY ASSEMBLER:Found comment at line 9
DEBUG:BABY ASSEMBLER:Found comment at line 10
DEBUG:BABY ASSEMBLER:Found comment at line 11
DEBUG:BABY ASSEMBLER:Found comment at line 12
DEBUG:BABY ASSEMBLER:Found comment at line 13
DEBUG:BABY ASSEMBLER:Found comment at line 14
DEBUG:BABY ASSEMBLER:Found comment at line 15
DEBUG:BABY ASSEMBLER:Found comment at line 16
DEBUG:BABY ASSEMBLER:Found comment at line 17
DEBUG:BABY ASSEMBLER:Found comment at line 18
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTCTL
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 19)
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTPW
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 20)
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTHOLD
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 21)
DEBUG:BABY ASSEMBLER:Found comment at line 23
DEBUG:BABY ASSEMBLER:Found comment at line 24
DEBUG:BABY ASSEMBLER:Found comment at line 25
DEBUG:BABY ASSEMBLER:No other matches so far for instruction LoopCount
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Count
DEBUG:BABY ASSEMBLER:Found comment at line 31
DEBUG:BABY ASSEMBLER:No other matches so far for instruction BufferTable:
DEBUG:BABY ASSEMBLER:Found comment at line 33
DEBUG:BABY ASSEMBLER:No other matches so far for instruction BufferTableSize
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200 (line 34)
DEBUG:BABY ASSEMBLER:Found comment at line 35
DEBUG:BABY ASSEMBLER:Found comment at line 36
DEBUG:BABY ASSEMBLER:Found comment at line 38
DEBUG:BABY ASSEMBLER:Found comment at line 40
DEBUG:BABY ASSEMBLER:Found comment at line 41
DEBUG:BABY ASSEMBLER:Found comment at line 42
DEBUG:BABY ASSEMBLER:No other matches so far for instruction RESET
DEBUG:BABY ASSEMBLER:Found comment at line 44
DEBUG:BABY ASSEMBLER:No other matches so far for instruction StopWDT
DEBUG:BABY ASSEMBLER:No other matches so far for instruction MainProgramStart
CRITICAL:BABY ASSEMBLER:Could not parse through instruction: "['MainProgramStart']" at line 48
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Found comment at line 0
DEBUG:BABY ASSEMBLER:No found previous value. Continuing.
DEBUG:BABY ASSEMBLER:Found comment at line 1
DEBUG:BABY ASSEMBLER:Found comment at line 2
DEBUG:BABY ASSEMBLER:Found comment at line 3
DEBUG:BABY ASSEMBLER:Found comment at line 4
DEBUG:BABY ASSEMBLER:Found comment at line 5
DEBUG:BABY ASSEMBLER:Found comment at line 6
DEBUG:BABY ASSEMBLER:Found comment at line 7
DEBUG:BABY ASSEMBLER:Found comment at line 8
DEBUG:BABY ASSEMBLER:Found comment at line 9
DEBUG:BABY ASSEMBLER:Found comment at line 10
DEBUG:BABY ASSEMBLER:Found comment at line 11
DEBUG:BABY ASSEMBLER:Found comment at line 12
DEBUG:BABY ASSEMBLER:Found comment at line 13
DEBUG:BABY ASSEMBLER:Found comment at line 14
DEBUG:BABY ASSEMBLER:Found comment at line 15
DEBUG:BABY ASSEMBLER:Found comment at line 16
DEBUG:BABY ASSEMBLER:Found comment at line 17
DEBUG:BABY ASSEMBLER:Found comment at line 18
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTCTL
DEBUG:BABY ASSEMBLER:Got to here.
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 19)
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTPW
DEBUG:BABY ASSEMBLER:Got to here.
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 20)
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTHOLD
DEBUG:BABY ASSEMBLER:Got to here.
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 21)
DEBUG:BABY ASSEMBLER:Found comment at line 23
DEBUG:BABY ASSEMBLER:Found comment at line 24
DEBUG:BABY ASSEMBLER:Found comment at line 25
DEBUG:BABY ASSEMBLER:No other matches so far for instruction LoopCount
DEBUG:BABY ASSEMBLER:Got to here.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Count
DEBUG:BABY ASSEMBLER:Got to here.
DEBUG:BABY ASSEMBLER:Found comment at line 31
DEBUG:BABY ASSEMBLER:No other matches so far for instruction BufferTable:
DEBUG:BABY ASSEMBLER:Got to here.
DEBUG:BABY ASSEMBLER:Found comment at line 33
DEBUG:BABY ASSEMBLER:No other matches so far for instruction BufferTableSize
DEBUG:BABY ASSEMBLER:Got to here.
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200 (line 34)
DEBUG:BABY ASSEMBLER:Found comment at line 35
DEBUG:BABY ASSEMBLER:Found comment at line 36
DEBUG:BABY ASSEMBLER:Found comment at line 38
DEBUG:BABY ASSEMBLER:Found comment at line 40
DEBUG:BABY ASSEMBLER:Found comment at line 41
DEBUG:BABY ASSEMBLER:Found comment at line 42
DEBUG:BABY ASSEMBLER:No other matches so far for instruction RESET
DEBUG:BABY ASSEMBLER:Got to here.
DEBUG:BABY ASSEMBLER:Found comment at line 44
DEBUG:BABY ASSEMBLER:No other matches so far for instruction StopWDT
DEBUG:BABY ASSEMBLER:Got to here.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction MainProgramStart
DEBUG:BABY ASSEMBLER:Got to here.
CRITICAL:BABY ASSEMBLER:Could not parse through instruction: "['MainProgramStart']" at line 48
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Found comment at line 0
DEBUG:BABY ASSEMBLER:No found previous value. Continuing.
DEBUG:BABY ASSEMBLER:Found comment at line 1
DEBUG:BABY ASSEMBLER:Found comment at line 2
DEBUG:BABY ASSEMBLER:Found comment at line 3
DEBUG:BABY ASSEMBLER:Found comment at line 4
DEBUG:BABY ASSEMBLER:Found comment at line 5
DEBUG:BABY ASSEMBLER:Found comment at line 6
DEBUG:BABY ASSEMBLER:Found comment at line 7
DEBUG:BABY ASSEMBLER:Found comment at line 8
DEBUG:BABY ASSEMBLER:Found comment at line 9
DEBUG:BABY ASSEMBLER:Found comment at line 10
DEBUG:BABY ASSEMBLER:Found comment at line 11
DEBUG:BABY ASSEMBLER:Found comment at line 12
DEBUG:BABY ASSEMBLER:Found comment at line 13
DEBUG:BABY ASSEMBLER:Found comment at line 14
DEBUG:BABY ASSEMBLER:Found comment at line 15
DEBUG:BABY ASSEMBLER:Found comment at line 16
DEBUG:BABY ASSEMBLER:Found comment at line 17
DEBUG:BABY ASSEMBLER:Found comment at line 18
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTCTL
DEBUG:BABY ASSEMBLER:Got to here.
DEBUG:BABY ASSEMBLER:Got to here 2
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 19)
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTPW
DEBUG:BABY ASSEMBLER:Got to here.
DEBUG:BABY ASSEMBLER:Got to here 2
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 20)
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTHOLD
DEBUG:BABY ASSEMBLER:Got to here.
DEBUG:BABY ASSEMBLER:Got to here 2
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 21)
DEBUG:BABY ASSEMBLER:Found comment at line 23
DEBUG:BABY ASSEMBLER:Found comment at line 24
DEBUG:BABY ASSEMBLER:Found comment at line 25
DEBUG:BABY ASSEMBLER:No other matches so far for instruction LoopCount
DEBUG:BABY ASSEMBLER:Got to here.
DEBUG:BABY ASSEMBLER:Got to here 2
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Count
DEBUG:BABY ASSEMBLER:Got to here.
DEBUG:BABY ASSEMBLER:Got to here 2
DEBUG:BABY ASSEMBLER:Found comment at line 31
DEBUG:BABY ASSEMBLER:No other matches so far for instruction BufferTable:
DEBUG:BABY ASSEMBLER:Got to here.
DEBUG:BABY ASSEMBLER:Got to here 2
DEBUG:BABY ASSEMBLER:Found comment at line 33
DEBUG:BABY ASSEMBLER:No other matches so far for instruction BufferTableSize
DEBUG:BABY ASSEMBLER:Got to here.
DEBUG:BABY ASSEMBLER:Got to here 2
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200 (line 34)
DEBUG:BABY ASSEMBLER:Found comment at line 35
DEBUG:BABY ASSEMBLER:Found comment at line 36
DEBUG:BABY ASSEMBLER:Found comment at line 38
DEBUG:BABY ASSEMBLER:Found comment at line 40
DEBUG:BABY ASSEMBLER:Found comment at line 41
DEBUG:BABY ASSEMBLER:Found comment at line 42
DEBUG:BABY ASSEMBLER:No other matches so far for instruction RESET
DEBUG:BABY ASSEMBLER:Got to here.
DEBUG:BABY ASSEMBLER:Got to here 2
DEBUG:BABY ASSEMBLER:Found comment at line 44
DEBUG:BABY ASSEMBLER:No other matches so far for instruction StopWDT
DEBUG:BABY ASSEMBLER:Got to here.
DEBUG:BABY ASSEMBLER:Got to here 2
DEBUG:BABY ASSEMBLER:No other matches so far for instruction MainProgramStart
DEBUG:BABY ASSEMBLER:Got to here.
DEBUG:BABY ASSEMBLER:Got to here 2
CRITICAL:BABY ASSEMBLER:Could not parse through instruction: "['MainProgramStart']" at line 48
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Found comment at line 0
DEBUG:BABY ASSEMBLER:No found previous value. Continuing.
DEBUG:BABY ASSEMBLER:Found comment at line 1
DEBUG:BABY ASSEMBLER:Found comment at line 2
DEBUG:BABY ASSEMBLER:Found comment at line 3
DEBUG:BABY ASSEMBLER:Found comment at line 4
DEBUG:BABY ASSEMBLER:Found comment at line 5
DEBUG:BABY ASSEMBLER:Found comment at line 6
DEBUG:BABY ASSEMBLER:Found comment at line 7
DEBUG:BABY ASSEMBLER:Found comment at line 8
DEBUG:BABY ASSEMBLER:Found comment at line 9
DEBUG:BABY ASSEMBLER:Found comment at line 10
DEBUG:BABY ASSEMBLER:Found comment at line 11
DEBUG:BABY ASSEMBLER:Found comment at line 12
DEBUG:BABY ASSEMBLER:Found comment at line 13
DEBUG:BABY ASSEMBLER:Found comment at line 14
DEBUG:BABY ASSEMBLER:Found comment at line 15
DEBUG:BABY ASSEMBLER:Found comment at line 16
DEBUG:BABY ASSEMBLER:Found comment at line 17
DEBUG:BABY ASSEMBLER:Found comment at line 18
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTCTL
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 19)
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTPW
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 20)
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTHOLD
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 21)
DEBUG:BABY ASSEMBLER:Found comment at line 23
DEBUG:BABY ASSEMBLER:Found comment at line 24
DEBUG:BABY ASSEMBLER:Found comment at line 25
DEBUG:BABY ASSEMBLER:No other matches so far for instruction LoopCount
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Count
DEBUG:BABY ASSEMBLER:Found comment at line 31
DEBUG:BABY ASSEMBLER:No other matches so far for instruction BufferTable:
DEBUG:BABY ASSEMBLER:Found comment at line 33
DEBUG:BABY ASSEMBLER:No other matches so far for instruction BufferTableSize
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0202 into old val 0x0200 (line 34)
DEBUG:BABY ASSEMBLER:Found comment at line 35
DEBUG:BABY ASSEMBLER:Found comment at line 36
DEBUG:BABY ASSEMBLER:Found comment at line 38
DEBUG:BABY ASSEMBLER:Found comment at line 40
DEBUG:BABY ASSEMBLER:Found comment at line 41
DEBUG:BABY ASSEMBLER:Found comment at line 42
DEBUG:BABY ASSEMBLER:No other matches so far for instruction RESET
DEBUG:BABY ASSEMBLER:Found comment at line 44
DEBUG:BABY ASSEMBLER:No other matches so far for instruction StopWDT
DEBUG:BABY ASSEMBLER:No other matches so far for instruction MainProgramStart
DEBUG:BABY ASSEMBLER:Found comment at line 49
DEBUG:BABY ASSEMBLER:No match found for instruction mov (line 50)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xc002
DEBUG:BABY ASSEMBLER:No match found for instruction mov (line 51)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xc002
DEBUG:BABY ASSEMBLER:No other matches so far for instruction ClearNextByte
DEBUG:BABY ASSEMBLER:No match found for instruction mov.b (line 53)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xc002
DEBUG:BABY ASSEMBLER:No other matches so far for instruction inc
DEBUG:BABY ASSEMBLER:No match found for instruction inc (line 55)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:No other matches so far for instruction dec
DEBUG:BABY ASSEMBLER:No match found for instruction dec (line 56)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:No match found for instruction jnz (line 57)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xc002
DEBUG:BABY ASSEMBLER:No other matches so far for instruction FinishedClearingRAMtable
DEBUG:BABY ASSEMBLER:Found comment at line 60
DEBUG:BABY ASSEMBLER:No match found for instruction mov (line 61)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xc002
DEBUG:BABY ASSEMBLER:No match found for instruction mov (line 62)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xc002
DEBUG:BABY ASSEMBLER:No match found for instruction mov (line 63)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xc002
DEBUG:BABY ASSEMBLER:No other matches so far for instruction GetNextByte
DEBUG:BABY ASSEMBLER:No match found for instruction mov.b (line 66)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xc002
DEBUG:BABY ASSEMBLER:No other matches so far for instruction inc
DEBUG:BABY ASSEMBLER:No match found for instruction inc (line 68)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:No other matches so far for instruction inc
DEBUG:BABY ASSEMBLER:No match found for instruction inc (line 69)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:No other matches so far for instruction dec
DEBUG:BABY ASSEMBLER:No match found for instruction dec (line 70)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:No match found for instruction jnz (line 71)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xc002
DEBUG:BABY ASSEMBLER:No other matches so far for instruction FinishedCopyingTableToRAM
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Done
DEBUG:BABY ASSEMBLER:No match found for instruction jnz (line 75)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xc002 into old val 0xc004
DEBUG:BABY ASSEMBLER:Found comment at line 77
DEBUG:BABY ASSEMBLER:Found comment at line 78
DEBUG:BABY ASSEMBLER:Found comment at line 79
DEBUG:BABY ASSEMBLER:Found comment at line 81
DEBUG:BABY ASSEMBLER:Found comment at line 82
DEBUG:BABY ASSEMBLER:Found comment at line 83
DEBUG:BABY ASSEMBLER:Found comment at line 85
DEBUG:BABY ASSEMBLER:Found comment at line 87
DEBUG:BABY ASSEMBLER:Found comment at line 88
DEBUG:BABY ASSEMBLER:Found comment at line 89
DEBUG:BABY ASSEMBLER:Found comment at line 92
DEBUG:BABY ASSEMBLER:Found comment at line 93
DEBUG:BABY ASSEMBLER:Found comment at line 94
DEBUG:BABY ASSEMBLER:No other matches so far for instruction PatternTable1
DEBUG:BABY ASSEMBLER:No match found for instruction PatternTable1 (line 97)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row0
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row1
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row2
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row3
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row4
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row5
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row6
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row7
DEBUG:BABY ASSEMBLER:No other matches so far for instruction PatternTable2
DEBUG:BABY ASSEMBLER:Found comment at line 109
DEBUG:BABY ASSEMBLER:Found comment at line 110
DEBUG:BABY ASSEMBLER:Found comment at line 111
DEBUG:BABY ASSEMBLER:No other matches so far for instruction DW
DEBUG:BABY ASSEMBLER:No match found for instruction DW (line 114)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xFFFE into old val None
DEBUG:BABY ASSEMBLER:Found comment at line 115
DEBUG:BABY ASSEMBLER:Found comment at line 117
WARNING:BABY ASSEMBLER:Previous address was None
DEBUG:BABY ASSEMBLER:No other matches so far for instruction END
DEBUG:BABY ASSEMBLER:Found comment at line 119
DEBUG:BABY ASSEMBLER:Found comment at line 120
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0200',
 'BufferTableSize': '0x0202',
 'ClearNextByte': '0xC000',
 'Count': '0x0201',
 'DW': '0xFFFE',
 'Done': '0xC000',
 'END': None,
 'FinishedClearingRAMtable': '0xC000',
 'FinishedCopyingTableToRAM': '0xC000',
 'GetNextByte': '0xC000',
 'LoopCount': '0x0200',
 'MainProgramStart': '0xC000',
 'PatternTable1': '0xE000',
 'PatternTable2': '0xE000',
 'RESET': '0xC000',
 'Row0': '0xE000',
 'Row1': '0xe001',
 'Row2': '0xe002',
 'Row3': '0xe003',
 'Row4': '0xe004',
 'Row5': '0xe005',
 'Row6': '0xe006',
 'Row7': '0xe007',
 'StopWDT': '0xC000',
 'WDTCTL': '0x0200',
 'WDTHOLD': '0x0200',
 'WDTPW': '0x0200',
 'dec': '0xC000',
 'inc': '0xC000'}
WARNING:BABY ASSEMBLER:Column contains NoneType
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0200                                                \n'
 '31         0200                  ;define a table (array) of 8 bytes\n'
 '32         0202                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         0202                  ; bytes in RAM space          \n'
 '34         0202                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         0202                  ;  literally "Current address minus\n'
 '36         0202                  ;  address of BufferTable"    \n'
 '37         0200                                                \n'
 '38         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         C000                                                \n'
 '46         c002                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         C000                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         C000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c002                  jnz    Done                   \n'
 '76         C000                                                \n'
 '77         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         C000                  ;           End of main code  \n'
 '79         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         C000                                                \n'
 '81         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         C000                  ;           Subroutines       \n'
 '83         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         C000                                                \n'
 '85         C000                  ; none used here              \n'
 '86         C000                                                \n'
 '87         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         C000                  ;           End of all Subroutines\n'
 '89         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         C000                                                \n'
 '91         C000                                                \n'
 '92         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         C000                  ;           Definition of Program Data '
 'Memory\n'
 '94         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         E000                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e001                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e002                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e003                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e004                  Row3    DB  '-'               \n"
 "102        e005                  Row4    DB  '3'               \n"
 "103        e006                  Row5    DB  '3'               \n"
 "104        e007                  Row6    DB  '6'               \n"
 "105        e008                  Row7    DB  '2'               \n"
 '106        E000                                                \n'
 '107        e001                  PatternTable2  DB "EXAMPLES"  \n'
 '108        E000                                                \n'
 '109        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '110        E000                  ;           Interrupt Vectors \n'
 '111        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '112        E000                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        FFFE                  DW      RESET                   ; '
 'establishes the label RESET as\n'
 '115        FFFE                  ; the starting point          \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Found comment at line 0
DEBUG:BABY ASSEMBLER:No found previous value. Continuing.
DEBUG:BABY ASSEMBLER:Found comment at line 1
DEBUG:BABY ASSEMBLER:Found comment at line 2
DEBUG:BABY ASSEMBLER:Found comment at line 3
DEBUG:BABY ASSEMBLER:Found comment at line 4
DEBUG:BABY ASSEMBLER:Found comment at line 5
DEBUG:BABY ASSEMBLER:Found comment at line 6
DEBUG:BABY ASSEMBLER:Found comment at line 7
DEBUG:BABY ASSEMBLER:Found comment at line 8
DEBUG:BABY ASSEMBLER:Found comment at line 9
DEBUG:BABY ASSEMBLER:Found comment at line 10
DEBUG:BABY ASSEMBLER:Found comment at line 11
DEBUG:BABY ASSEMBLER:Found comment at line 12
DEBUG:BABY ASSEMBLER:Found comment at line 13
DEBUG:BABY ASSEMBLER:Found comment at line 14
DEBUG:BABY ASSEMBLER:Found comment at line 15
DEBUG:BABY ASSEMBLER:Found comment at line 16
DEBUG:BABY ASSEMBLER:Found comment at line 17
DEBUG:BABY ASSEMBLER:Found comment at line 18
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTCTL
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 19)
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTPW
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 20)
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTHOLD
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 21)
DEBUG:BABY ASSEMBLER:Found comment at line 23
DEBUG:BABY ASSEMBLER:Found comment at line 24
DEBUG:BABY ASSEMBLER:Found comment at line 25
DEBUG:BABY ASSEMBLER:No other matches so far for instruction LoopCount
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Count
DEBUG:BABY ASSEMBLER:Found comment at line 31
DEBUG:BABY ASSEMBLER:No other matches so far for instruction BufferTable:
DEBUG:BABY ASSEMBLER:No match found for instruction BufferTable: (line 32)
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200
DEBUG:BABY ASSEMBLER:Found comment at line 33
DEBUG:BABY ASSEMBLER:No other matches so far for instruction BufferTableSize
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 34)
DEBUG:BABY ASSEMBLER:Found comment at line 35
DEBUG:BABY ASSEMBLER:Found comment at line 36
DEBUG:BABY ASSEMBLER:Found comment at line 38
DEBUG:BABY ASSEMBLER:Found comment at line 40
DEBUG:BABY ASSEMBLER:Found comment at line 41
DEBUG:BABY ASSEMBLER:Found comment at line 42
DEBUG:BABY ASSEMBLER:No other matches so far for instruction RESET
DEBUG:BABY ASSEMBLER:Found comment at line 44
DEBUG:BABY ASSEMBLER:No other matches so far for instruction StopWDT
DEBUG:BABY ASSEMBLER:No other matches so far for instruction MainProgramStart
DEBUG:BABY ASSEMBLER:Found comment at line 49
DEBUG:BABY ASSEMBLER:No match found for instruction mov (line 50)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xc002
DEBUG:BABY ASSEMBLER:No match found for instruction mov (line 51)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xc002
DEBUG:BABY ASSEMBLER:No other matches so far for instruction ClearNextByte
DEBUG:BABY ASSEMBLER:No match found for instruction mov.b (line 53)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xc002
DEBUG:BABY ASSEMBLER:No other matches so far for instruction inc
DEBUG:BABY ASSEMBLER:No match found for instruction inc (line 55)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:No other matches so far for instruction dec
DEBUG:BABY ASSEMBLER:No match found for instruction dec (line 56)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:No match found for instruction jnz (line 57)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xc002
DEBUG:BABY ASSEMBLER:No other matches so far for instruction FinishedClearingRAMtable
DEBUG:BABY ASSEMBLER:Found comment at line 60
DEBUG:BABY ASSEMBLER:No match found for instruction mov (line 61)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xc002
DEBUG:BABY ASSEMBLER:No match found for instruction mov (line 62)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xc002
DEBUG:BABY ASSEMBLER:No match found for instruction mov (line 63)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xc002
DEBUG:BABY ASSEMBLER:No other matches so far for instruction GetNextByte
DEBUG:BABY ASSEMBLER:No match found for instruction mov.b (line 66)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xc002
DEBUG:BABY ASSEMBLER:No other matches so far for instruction inc
DEBUG:BABY ASSEMBLER:No match found for instruction inc (line 68)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:No other matches so far for instruction inc
DEBUG:BABY ASSEMBLER:No match found for instruction inc (line 69)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:No other matches so far for instruction dec
DEBUG:BABY ASSEMBLER:No match found for instruction dec (line 70)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:No match found for instruction jnz (line 71)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xc002
DEBUG:BABY ASSEMBLER:No other matches so far for instruction FinishedCopyingTableToRAM
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Done
DEBUG:BABY ASSEMBLER:No match found for instruction jnz (line 75)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xc002 into old val 0xc004
DEBUG:BABY ASSEMBLER:Found comment at line 77
DEBUG:BABY ASSEMBLER:Found comment at line 78
DEBUG:BABY ASSEMBLER:Found comment at line 79
DEBUG:BABY ASSEMBLER:Found comment at line 81
DEBUG:BABY ASSEMBLER:Found comment at line 82
DEBUG:BABY ASSEMBLER:Found comment at line 83
DEBUG:BABY ASSEMBLER:Found comment at line 85
DEBUG:BABY ASSEMBLER:Found comment at line 87
DEBUG:BABY ASSEMBLER:Found comment at line 88
DEBUG:BABY ASSEMBLER:Found comment at line 89
DEBUG:BABY ASSEMBLER:Found comment at line 92
DEBUG:BABY ASSEMBLER:Found comment at line 93
DEBUG:BABY ASSEMBLER:Found comment at line 94
DEBUG:BABY ASSEMBLER:No other matches so far for instruction PatternTable1
DEBUG:BABY ASSEMBLER:No match found for instruction PatternTable1 (line 97)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row0
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row1
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row2
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row3
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row4
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row5
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row6
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row7
DEBUG:BABY ASSEMBLER:No other matches so far for instruction PatternTable2
DEBUG:BABY ASSEMBLER:Found comment at line 109
DEBUG:BABY ASSEMBLER:Found comment at line 110
DEBUG:BABY ASSEMBLER:Found comment at line 111
DEBUG:BABY ASSEMBLER:No other matches so far for instruction DW
DEBUG:BABY ASSEMBLER:No match found for instruction DW (line 114)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xFFFE into old val None
DEBUG:BABY ASSEMBLER:Found comment at line 115
DEBUG:BABY ASSEMBLER:Found comment at line 117
WARNING:BABY ASSEMBLER:Previous address was None
DEBUG:BABY ASSEMBLER:No other matches so far for instruction END
DEBUG:BABY ASSEMBLER:Found comment at line 119
DEBUG:BABY ASSEMBLER:Found comment at line 120
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0200',
 'BufferTableSize': '0x0200',
 'ClearNextByte': '0xC000',
 'Count': '0x0201',
 'DW': '0xFFFE',
 'Done': '0xC000',
 'END': None,
 'FinishedClearingRAMtable': '0xC000',
 'FinishedCopyingTableToRAM': '0xC000',
 'GetNextByte': '0xC000',
 'LoopCount': '0x0200',
 'MainProgramStart': '0xC000',
 'PatternTable1': '0xE000',
 'PatternTable2': '0xE000',
 'RESET': '0xC000',
 'Row0': '0xE000',
 'Row1': '0xe001',
 'Row2': '0xe002',
 'Row3': '0xe003',
 'Row4': '0xe004',
 'Row5': '0xe005',
 'Row6': '0xe006',
 'Row7': '0xe007',
 'StopWDT': '0xC000',
 'WDTCTL': '0x0200',
 'WDTHOLD': '0x0200',
 'WDTPW': '0x0200',
 'dec': '0xC000',
 'inc': '0xC000'}
WARNING:BABY ASSEMBLER:Column contains NoneType
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0200                                                \n'
 '31         0200                  ;define a table (array) of 8 bytes\n'
 '32         0200                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         0200                  ; bytes in RAM space          \n'
 '34         0200                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         0200                  ;  literally "Current address minus\n'
 '36         0200                  ;  address of BufferTable"    \n'
 '37         0200                                                \n'
 '38         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         C000                                                \n'
 '46         c002                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         C000                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         C000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c002                  jnz    Done                   \n'
 '76         C000                                                \n'
 '77         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         C000                  ;           End of main code  \n'
 '79         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         C000                                                \n'
 '81         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         C000                  ;           Subroutines       \n'
 '83         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         C000                                                \n'
 '85         C000                  ; none used here              \n'
 '86         C000                                                \n'
 '87         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         C000                  ;           End of all Subroutines\n'
 '89         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         C000                                                \n'
 '91         C000                                                \n'
 '92         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         C000                  ;           Definition of Program Data '
 'Memory\n'
 '94         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         E000                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e001                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e002                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e003                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e004                  Row3    DB  '-'               \n"
 "102        e005                  Row4    DB  '3'               \n"
 "103        e006                  Row5    DB  '3'               \n"
 "104        e007                  Row6    DB  '6'               \n"
 "105        e008                  Row7    DB  '2'               \n"
 '106        E000                                                \n'
 '107        e001                  PatternTable2  DB "EXAMPLES"  \n'
 '108        E000                                                \n'
 '109        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '110        E000                  ;           Interrupt Vectors \n'
 '111        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '112        E000                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        FFFE                  DW      RESET                   ; '
 'establishes the label RESET as\n'
 '115        FFFE                  ; the starting point          \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Found comment at line 0
DEBUG:BABY ASSEMBLER:No found previous value. Continuing.
DEBUG:BABY ASSEMBLER:Found comment at line 1
DEBUG:BABY ASSEMBLER:Found comment at line 2
DEBUG:BABY ASSEMBLER:Found comment at line 3
DEBUG:BABY ASSEMBLER:Found comment at line 4
DEBUG:BABY ASSEMBLER:Found comment at line 5
DEBUG:BABY ASSEMBLER:Found comment at line 6
DEBUG:BABY ASSEMBLER:Found comment at line 7
DEBUG:BABY ASSEMBLER:Found comment at line 8
DEBUG:BABY ASSEMBLER:Found comment at line 9
DEBUG:BABY ASSEMBLER:Found comment at line 10
DEBUG:BABY ASSEMBLER:Found comment at line 11
DEBUG:BABY ASSEMBLER:Found comment at line 12
DEBUG:BABY ASSEMBLER:Found comment at line 13
DEBUG:BABY ASSEMBLER:Found comment at line 14
DEBUG:BABY ASSEMBLER:Found comment at line 15
DEBUG:BABY ASSEMBLER:Found comment at line 16
DEBUG:BABY ASSEMBLER:Found comment at line 17
DEBUG:BABY ASSEMBLER:Found comment at line 18
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTCTL
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 19)
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTPW
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 20)
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTHOLD
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 21)
DEBUG:BABY ASSEMBLER:Found comment at line 23
DEBUG:BABY ASSEMBLER:Found comment at line 24
DEBUG:BABY ASSEMBLER:Found comment at line 25
DEBUG:BABY ASSEMBLER:No other matches so far for instruction LoopCount
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Count
DEBUG:BABY ASSEMBLER:Found comment at line 31
DEBUG:BABY ASSEMBLER:No other matches so far for instruction BufferTable:
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Found comment at line 0
DEBUG:BABY ASSEMBLER:No found previous value. Continuing.
DEBUG:BABY ASSEMBLER:Found comment at line 1
DEBUG:BABY ASSEMBLER:Found comment at line 2
DEBUG:BABY ASSEMBLER:Found comment at line 3
DEBUG:BABY ASSEMBLER:Found comment at line 4
DEBUG:BABY ASSEMBLER:Found comment at line 5
DEBUG:BABY ASSEMBLER:Found comment at line 6
DEBUG:BABY ASSEMBLER:Found comment at line 7
DEBUG:BABY ASSEMBLER:Found comment at line 8
DEBUG:BABY ASSEMBLER:Found comment at line 9
DEBUG:BABY ASSEMBLER:Found comment at line 10
DEBUG:BABY ASSEMBLER:Found comment at line 11
DEBUG:BABY ASSEMBLER:Found comment at line 12
DEBUG:BABY ASSEMBLER:Found comment at line 13
DEBUG:BABY ASSEMBLER:Found comment at line 14
DEBUG:BABY ASSEMBLER:Found comment at line 15
DEBUG:BABY ASSEMBLER:Found comment at line 16
DEBUG:BABY ASSEMBLER:Found comment at line 17
DEBUG:BABY ASSEMBLER:Found comment at line 18
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTCTL
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 19)
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTPW
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 20)
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTHOLD
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 21)
DEBUG:BABY ASSEMBLER:Found comment at line 23
DEBUG:BABY ASSEMBLER:Found comment at line 24
DEBUG:BABY ASSEMBLER:Found comment at line 25
DEBUG:BABY ASSEMBLER:No other matches so far for instruction LoopCount
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Count
DEBUG:BABY ASSEMBLER:Found comment at line 31
DEBUG:BABY ASSEMBLER:No other matches so far for instruction BufferTable:
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Found comment at line 0
DEBUG:BABY ASSEMBLER:No found previous value. Continuing.
DEBUG:BABY ASSEMBLER:Found comment at line 1
DEBUG:BABY ASSEMBLER:Found comment at line 2
DEBUG:BABY ASSEMBLER:Found comment at line 3
DEBUG:BABY ASSEMBLER:Found comment at line 4
DEBUG:BABY ASSEMBLER:Found comment at line 5
DEBUG:BABY ASSEMBLER:Found comment at line 6
DEBUG:BABY ASSEMBLER:Found comment at line 7
DEBUG:BABY ASSEMBLER:Found comment at line 8
DEBUG:BABY ASSEMBLER:Found comment at line 9
DEBUG:BABY ASSEMBLER:Found comment at line 10
DEBUG:BABY ASSEMBLER:Found comment at line 11
DEBUG:BABY ASSEMBLER:Found comment at line 12
DEBUG:BABY ASSEMBLER:Found comment at line 13
DEBUG:BABY ASSEMBLER:Found comment at line 14
DEBUG:BABY ASSEMBLER:Found comment at line 15
DEBUG:BABY ASSEMBLER:Found comment at line 16
DEBUG:BABY ASSEMBLER:Found comment at line 17
DEBUG:BABY ASSEMBLER:Found comment at line 18
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTCTL
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 19)
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTPW
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 20)
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTHOLD
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 21)
DEBUG:BABY ASSEMBLER:Found comment at line 23
DEBUG:BABY ASSEMBLER:Found comment at line 24
DEBUG:BABY ASSEMBLER:Found comment at line 25
DEBUG:BABY ASSEMBLER:No other matches so far for instruction LoopCount
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Count
DEBUG:BABY ASSEMBLER:Found comment at line 31
DEBUG:BABY ASSEMBLER:No other matches so far for instruction BufferTable:
DEBUG:BABY ASSEMBLER:Found comment at line 33
DEBUG:BABY ASSEMBLER:No other matches so far for instruction BufferTableSize
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0208 into old val 0x0200 (line 34)
DEBUG:BABY ASSEMBLER:Found comment at line 35
DEBUG:BABY ASSEMBLER:Found comment at line 36
DEBUG:BABY ASSEMBLER:Found comment at line 38
DEBUG:BABY ASSEMBLER:Found comment at line 40
DEBUG:BABY ASSEMBLER:Found comment at line 41
DEBUG:BABY ASSEMBLER:Found comment at line 42
DEBUG:BABY ASSEMBLER:No other matches so far for instruction RESET
DEBUG:BABY ASSEMBLER:Found comment at line 44
DEBUG:BABY ASSEMBLER:No other matches so far for instruction StopWDT
DEBUG:BABY ASSEMBLER:No other matches so far for instruction MainProgramStart
DEBUG:BABY ASSEMBLER:Found comment at line 49
DEBUG:BABY ASSEMBLER:No match found for instruction mov (line 50)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xc002
DEBUG:BABY ASSEMBLER:No match found for instruction mov (line 51)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xc002
DEBUG:BABY ASSEMBLER:No other matches so far for instruction ClearNextByte
DEBUG:BABY ASSEMBLER:No match found for instruction mov.b (line 53)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xc002
DEBUG:BABY ASSEMBLER:No other matches so far for instruction inc
DEBUG:BABY ASSEMBLER:No match found for instruction inc (line 55)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:No other matches so far for instruction dec
DEBUG:BABY ASSEMBLER:No match found for instruction dec (line 56)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:No match found for instruction jnz (line 57)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xc002
DEBUG:BABY ASSEMBLER:No other matches so far for instruction FinishedClearingRAMtable
DEBUG:BABY ASSEMBLER:Found comment at line 60
DEBUG:BABY ASSEMBLER:No match found for instruction mov (line 61)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xc002
DEBUG:BABY ASSEMBLER:No match found for instruction mov (line 62)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xc002
DEBUG:BABY ASSEMBLER:No match found for instruction mov (line 63)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xc002
DEBUG:BABY ASSEMBLER:No other matches so far for instruction GetNextByte
DEBUG:BABY ASSEMBLER:No match found for instruction mov.b (line 66)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xc002
DEBUG:BABY ASSEMBLER:No other matches so far for instruction inc
DEBUG:BABY ASSEMBLER:No match found for instruction inc (line 68)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:No other matches so far for instruction inc
DEBUG:BABY ASSEMBLER:No match found for instruction inc (line 69)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:No other matches so far for instruction dec
DEBUG:BABY ASSEMBLER:No match found for instruction dec (line 70)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xC000
DEBUG:BABY ASSEMBLER:No match found for instruction jnz (line 71)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xC000 into old val 0xc002
DEBUG:BABY ASSEMBLER:No other matches so far for instruction FinishedCopyingTableToRAM
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Done
DEBUG:BABY ASSEMBLER:No match found for instruction jnz (line 75)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xc002 into old val 0xc004
DEBUG:BABY ASSEMBLER:Found comment at line 77
DEBUG:BABY ASSEMBLER:Found comment at line 78
DEBUG:BABY ASSEMBLER:Found comment at line 79
DEBUG:BABY ASSEMBLER:Found comment at line 81
DEBUG:BABY ASSEMBLER:Found comment at line 82
DEBUG:BABY ASSEMBLER:Found comment at line 83
DEBUG:BABY ASSEMBLER:Found comment at line 85
DEBUG:BABY ASSEMBLER:Found comment at line 87
DEBUG:BABY ASSEMBLER:Found comment at line 88
DEBUG:BABY ASSEMBLER:Found comment at line 89
DEBUG:BABY ASSEMBLER:Found comment at line 92
DEBUG:BABY ASSEMBLER:Found comment at line 93
DEBUG:BABY ASSEMBLER:Found comment at line 94
DEBUG:BABY ASSEMBLER:No other matches so far for instruction PatternTable1
DEBUG:BABY ASSEMBLER:No match found for instruction PatternTable1 (line 97)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xE000 into old val 0xE000
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row0
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row1
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row2
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row3
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row4
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row5
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row6
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row7
DEBUG:BABY ASSEMBLER:No other matches so far for instruction PatternTable2
DEBUG:BABY ASSEMBLER:Found comment at line 109
DEBUG:BABY ASSEMBLER:Found comment at line 110
DEBUG:BABY ASSEMBLER:Found comment at line 111
DEBUG:BABY ASSEMBLER:No other matches so far for instruction DW
DEBUG:BABY ASSEMBLER:No match found for instruction DW (line 114)
DEBUG:BABY ASSEMBLER:Storing previous val of 0xFFFE into old val None
DEBUG:BABY ASSEMBLER:Found comment at line 115
DEBUG:BABY ASSEMBLER:Found comment at line 117
WARNING:BABY ASSEMBLER:Previous address was None
DEBUG:BABY ASSEMBLER:No other matches so far for instruction END
DEBUG:BABY ASSEMBLER:Found comment at line 119
DEBUG:BABY ASSEMBLER:Found comment at line 120
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0200',
 'BufferTableSize': '0x0208',
 'ClearNextByte': '0xC000',
 'Count': '0x0201',
 'DW': '0xFFFE',
 'Done': '0xC000',
 'END': None,
 'FinishedClearingRAMtable': '0xC000',
 'FinishedCopyingTableToRAM': '0xC000',
 'GetNextByte': '0xC000',
 'LoopCount': '0x0200',
 'MainProgramStart': '0xC000',
 'PatternTable1': '0xE000',
 'PatternTable2': '0xE000',
 'RESET': '0xC000',
 'Row0': '0xE000',
 'Row1': '0xe001',
 'Row2': '0xe002',
 'Row3': '0xe003',
 'Row4': '0xe004',
 'Row5': '0xe005',
 'Row6': '0xe006',
 'Row7': '0xe007',
 'StopWDT': '0xC000',
 'WDTCTL': '0x0200',
 'WDTHOLD': '0x0200',
 'WDTPW': '0x0200',
 'dec': '0xC000',
 'inc': '0xC000'}
WARNING:BABY ASSEMBLER:Column contains NoneType
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0200                                                \n'
 '31         0200                  ;define a table (array) of 8 bytes\n'
 '32         0208                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         0208                  ; bytes in RAM space          \n'
 '34         0208                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         0208                  ;  literally "Current address minus\n'
 '36         0208                  ;  address of BufferTable"    \n'
 '37         0200                                                \n'
 '38         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         C000                                                \n'
 '46         c002                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         C000                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         C000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c002                  jnz    Done                   \n'
 '76         C000                                                \n'
 '77         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         C000                  ;           End of main code  \n'
 '79         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         C000                                                \n'
 '81         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         C000                  ;           Subroutines       \n'
 '83         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         C000                                                \n'
 '85         C000                  ; none used here              \n'
 '86         C000                                                \n'
 '87         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         C000                  ;           End of all Subroutines\n'
 '89         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         C000                                                \n'
 '91         C000                                                \n'
 '92         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         C000                  ;           Definition of Program Data '
 'Memory\n'
 '94         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         E000                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e001                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e002                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e003                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e004                  Row3    DB  '-'               \n"
 "102        e005                  Row4    DB  '3'               \n"
 "103        e006                  Row5    DB  '3'               \n"
 "104        e007                  Row6    DB  '6'               \n"
 "105        e008                  Row7    DB  '2'               \n"
 '106        E000                                                \n'
 '107        e001                  PatternTable2  DB "EXAMPLES"  \n'
 '108        E000                                                \n'
 '109        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '110        E000                  ;           Interrupt Vectors \n'
 '111        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '112        E000                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        FFFE                  DW      RESET                   ; '
 'establishes the label RESET as\n'
 '115        FFFE                  ; the starting point          \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Found comment at line 0
DEBUG:BABY ASSEMBLER:No found previous value. Continuing.
DEBUG:BABY ASSEMBLER:Found comment at line 1
DEBUG:BABY ASSEMBLER:Found comment at line 2
DEBUG:BABY ASSEMBLER:Found comment at line 3
DEBUG:BABY ASSEMBLER:Found comment at line 4
DEBUG:BABY ASSEMBLER:Found comment at line 5
DEBUG:BABY ASSEMBLER:Found comment at line 6
DEBUG:BABY ASSEMBLER:Found comment at line 7
DEBUG:BABY ASSEMBLER:Found comment at line 8
DEBUG:BABY ASSEMBLER:Found comment at line 9
DEBUG:BABY ASSEMBLER:Found comment at line 10
DEBUG:BABY ASSEMBLER:Found comment at line 11
DEBUG:BABY ASSEMBLER:Found comment at line 12
DEBUG:BABY ASSEMBLER:Found comment at line 13
DEBUG:BABY ASSEMBLER:Found comment at line 14
DEBUG:BABY ASSEMBLER:Found comment at line 15
DEBUG:BABY ASSEMBLER:Found comment at line 16
DEBUG:BABY ASSEMBLER:Found comment at line 17
DEBUG:BABY ASSEMBLER:Found comment at line 18
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTCTL
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 19)
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTPW
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 20)
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTHOLD
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 21)
DEBUG:BABY ASSEMBLER:Found comment at line 23
DEBUG:BABY ASSEMBLER:Found comment at line 24
DEBUG:BABY ASSEMBLER:Found comment at line 25
DEBUG:BABY ASSEMBLER:No other matches so far for instruction LoopCount
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Count
DEBUG:BABY ASSEMBLER:Found comment at line 31
DEBUG:BABY ASSEMBLER:No other matches so far for instruction BufferTable:
DEBUG:BABY ASSEMBLER:Found comment at line 33
DEBUG:BABY ASSEMBLER:No other matches so far for instruction BufferTableSize
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0208 into old val 0x0200 (line 34)
DEBUG:BABY ASSEMBLER:Found comment at line 35
DEBUG:BABY ASSEMBLER:Found comment at line 36
DEBUG:BABY ASSEMBLER:Found comment at line 38
DEBUG:BABY ASSEMBLER:Found comment at line 40
DEBUG:BABY ASSEMBLER:Found comment at line 41
DEBUG:BABY ASSEMBLER:Found comment at line 42
DEBUG:BABY ASSEMBLER:No other matches so far for instruction RESET
DEBUG:BABY ASSEMBLER:Found comment at line 44
DEBUG:BABY ASSEMBLER:No other matches so far for instruction StopWDT
DEBUG:BABY ASSEMBLER:No other matches so far for instruction MainProgramStart
DEBUG:BABY ASSEMBLER:Found comment at line 49
DEBUG:BABY ASSEMBLER:Must be whitespace.
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Found comment at line 0
DEBUG:BABY ASSEMBLER:No found previous value. Continuing.
DEBUG:BABY ASSEMBLER:Found comment at line 1
DEBUG:BABY ASSEMBLER:Found comment at line 2
DEBUG:BABY ASSEMBLER:Found comment at line 3
DEBUG:BABY ASSEMBLER:Found comment at line 4
DEBUG:BABY ASSEMBLER:Found comment at line 5
DEBUG:BABY ASSEMBLER:Found comment at line 6
DEBUG:BABY ASSEMBLER:Found comment at line 7
DEBUG:BABY ASSEMBLER:Found comment at line 8
DEBUG:BABY ASSEMBLER:Found comment at line 9
DEBUG:BABY ASSEMBLER:Found comment at line 10
DEBUG:BABY ASSEMBLER:Found comment at line 11
DEBUG:BABY ASSEMBLER:Found comment at line 12
DEBUG:BABY ASSEMBLER:Found comment at line 13
DEBUG:BABY ASSEMBLER:Found comment at line 14
DEBUG:BABY ASSEMBLER:Found comment at line 15
DEBUG:BABY ASSEMBLER:Found comment at line 16
DEBUG:BABY ASSEMBLER:Found comment at line 17
DEBUG:BABY ASSEMBLER:Found comment at line 18
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTCTL
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 19)
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTPW
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 20)
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTHOLD
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 21)
DEBUG:BABY ASSEMBLER:Found comment at line 23
DEBUG:BABY ASSEMBLER:Found comment at line 24
DEBUG:BABY ASSEMBLER:Found comment at line 25
DEBUG:BABY ASSEMBLER:No other matches so far for instruction LoopCount
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Count
DEBUG:BABY ASSEMBLER:Found comment at line 31
DEBUG:BABY ASSEMBLER:No other matches so far for instruction BufferTable:
DEBUG:BABY ASSEMBLER:Found comment at line 33
DEBUG:BABY ASSEMBLER:No other matches so far for instruction BufferTableSize
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0208 into old val 0x0200 (line 34)
DEBUG:BABY ASSEMBLER:Found comment at line 35
DEBUG:BABY ASSEMBLER:Found comment at line 36
DEBUG:BABY ASSEMBLER:Found comment at line 38
DEBUG:BABY ASSEMBLER:Found comment at line 40
DEBUG:BABY ASSEMBLER:Found comment at line 41
DEBUG:BABY ASSEMBLER:Found comment at line 42
DEBUG:BABY ASSEMBLER:No other matches so far for instruction RESET
DEBUG:BABY ASSEMBLER:Found comment at line 44
DEBUG:BABY ASSEMBLER:No other matches so far for instruction StopWDT
DEBUG:BABY ASSEMBLER:No other matches so far for instruction MainProgramStart
DEBUG:BABY ASSEMBLER:Found comment at line 49
DEBUG:BABY ASSEMBLER:Must be whitespace.
DEBUG:BABY ASSEMBLER:Must be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction ClearNextByte
DEBUG:BABY ASSEMBLER:Must be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction inc
DEBUG:BABY ASSEMBLER:Must be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction dec
DEBUG:BABY ASSEMBLER:Must be whitespace.
DEBUG:BABY ASSEMBLER:Must be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction FinishedClearingRAMtable
DEBUG:BABY ASSEMBLER:Found comment at line 60
DEBUG:BABY ASSEMBLER:Must be whitespace.
DEBUG:BABY ASSEMBLER:Must be whitespace.
DEBUG:BABY ASSEMBLER:Must be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction GetNextByte
DEBUG:BABY ASSEMBLER:Must be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction inc
DEBUG:BABY ASSEMBLER:Must be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction inc
DEBUG:BABY ASSEMBLER:Must be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction dec
DEBUG:BABY ASSEMBLER:Must be whitespace.
DEBUG:BABY ASSEMBLER:Must be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction FinishedCopyingTableToRAM
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Done
DEBUG:BABY ASSEMBLER:Must be whitespace.
DEBUG:BABY ASSEMBLER:Found comment at line 77
DEBUG:BABY ASSEMBLER:Found comment at line 78
DEBUG:BABY ASSEMBLER:Found comment at line 79
DEBUG:BABY ASSEMBLER:Found comment at line 81
DEBUG:BABY ASSEMBLER:Found comment at line 82
DEBUG:BABY ASSEMBLER:Found comment at line 83
DEBUG:BABY ASSEMBLER:Found comment at line 85
DEBUG:BABY ASSEMBLER:Found comment at line 87
DEBUG:BABY ASSEMBLER:Found comment at line 88
DEBUG:BABY ASSEMBLER:Found comment at line 89
DEBUG:BABY ASSEMBLER:Found comment at line 92
DEBUG:BABY ASSEMBLER:Found comment at line 93
DEBUG:BABY ASSEMBLER:Found comment at line 94
DEBUG:BABY ASSEMBLER:No other matches so far for instruction PatternTable1
DEBUG:BABY ASSEMBLER:Must be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row0
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row1
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row2
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row3
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row4
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row5
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row6
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row7
DEBUG:BABY ASSEMBLER:No other matches so far for instruction PatternTable2
DEBUG:BABY ASSEMBLER:Found comment at line 109
DEBUG:BABY ASSEMBLER:Found comment at line 110
DEBUG:BABY ASSEMBLER:Found comment at line 111
DEBUG:BABY ASSEMBLER:No other matches so far for instruction DW
DEBUG:BABY ASSEMBLER:Must be whitespace.
DEBUG:BABY ASSEMBLER:Found comment at line 115
DEBUG:BABY ASSEMBLER:Found comment at line 117
WARNING:BABY ASSEMBLER:Previous address was None
DEBUG:BABY ASSEMBLER:No other matches so far for instruction END
WARNING:BABY ASSEMBLER:Got to the else, previous address was None.
DEBUG:BABY ASSEMBLER:Found comment at line 119
DEBUG:BABY ASSEMBLER:Found comment at line 120
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0200',
 'BufferTableSize': '0x0208',
 'ClearNextByte': '0xC000',
 'Count': '0x0201',
 'DW': '0xFFFE',
 'Done': '0xC000',
 'END': None,
 'FinishedClearingRAMtable': '0xC000',
 'FinishedCopyingTableToRAM': '0xC000',
 'GetNextByte': '0xC000',
 'LoopCount': '0x0200',
 'MainProgramStart': '0xC000',
 'PatternTable1': '0xE000',
 'PatternTable2': '0xE000',
 'RESET': '0xC000',
 'Row0': '0xE000',
 'Row1': '0xe001',
 'Row2': '0xe002',
 'Row3': '0xe003',
 'Row4': '0xe004',
 'Row5': '0xe005',
 'Row6': '0xe006',
 'Row7': '0xe007',
 'StopWDT': '0xC000',
 'WDTCTL': '0x0200',
 'WDTHOLD': '0x0200',
 'WDTPW': '0x0200',
 'dec': '0xC000',
 'inc': '0xC000'}
WARNING:BABY ASSEMBLER:Column contains NoneType
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0200                                                \n'
 '31         0200                  ;define a table (array) of 8 bytes\n'
 '32         0208                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         0208                  ; bytes in RAM space          \n'
 '34         0208                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         0208                  ;  literally "Current address minus\n'
 '36         0208                  ;  address of BufferTable"    \n'
 '37         0200                                                \n'
 '38         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         C000                                                \n'
 '46         c002                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         C000                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         C000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c002                  jnz    Done                   \n'
 '76         C000                                                \n'
 '77         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         C000                  ;           End of main code  \n'
 '79         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         C000                                                \n'
 '81         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         C000                  ;           Subroutines       \n'
 '83         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         C000                                                \n'
 '85         C000                  ; none used here              \n'
 '86         C000                                                \n'
 '87         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         C000                  ;           End of all Subroutines\n'
 '89         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         C000                                                \n'
 '91         C000                                                \n'
 '92         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         C000                  ;           Definition of Program Data '
 'Memory\n'
 '94         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         E000                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e001                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e002                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e003                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e004                  Row3    DB  '-'               \n"
 "102        e005                  Row4    DB  '3'               \n"
 "103        e006                  Row5    DB  '3'               \n"
 "104        e007                  Row6    DB  '6'               \n"
 "105        e008                  Row7    DB  '2'               \n"
 '106        E000                                                \n'
 '107        e001                  PatternTable2  DB "EXAMPLES"  \n'
 '108        E000                                                \n'
 '109        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '110        E000                  ;           Interrupt Vectors \n'
 '111        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '112        E000                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        FFFE                  DW      RESET                   ; '
 'establishes the label RESET as\n'
 '115        FFFE                  ; the starting point          \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Found comment at line 0
DEBUG:BABY ASSEMBLER:No found previous value. Continuing.
DEBUG:BABY ASSEMBLER:Found comment at line 1
DEBUG:BABY ASSEMBLER:Found comment at line 2
DEBUG:BABY ASSEMBLER:Found comment at line 3
DEBUG:BABY ASSEMBLER:Found comment at line 4
DEBUG:BABY ASSEMBLER:Found comment at line 5
DEBUG:BABY ASSEMBLER:Found comment at line 6
DEBUG:BABY ASSEMBLER:Found comment at line 7
DEBUG:BABY ASSEMBLER:Found comment at line 8
DEBUG:BABY ASSEMBLER:Found comment at line 9
DEBUG:BABY ASSEMBLER:Found comment at line 10
DEBUG:BABY ASSEMBLER:Found comment at line 11
DEBUG:BABY ASSEMBLER:Found comment at line 12
DEBUG:BABY ASSEMBLER:Found comment at line 13
DEBUG:BABY ASSEMBLER:Found comment at line 14
DEBUG:BABY ASSEMBLER:Found comment at line 15
DEBUG:BABY ASSEMBLER:Found comment at line 16
DEBUG:BABY ASSEMBLER:Found comment at line 17
DEBUG:BABY ASSEMBLER:Found comment at line 18
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTCTL
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 19)
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTPW
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 20)
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTHOLD
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 21)
DEBUG:BABY ASSEMBLER:Found comment at line 23
DEBUG:BABY ASSEMBLER:Found comment at line 24
DEBUG:BABY ASSEMBLER:Found comment at line 25
DEBUG:BABY ASSEMBLER:No other matches so far for instruction LoopCount
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Count
DEBUG:BABY ASSEMBLER:Found comment at line 31
DEBUG:BABY ASSEMBLER:No other matches so far for instruction BufferTable:
DEBUG:BABY ASSEMBLER:Found comment at line 33
DEBUG:BABY ASSEMBLER:No other matches so far for instruction BufferTableSize
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0208 into old val 0x0200 (line 34)
DEBUG:BABY ASSEMBLER:Found comment at line 35
DEBUG:BABY ASSEMBLER:Found comment at line 36
DEBUG:BABY ASSEMBLER:Found comment at line 38
DEBUG:BABY ASSEMBLER:Found comment at line 40
DEBUG:BABY ASSEMBLER:Found comment at line 41
DEBUG:BABY ASSEMBLER:Found comment at line 42
DEBUG:BABY ASSEMBLER:No other matches so far for instruction RESET
DEBUG:BABY ASSEMBLER:Found comment at line 44
DEBUG:BABY ASSEMBLER:No other matches so far for instruction StopWDT
DEBUG:BABY ASSEMBLER:No other matches so far for instruction MainProgramStart
DEBUG:BABY ASSEMBLER:Found comment at line 49
DEBUG:BABY ASSEMBLER:No match found for ['mov', '#BufferTableSize,', 'R15', ';', 'R15', 'is', 'a', 'loop', 'counter'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No match found for ['mov', '#BufferTable,', 'R14', ';', 'R14', 'points', 'to', 'start', 'of', 'RAM', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction ClearNextByte
DEBUG:BABY ASSEMBLER:No match found for ['mov.b', '#0,', '0(R14)', ';', 'clear', 'the', 'location', 'to', 'zero'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction inc
DEBUG:BABY ASSEMBLER:No match found for ['inc', 'R14', ';', 'point', 'to', 'next', 'byte', 'in', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction dec
DEBUG:BABY ASSEMBLER:No match found for ['dec', 'R15', ';', 'done', 'them', 'all', 'yet?'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No match found for ['jnz', 'ClearNextByte', ';', 'if', 'no,', 'do', 'some', 'more'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction FinishedClearingRAMtable
DEBUG:BABY ASSEMBLER:Found comment at line 60
DEBUG:BABY ASSEMBLER:No match found for ['mov', '#BufferTableSize,', 'R15', ';', 'R15', 'is', 'a', 'loop', 'counter'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No match found for ['mov', '#BufferTable,', 'R14', ';', 'R14', 'points', 'to', 'start', 'of', 'RAM', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No match found for ['mov', '#PatternTable2,', 'R13', ';', 'R13', 'points', 'to', 'start', 'of', 'ROM', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction GetNextByte
DEBUG:BABY ASSEMBLER:No match found for ['mov.b', '0(R13),', '0(R14)', ';', 'copy', 'byte', 'from', 'ROM', 'table', 'to', 'RAM', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction inc
DEBUG:BABY ASSEMBLER:No match found for ['inc', 'R13', ';increment', 'source', 'addr'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction inc
DEBUG:BABY ASSEMBLER:No match found for ['inc', 'R14', ';', 'point', 'to', 'next', 'byte', 'in', 'RAM', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction dec
DEBUG:BABY ASSEMBLER:No match found for ['dec', 'R15', ';', 'done', 'them', 'all', 'yet?'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No match found for ['jnz', 'GetNextByte', ';', 'if', 'no,', 'do', 'some', 'more'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction FinishedCopyingTableToRAM
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Done
DEBUG:BABY ASSEMBLER:No match found for ['jnz', 'Done'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:Found comment at line 77
DEBUG:BABY ASSEMBLER:Found comment at line 78
DEBUG:BABY ASSEMBLER:Found comment at line 79
DEBUG:BABY ASSEMBLER:Found comment at line 81
DEBUG:BABY ASSEMBLER:Found comment at line 82
DEBUG:BABY ASSEMBLER:Found comment at line 83
DEBUG:BABY ASSEMBLER:Found comment at line 85
DEBUG:BABY ASSEMBLER:Found comment at line 87
DEBUG:BABY ASSEMBLER:Found comment at line 88
DEBUG:BABY ASSEMBLER:Found comment at line 89
DEBUG:BABY ASSEMBLER:Found comment at line 92
DEBUG:BABY ASSEMBLER:Found comment at line 93
DEBUG:BABY ASSEMBLER:Found comment at line 94
DEBUG:BABY ASSEMBLER:No other matches so far for instruction PatternTable1
DEBUG:BABY ASSEMBLER:No match found for ['PatternTable1', ';', 'this', 'is', 'just', 'an', 'example', 'table', '(or', 'perhaps', 'more'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row0
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row1
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row2
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row3
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row4
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row5
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row6
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row7
DEBUG:BABY ASSEMBLER:No other matches so far for instruction PatternTable2
DEBUG:BABY ASSEMBLER:Found comment at line 109
DEBUG:BABY ASSEMBLER:Found comment at line 110
DEBUG:BABY ASSEMBLER:Found comment at line 111
DEBUG:BABY ASSEMBLER:No other matches so far for instruction DW
DEBUG:BABY ASSEMBLER:No match found for ['DW', 'RESET', ';', 'establishes', 'the', 'label', 'RESET', 'as'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:Found comment at line 115
DEBUG:BABY ASSEMBLER:Found comment at line 117
WARNING:BABY ASSEMBLER:Previous address was None
DEBUG:BABY ASSEMBLER:No other matches so far for instruction END
WARNING:BABY ASSEMBLER:Got to the else, previous address was None.
DEBUG:BABY ASSEMBLER:Found comment at line 119
DEBUG:BABY ASSEMBLER:Found comment at line 120
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0200',
 'BufferTableSize': '0x0208',
 'ClearNextByte': '0xC000',
 'Count': '0x0201',
 'DW': '0xFFFE',
 'Done': '0xC000',
 'END': None,
 'FinishedClearingRAMtable': '0xC000',
 'FinishedCopyingTableToRAM': '0xC000',
 'GetNextByte': '0xC000',
 'LoopCount': '0x0200',
 'MainProgramStart': '0xC000',
 'PatternTable1': '0xE000',
 'PatternTable2': '0xE000',
 'RESET': '0xC000',
 'Row0': '0xE000',
 'Row1': '0xe001',
 'Row2': '0xe002',
 'Row3': '0xe003',
 'Row4': '0xe004',
 'Row5': '0xe005',
 'Row6': '0xe006',
 'Row7': '0xe007',
 'StopWDT': '0xC000',
 'WDTCTL': '0x0200',
 'WDTHOLD': '0x0200',
 'WDTPW': '0x0200',
 'dec': '0xC000',
 'inc': '0xC000'}
WARNING:BABY ASSEMBLER:Column contains NoneType
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0200                                                \n'
 '31         0200                  ;define a table (array) of 8 bytes\n'
 '32         0208                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         0208                  ; bytes in RAM space          \n'
 '34         0208                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         0208                  ;  literally "Current address minus\n'
 '36         0208                  ;  address of BufferTable"    \n'
 '37         0200                                                \n'
 '38         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         C000                                                \n'
 '46         c002                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         C000                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         C000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c002                  jnz    Done                   \n'
 '76         C000                                                \n'
 '77         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         C000                  ;           End of main code  \n'
 '79         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         C000                                                \n'
 '81         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         C000                  ;           Subroutines       \n'
 '83         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         C000                                                \n'
 '85         C000                  ; none used here              \n'
 '86         C000                                                \n'
 '87         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         C000                  ;           End of all Subroutines\n'
 '89         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         C000                                                \n'
 '91         C000                                                \n'
 '92         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         C000                  ;           Definition of Program Data '
 'Memory\n'
 '94         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         E000                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e001                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e002                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e003                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e004                  Row3    DB  '-'               \n"
 "102        e005                  Row4    DB  '3'               \n"
 "103        e006                  Row5    DB  '3'               \n"
 "104        e007                  Row6    DB  '6'               \n"
 "105        e008                  Row7    DB  '2'               \n"
 '106        E000                                                \n'
 '107        e001                  PatternTable2  DB "EXAMPLES"  \n'
 '108        E000                                                \n'
 '109        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '110        E000                  ;           Interrupt Vectors \n'
 '111        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '112        E000                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        FFFE                  DW      RESET                   ; '
 'establishes the label RESET as\n'
 '115        FFFE                  ; the starting point          \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Found comment at line 0
DEBUG:BABY ASSEMBLER:No found previous value. Continuing.
DEBUG:BABY ASSEMBLER:Found comment at line 1
DEBUG:BABY ASSEMBLER:Found comment at line 2
DEBUG:BABY ASSEMBLER:Found comment at line 3
DEBUG:BABY ASSEMBLER:Found comment at line 4
DEBUG:BABY ASSEMBLER:Found comment at line 5
DEBUG:BABY ASSEMBLER:Found comment at line 6
DEBUG:BABY ASSEMBLER:Found comment at line 7
DEBUG:BABY ASSEMBLER:Found comment at line 8
DEBUG:BABY ASSEMBLER:Found comment at line 9
DEBUG:BABY ASSEMBLER:Found comment at line 10
DEBUG:BABY ASSEMBLER:Found comment at line 11
DEBUG:BABY ASSEMBLER:Found comment at line 12
DEBUG:BABY ASSEMBLER:Found comment at line 13
DEBUG:BABY ASSEMBLER:Found comment at line 14
DEBUG:BABY ASSEMBLER:Found comment at line 15
DEBUG:BABY ASSEMBLER:Found comment at line 16
DEBUG:BABY ASSEMBLER:Found comment at line 17
DEBUG:BABY ASSEMBLER:Found comment at line 18
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTCTL
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 19)
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTPW
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 20)
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTHOLD
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 21)
DEBUG:BABY ASSEMBLER:Found comment at line 23
DEBUG:BABY ASSEMBLER:Found comment at line 24
DEBUG:BABY ASSEMBLER:Found comment at line 25
DEBUG:BABY ASSEMBLER:No other matches so far for instruction LoopCount
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Count
DEBUG:BABY ASSEMBLER:Found comment at line 31
DEBUG:BABY ASSEMBLER:No other matches so far for instruction BufferTable:
DEBUG:BABY ASSEMBLER:Found comment at line 33
DEBUG:BABY ASSEMBLER:No other matches so far for instruction BufferTableSize
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0208 into old val 0x0200 (line 34)
DEBUG:BABY ASSEMBLER:Found comment at line 35
DEBUG:BABY ASSEMBLER:Found comment at line 36
DEBUG:BABY ASSEMBLER:Found comment at line 38
DEBUG:BABY ASSEMBLER:Found comment at line 40
DEBUG:BABY ASSEMBLER:Found comment at line 41
DEBUG:BABY ASSEMBLER:Found comment at line 42
DEBUG:BABY ASSEMBLER:No other matches so far for instruction RESET
DEBUG:BABY ASSEMBLER:Found comment at line 44
DEBUG:BABY ASSEMBLER:No other matches so far for instruction StopWDT
DEBUG:BABY ASSEMBLER:No other matches so far for instruction MainProgramStart
DEBUG:BABY ASSEMBLER:Found comment at line 49
DEBUG:BABY ASSEMBLER:No match found for ['mov', '#BufferTableSize,', 'R15', ';', 'R15', 'is', 'a', 'loop', 'counter'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No match found for ['mov', '#BufferTable,', 'R14', ';', 'R14', 'points', 'to', 'start', 'of', 'RAM', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction ClearNextByte
DEBUG:BABY ASSEMBLER:No match found for ['mov.b', '#0,', '0(R14)', ';', 'clear', 'the', 'location', 'to', 'zero'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction inc
DEBUG:BABY ASSEMBLER:No match found for ['inc', 'R14', ';', 'point', 'to', 'next', 'byte', 'in', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction dec
DEBUG:BABY ASSEMBLER:No match found for ['dec', 'R15', ';', 'done', 'them', 'all', 'yet?'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No match found for ['jnz', 'ClearNextByte', ';', 'if', 'no,', 'do', 'some', 'more'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction FinishedClearingRAMtable
DEBUG:BABY ASSEMBLER:Found comment at line 60
DEBUG:BABY ASSEMBLER:No match found for ['mov', '#BufferTableSize,', 'R15', ';', 'R15', 'is', 'a', 'loop', 'counter'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No match found for ['mov', '#BufferTable,', 'R14', ';', 'R14', 'points', 'to', 'start', 'of', 'RAM', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No match found for ['mov', '#PatternTable2,', 'R13', ';', 'R13', 'points', 'to', 'start', 'of', 'ROM', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction GetNextByte
DEBUG:BABY ASSEMBLER:No match found for ['mov.b', '0(R13),', '0(R14)', ';', 'copy', 'byte', 'from', 'ROM', 'table', 'to', 'RAM', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction inc
DEBUG:BABY ASSEMBLER:No match found for ['inc', 'R13', ';increment', 'source', 'addr'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction inc
DEBUG:BABY ASSEMBLER:No match found for ['inc', 'R14', ';', 'point', 'to', 'next', 'byte', 'in', 'RAM', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction dec
DEBUG:BABY ASSEMBLER:No match found for ['dec', 'R15', ';', 'done', 'them', 'all', 'yet?'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No match found for ['jnz', 'GetNextByte', ';', 'if', 'no,', 'do', 'some', 'more'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction FinishedCopyingTableToRAM
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Done
DEBUG:BABY ASSEMBLER:No match found for ['jnz', 'Done'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:Found comment at line 77
DEBUG:BABY ASSEMBLER:Found comment at line 78
DEBUG:BABY ASSEMBLER:Found comment at line 79
DEBUG:BABY ASSEMBLER:Found comment at line 81
DEBUG:BABY ASSEMBLER:Found comment at line 82
DEBUG:BABY ASSEMBLER:Found comment at line 83
DEBUG:BABY ASSEMBLER:Found comment at line 85
DEBUG:BABY ASSEMBLER:Found comment at line 87
DEBUG:BABY ASSEMBLER:Found comment at line 88
DEBUG:BABY ASSEMBLER:Found comment at line 89
DEBUG:BABY ASSEMBLER:Found comment at line 92
DEBUG:BABY ASSEMBLER:Found comment at line 93
DEBUG:BABY ASSEMBLER:Found comment at line 94
DEBUG:BABY ASSEMBLER:No other matches so far for instruction PatternTable1
DEBUG:BABY ASSEMBLER:No match found for ['PatternTable1', ';', 'this', 'is', 'just', 'an', 'example', 'table', '(or', 'perhaps', 'more'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row0
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row1
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row2
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row3
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row4
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row5
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row6
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row7
DEBUG:BABY ASSEMBLER:No other matches so far for instruction PatternTable2
DEBUG:BABY ASSEMBLER:Found comment at line 109
DEBUG:BABY ASSEMBLER:Found comment at line 110
DEBUG:BABY ASSEMBLER:Found comment at line 111
DEBUG:BABY ASSEMBLER:No other matches so far for instruction DW
DEBUG:BABY ASSEMBLER:No match found for ['DW', 'RESET', ';', 'establishes', 'the', 'label', 'RESET', 'as'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:Found comment at line 115
DEBUG:BABY ASSEMBLER:Found comment at line 117
WARNING:BABY ASSEMBLER:Previous address was None
DEBUG:BABY ASSEMBLER:No other matches so far for instruction END
WARNING:BABY ASSEMBLER:Got to the else, previous address was None.
DEBUG:BABY ASSEMBLER:Found comment at line 119
DEBUG:BABY ASSEMBLER:Found comment at line 120
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0200',
 'BufferTableSize': '0x0208',
 'ClearNextByte': '0xC000',
 'Count': '0x0201',
 'DW': '0xFFFE',
 'Done': '0xC000',
 'END': None,
 'FinishedClearingRAMtable': '0xC000',
 'FinishedCopyingTableToRAM': '0xC000',
 'GetNextByte': '0xC000',
 'LoopCount': '0x0200',
 'MainProgramStart': '0xC000',
 'PatternTable1': '0xE000',
 'PatternTable2': '0xE000',
 'RESET': '0xC000',
 'Row0': '0xE000',
 'Row1': '0xe001',
 'Row2': '0xe002',
 'Row3': '0xe003',
 'Row4': '0xe004',
 'Row5': '0xe005',
 'Row6': '0xe006',
 'Row7': '0xe007',
 'StopWDT': '0xC000',
 'WDTCTL': '0x0200',
 'WDTHOLD': '0x0200',
 'WDTPW': '0x0200',
 'dec': '0xC000',
 'inc': '0xC000'}
WARNING:BABY ASSEMBLER:Column contains NoneType
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0200                                                \n'
 '31         0200                  ;define a table (array) of 8 bytes\n'
 '32         0208                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         0208                  ; bytes in RAM space          \n'
 '34         0208                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         0208                  ;  literally "Current address minus\n'
 '36         0208                  ;  address of BufferTable"    \n'
 '37         0200                                                \n'
 '38         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         C000                                                \n'
 '46         c002                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         C000                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         C000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c002                  jnz    Done                   \n'
 '76         C000                                                \n'
 '77         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         C000                  ;           End of main code  \n'
 '79         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         C000                                                \n'
 '81         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         C000                  ;           Subroutines       \n'
 '83         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         C000                                                \n'
 '85         C000                  ; none used here              \n'
 '86         C000                                                \n'
 '87         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         C000                  ;           End of all Subroutines\n'
 '89         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         C000                                                \n'
 '91         C000                                                \n'
 '92         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         C000                  ;           Definition of Program Data '
 'Memory\n'
 '94         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         E000                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e001                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e002                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e003                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e004                  Row3    DB  '-'               \n"
 "102        e005                  Row4    DB  '3'               \n"
 "103        e006                  Row5    DB  '3'               \n"
 "104        e007                  Row6    DB  '6'               \n"
 "105        e008                  Row7    DB  '2'               \n"
 '106        E000                                                \n'
 '107        e001                  PatternTable2  DB "EXAMPLES"  \n'
 '108        E000                                                \n'
 '109        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '110        E000                  ;           Interrupt Vectors \n'
 '111        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '112        E000                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        FFFE                  DW      RESET                   ; '
 'establishes the label RESET as\n'
 '115        FFFE                  ; the starting point          \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Found comment at line 0
DEBUG:BABY ASSEMBLER:No found previous value. Continuing.
DEBUG:BABY ASSEMBLER:Found comment at line 1
DEBUG:BABY ASSEMBLER:Found comment at line 2
DEBUG:BABY ASSEMBLER:Found comment at line 3
DEBUG:BABY ASSEMBLER:Found comment at line 4
DEBUG:BABY ASSEMBLER:Found comment at line 5
DEBUG:BABY ASSEMBLER:Found comment at line 6
DEBUG:BABY ASSEMBLER:Found comment at line 7
DEBUG:BABY ASSEMBLER:Found comment at line 8
DEBUG:BABY ASSEMBLER:Found comment at line 9
DEBUG:BABY ASSEMBLER:Found comment at line 10
DEBUG:BABY ASSEMBLER:Found comment at line 11
DEBUG:BABY ASSEMBLER:Found comment at line 12
DEBUG:BABY ASSEMBLER:Found comment at line 13
DEBUG:BABY ASSEMBLER:Found comment at line 14
DEBUG:BABY ASSEMBLER:Found comment at line 15
DEBUG:BABY ASSEMBLER:Found comment at line 16
DEBUG:BABY ASSEMBLER:Found comment at line 17
DEBUG:BABY ASSEMBLER:Found comment at line 18
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTCTL
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 19)
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTPW
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 20)
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTHOLD
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 21)
DEBUG:BABY ASSEMBLER:Found comment at line 23
DEBUG:BABY ASSEMBLER:Found comment at line 24
DEBUG:BABY ASSEMBLER:Found comment at line 25
DEBUG:BABY ASSEMBLER:No other matches so far for instruction LoopCount
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Count
DEBUG:BABY ASSEMBLER:Found comment at line 31
DEBUG:BABY ASSEMBLER:No other matches so far for instruction BufferTable:
DEBUG:BABY ASSEMBLER:Found comment at line 33
DEBUG:BABY ASSEMBLER:No other matches so far for instruction BufferTableSize
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0208 into old val 0x0200 (line 34)
DEBUG:BABY ASSEMBLER:Found comment at line 35
DEBUG:BABY ASSEMBLER:Found comment at line 36
DEBUG:BABY ASSEMBLER:Found comment at line 38
DEBUG:BABY ASSEMBLER:Found comment at line 40
DEBUG:BABY ASSEMBLER:Found comment at line 41
DEBUG:BABY ASSEMBLER:Found comment at line 42
DEBUG:BABY ASSEMBLER:No other matches so far for instruction RESET
DEBUG:BABY ASSEMBLER:Found comment at line 44
DEBUG:BABY ASSEMBLER:No other matches so far for instruction StopWDT
DEBUG:BABY ASSEMBLER:No other matches so far for instruction MainProgramStart
DEBUG:BABY ASSEMBLER:Found comment at line 49
DEBUG:BABY ASSEMBLER:No match found for ['mov', '#BufferTableSize,', 'R15', ';', 'R15', 'is', 'a', 'loop', 'counter'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No match found for ['mov', '#BufferTable,', 'R14', ';', 'R14', 'points', 'to', 'start', 'of', 'RAM', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction ClearNextByte
DEBUG:BABY ASSEMBLER:No match found for ['mov.b', '#0,', '0(R14)', ';', 'clear', 'the', 'location', 'to', 'zero'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction inc
DEBUG:BABY ASSEMBLER:No match found for ['inc', 'R14', ';', 'point', 'to', 'next', 'byte', 'in', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction dec
DEBUG:BABY ASSEMBLER:No match found for ['dec', 'R15', ';', 'done', 'them', 'all', 'yet?'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No match found for ['jnz', 'ClearNextByte', ';', 'if', 'no,', 'do', 'some', 'more'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction FinishedClearingRAMtable
DEBUG:BABY ASSEMBLER:Found comment at line 60
DEBUG:BABY ASSEMBLER:No match found for ['mov', '#BufferTableSize,', 'R15', ';', 'R15', 'is', 'a', 'loop', 'counter'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No match found for ['mov', '#BufferTable,', 'R14', ';', 'R14', 'points', 'to', 'start', 'of', 'RAM', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No match found for ['mov', '#PatternTable2,', 'R13', ';', 'R13', 'points', 'to', 'start', 'of', 'ROM', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction GetNextByte
DEBUG:BABY ASSEMBLER:No match found for ['mov.b', '0(R13),', '0(R14)', ';', 'copy', 'byte', 'from', 'ROM', 'table', 'to', 'RAM', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction inc
DEBUG:BABY ASSEMBLER:No match found for ['inc', 'R13', ';increment', 'source', 'addr'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction inc
DEBUG:BABY ASSEMBLER:No match found for ['inc', 'R14', ';', 'point', 'to', 'next', 'byte', 'in', 'RAM', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction dec
DEBUG:BABY ASSEMBLER:No match found for ['dec', 'R15', ';', 'done', 'them', 'all', 'yet?'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No match found for ['jnz', 'GetNextByte', ';', 'if', 'no,', 'do', 'some', 'more'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction FinishedCopyingTableToRAM
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Done
DEBUG:BABY ASSEMBLER:No match found for ['jnz', 'Done'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:Found comment at line 77
DEBUG:BABY ASSEMBLER:Found comment at line 78
DEBUG:BABY ASSEMBLER:Found comment at line 79
DEBUG:BABY ASSEMBLER:Found comment at line 81
DEBUG:BABY ASSEMBLER:Found comment at line 82
DEBUG:BABY ASSEMBLER:Found comment at line 83
DEBUG:BABY ASSEMBLER:Found comment at line 85
DEBUG:BABY ASSEMBLER:Found comment at line 87
DEBUG:BABY ASSEMBLER:Found comment at line 88
DEBUG:BABY ASSEMBLER:Found comment at line 89
DEBUG:BABY ASSEMBLER:Found comment at line 92
DEBUG:BABY ASSEMBLER:Found comment at line 93
DEBUG:BABY ASSEMBLER:Found comment at line 94
DEBUG:BABY ASSEMBLER:No other matches so far for instruction PatternTable1
DEBUG:BABY ASSEMBLER:No match found for ['PatternTable1', ';', 'this', 'is', 'just', 'an', 'example', 'table', '(or', 'perhaps', 'more'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row0
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row1
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row2
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row3
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row4
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row5
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row6
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row7
DEBUG:BABY ASSEMBLER:No other matches so far for instruction PatternTable2
DEBUG:BABY ASSEMBLER:Found comment at line 109
DEBUG:BABY ASSEMBLER:Found comment at line 110
DEBUG:BABY ASSEMBLER:Found comment at line 111
DEBUG:BABY ASSEMBLER:No other matches so far for instruction DW
DEBUG:BABY ASSEMBLER:No match found for ['DW', 'RESET', ';', 'establishes', 'the', 'label', 'RESET', 'as'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:Found comment at line 115
DEBUG:BABY ASSEMBLER:Found comment at line 117
WARNING:BABY ASSEMBLER:Previous address was None
DEBUG:BABY ASSEMBLER:No other matches so far for instruction END
WARNING:BABY ASSEMBLER:Got to the else, previous address was None.
DEBUG:BABY ASSEMBLER:Found comment at line 119
DEBUG:BABY ASSEMBLER:Found comment at line 120
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0200',
 'BufferTableSize': '0x0208',
 'ClearNextByte': '0xC000',
 'Count': '0x0201',
 'DW': '0xFFFE',
 'Done': '0xC000',
 'END': None,
 'FinishedClearingRAMtable': '0xC000',
 'FinishedCopyingTableToRAM': '0xC000',
 'GetNextByte': '0xC000',
 'LoopCount': '0x0200',
 'MainProgramStart': '0xC000',
 'PatternTable1': '0xE000',
 'PatternTable2': '0xE000',
 'RESET': '0xC000',
 'Row0': '0xE000',
 'Row1': '0xe001',
 'Row2': '0xe002',
 'Row3': '0xe003',
 'Row4': '0xe004',
 'Row5': '0xe005',
 'Row6': '0xe006',
 'Row7': '0xe007',
 'StopWDT': '0xC000',
 'WDTCTL': '0x0200',
 'WDTHOLD': '0x0200',
 'WDTPW': '0x0200',
 'dec': '0xC000',
 'inc': '0xC000'}
WARNING:BABY ASSEMBLER:Column contains NoneType
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0200                                                \n'
 '31         0200                  ;define a table (array) of 8 bytes\n'
 '32         0208                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         0208                  ; bytes in RAM space          \n'
 '34         0208                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         0208                  ;  literally "Current address minus\n'
 '36         0208                  ;  address of BufferTable"    \n'
 '37         0200                                                \n'
 '38         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         C000                                                \n'
 '46         c002                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         C000                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         C000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c002                  jnz    Done                   \n'
 '76         C000                                                \n'
 '77         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         C000                  ;           End of main code  \n'
 '79         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         C000                                                \n'
 '81         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         C000                  ;           Subroutines       \n'
 '83         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         C000                                                \n'
 '85         C000                  ; none used here              \n'
 '86         C000                                                \n'
 '87         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         C000                  ;           End of all Subroutines\n'
 '89         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         C000                                                \n'
 '91         C000                                                \n'
 '92         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         C000                  ;           Definition of Program Data '
 'Memory\n'
 '94         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         E000                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e001                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e002                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e003                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e004                  Row3    DB  '-'               \n"
 "102        e005                  Row4    DB  '3'               \n"
 "103        e006                  Row5    DB  '3'               \n"
 "104        e007                  Row6    DB  '6'               \n"
 "105        e008                  Row7    DB  '2'               \n"
 '106        E000                                                \n'
 '107        e001                  PatternTable2  DB "EXAMPLES"  \n'
 '108        E000                                                \n'
 '109        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '110        E000                  ;           Interrupt Vectors \n'
 '111        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '112        E000                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        FFFE                  DW      RESET                   ; '
 'establishes the label RESET as\n'
 '115        FFFE                  ; the starting point          \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Found comment at line 0
DEBUG:BABY ASSEMBLER:No found previous value. Continuing.
DEBUG:BABY ASSEMBLER:Found comment at line 1
DEBUG:BABY ASSEMBLER:Found comment at line 2
DEBUG:BABY ASSEMBLER:Found comment at line 3
DEBUG:BABY ASSEMBLER:Found comment at line 4
DEBUG:BABY ASSEMBLER:Found comment at line 5
DEBUG:BABY ASSEMBLER:Found comment at line 6
DEBUG:BABY ASSEMBLER:Found comment at line 7
DEBUG:BABY ASSEMBLER:Found comment at line 8
DEBUG:BABY ASSEMBLER:Found comment at line 9
DEBUG:BABY ASSEMBLER:Found comment at line 10
DEBUG:BABY ASSEMBLER:Found comment at line 11
DEBUG:BABY ASSEMBLER:Found comment at line 12
DEBUG:BABY ASSEMBLER:Found comment at line 13
DEBUG:BABY ASSEMBLER:Found comment at line 14
DEBUG:BABY ASSEMBLER:Found comment at line 15
DEBUG:BABY ASSEMBLER:Found comment at line 16
DEBUG:BABY ASSEMBLER:Found comment at line 17
DEBUG:BABY ASSEMBLER:Found comment at line 18
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTCTL
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 19)
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTPW
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 20)
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTHOLD
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 21)
DEBUG:BABY ASSEMBLER:Found comment at line 23
DEBUG:BABY ASSEMBLER:Found comment at line 24
DEBUG:BABY ASSEMBLER:Found comment at line 25
DEBUG:BABY ASSEMBLER:No other matches so far for instruction LoopCount
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Count
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Found comment at line 0
DEBUG:BABY ASSEMBLER:No found previous value. Continuing.
DEBUG:BABY ASSEMBLER:Found comment at line 1
DEBUG:BABY ASSEMBLER:Found comment at line 2
DEBUG:BABY ASSEMBLER:Found comment at line 3
DEBUG:BABY ASSEMBLER:Found comment at line 4
DEBUG:BABY ASSEMBLER:Found comment at line 5
DEBUG:BABY ASSEMBLER:Found comment at line 6
DEBUG:BABY ASSEMBLER:Found comment at line 7
DEBUG:BABY ASSEMBLER:Found comment at line 8
DEBUG:BABY ASSEMBLER:Found comment at line 9
DEBUG:BABY ASSEMBLER:Found comment at line 10
DEBUG:BABY ASSEMBLER:Found comment at line 11
DEBUG:BABY ASSEMBLER:Found comment at line 12
DEBUG:BABY ASSEMBLER:Found comment at line 13
DEBUG:BABY ASSEMBLER:Found comment at line 14
DEBUG:BABY ASSEMBLER:Found comment at line 15
DEBUG:BABY ASSEMBLER:Found comment at line 16
DEBUG:BABY ASSEMBLER:Found comment at line 17
DEBUG:BABY ASSEMBLER:Found comment at line 18
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTCTL
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 19)
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTPW
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 20)
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTHOLD
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 21)
DEBUG:BABY ASSEMBLER:Found comment at line 23
DEBUG:BABY ASSEMBLER:Found comment at line 24
DEBUG:BABY ASSEMBLER:Found comment at line 25
DEBUG:BABY ASSEMBLER:No other matches so far for instruction LoopCount
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Count
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Found comment at line 0
DEBUG:BABY ASSEMBLER:No found previous value. Continuing.
DEBUG:BABY ASSEMBLER:Found comment at line 1
DEBUG:BABY ASSEMBLER:Found comment at line 2
DEBUG:BABY ASSEMBLER:Found comment at line 3
DEBUG:BABY ASSEMBLER:Found comment at line 4
DEBUG:BABY ASSEMBLER:Found comment at line 5
DEBUG:BABY ASSEMBLER:Found comment at line 6
DEBUG:BABY ASSEMBLER:Found comment at line 7
DEBUG:BABY ASSEMBLER:Found comment at line 8
DEBUG:BABY ASSEMBLER:Found comment at line 9
DEBUG:BABY ASSEMBLER:Found comment at line 10
DEBUG:BABY ASSEMBLER:Found comment at line 11
DEBUG:BABY ASSEMBLER:Found comment at line 12
DEBUG:BABY ASSEMBLER:Found comment at line 13
DEBUG:BABY ASSEMBLER:Found comment at line 14
DEBUG:BABY ASSEMBLER:Found comment at line 15
DEBUG:BABY ASSEMBLER:Found comment at line 16
DEBUG:BABY ASSEMBLER:Found comment at line 17
DEBUG:BABY ASSEMBLER:Found comment at line 18
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTCTL
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 19)
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTPW
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 20)
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTHOLD
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 21)
DEBUG:BABY ASSEMBLER:Found comment at line 23
DEBUG:BABY ASSEMBLER:Found comment at line 24
DEBUG:BABY ASSEMBLER:Found comment at line 25
DEBUG:BABY ASSEMBLER:No other matches so far for instruction LoopCount
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Count
DEBUG:BABY ASSEMBLER:Found comment at line 31
DEBUG:BABY ASSEMBLER:No other matches so far for instruction BufferTable:
DEBUG:BABY ASSEMBLER:Found comment at line 33
DEBUG:BABY ASSEMBLER:No other matches so far for instruction BufferTableSize
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0208 into old val 0x0200 (line 34)
DEBUG:BABY ASSEMBLER:Found comment at line 35
DEBUG:BABY ASSEMBLER:Found comment at line 36
DEBUG:BABY ASSEMBLER:Found comment at line 38
DEBUG:BABY ASSEMBLER:Found comment at line 40
DEBUG:BABY ASSEMBLER:Found comment at line 41
DEBUG:BABY ASSEMBLER:Found comment at line 42
DEBUG:BABY ASSEMBLER:No other matches so far for instruction RESET
DEBUG:BABY ASSEMBLER:Found comment at line 44
DEBUG:BABY ASSEMBLER:No other matches so far for instruction StopWDT
DEBUG:BABY ASSEMBLER:No other matches so far for instruction MainProgramStart
DEBUG:BABY ASSEMBLER:Found comment at line 49
DEBUG:BABY ASSEMBLER:No match found for ['mov', '#BufferTableSize,', 'R15', ';', 'R15', 'is', 'a', 'loop', 'counter'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No match found for ['mov', '#BufferTable,', 'R14', ';', 'R14', 'points', 'to', 'start', 'of', 'RAM', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction ClearNextByte
DEBUG:BABY ASSEMBLER:No match found for ['mov.b', '#0,', '0(R14)', ';', 'clear', 'the', 'location', 'to', 'zero'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction inc
DEBUG:BABY ASSEMBLER:No match found for ['inc', 'R14', ';', 'point', 'to', 'next', 'byte', 'in', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction dec
DEBUG:BABY ASSEMBLER:No match found for ['dec', 'R15', ';', 'done', 'them', 'all', 'yet?'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No match found for ['jnz', 'ClearNextByte', ';', 'if', 'no,', 'do', 'some', 'more'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction FinishedClearingRAMtable
DEBUG:BABY ASSEMBLER:Found comment at line 60
DEBUG:BABY ASSEMBLER:No match found for ['mov', '#BufferTableSize,', 'R15', ';', 'R15', 'is', 'a', 'loop', 'counter'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No match found for ['mov', '#BufferTable,', 'R14', ';', 'R14', 'points', 'to', 'start', 'of', 'RAM', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No match found for ['mov', '#PatternTable2,', 'R13', ';', 'R13', 'points', 'to', 'start', 'of', 'ROM', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction GetNextByte
DEBUG:BABY ASSEMBLER:No match found for ['mov.b', '0(R13),', '0(R14)', ';', 'copy', 'byte', 'from', 'ROM', 'table', 'to', 'RAM', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction inc
DEBUG:BABY ASSEMBLER:No match found for ['inc', 'R13', ';increment', 'source', 'addr'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction inc
DEBUG:BABY ASSEMBLER:No match found for ['inc', 'R14', ';', 'point', 'to', 'next', 'byte', 'in', 'RAM', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction dec
DEBUG:BABY ASSEMBLER:No match found for ['dec', 'R15', ';', 'done', 'them', 'all', 'yet?'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No match found for ['jnz', 'GetNextByte', ';', 'if', 'no,', 'do', 'some', 'more'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction FinishedCopyingTableToRAM
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Done
DEBUG:BABY ASSEMBLER:No match found for ['jnz', 'Done'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:Found comment at line 77
DEBUG:BABY ASSEMBLER:Found comment at line 78
DEBUG:BABY ASSEMBLER:Found comment at line 79
DEBUG:BABY ASSEMBLER:Found comment at line 81
DEBUG:BABY ASSEMBLER:Found comment at line 82
DEBUG:BABY ASSEMBLER:Found comment at line 83
DEBUG:BABY ASSEMBLER:Found comment at line 85
DEBUG:BABY ASSEMBLER:Found comment at line 87
DEBUG:BABY ASSEMBLER:Found comment at line 88
DEBUG:BABY ASSEMBLER:Found comment at line 89
DEBUG:BABY ASSEMBLER:Found comment at line 92
DEBUG:BABY ASSEMBLER:Found comment at line 93
DEBUG:BABY ASSEMBLER:Found comment at line 94
DEBUG:BABY ASSEMBLER:No other matches so far for instruction PatternTable1
DEBUG:BABY ASSEMBLER:No match found for ['PatternTable1', ';', 'this', 'is', 'just', 'an', 'example', 'table', '(or', 'perhaps', 'more'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row0
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row1
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row2
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row3
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row4
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row5
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row6
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row7
DEBUG:BABY ASSEMBLER:No other matches so far for instruction PatternTable2
DEBUG:BABY ASSEMBLER:Found comment at line 109
DEBUG:BABY ASSEMBLER:Found comment at line 110
DEBUG:BABY ASSEMBLER:Found comment at line 111
DEBUG:BABY ASSEMBLER:No other matches so far for instruction DW
DEBUG:BABY ASSEMBLER:No match found for ['DW', 'RESET', ';', 'establishes', 'the', 'label', 'RESET', 'as'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:Found comment at line 115
DEBUG:BABY ASSEMBLER:Found comment at line 117
WARNING:BABY ASSEMBLER:Previous address was None
DEBUG:BABY ASSEMBLER:No other matches so far for instruction END
WARNING:BABY ASSEMBLER:Got to the else, previous address was None.
DEBUG:BABY ASSEMBLER:Found comment at line 119
DEBUG:BABY ASSEMBLER:Found comment at line 120
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0200',
 'BufferTableSize': '0x0208',
 'ClearNextByte': '0xC000',
 'Count': '0x0201',
 'DW': '0xFFFE',
 'Done': '0xC000',
 'END': None,
 'FinishedClearingRAMtable': '0xC000',
 'FinishedCopyingTableToRAM': '0xC000',
 'GetNextByte': '0xC000',
 'LoopCount': '0x0200',
 'MainProgramStart': '0xC000',
 'PatternTable1': '0xE000',
 'PatternTable2': '0xE000',
 'RESET': '0xC000',
 'Row0': '0xE000',
 'Row1': '0xe001',
 'Row2': '0xe002',
 'Row3': '0xe003',
 'Row4': '0xe004',
 'Row5': '0xe005',
 'Row6': '0xe006',
 'Row7': '0xe007',
 'StopWDT': '0xC000',
 'WDTCTL': '0x0200',
 'WDTHOLD': '0x0200',
 'WDTPW': '0x0200',
 'dec': '0xC000',
 'inc': '0xC000'}
WARNING:BABY ASSEMBLER:Column contains NoneType
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0200                                                \n'
 '31         0200                  ;define a table (array) of 8 bytes\n'
 '32         0208                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         0208                  ; bytes in RAM space          \n'
 '34         0208                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         0208                  ;  literally "Current address minus\n'
 '36         0208                  ;  address of BufferTable"    \n'
 '37         0200                                                \n'
 '38         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         C000                                                \n'
 '46         c002                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         C000                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         C000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c002                  jnz    Done                   \n'
 '76         C000                                                \n'
 '77         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         C000                  ;           End of main code  \n'
 '79         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         C000                                                \n'
 '81         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         C000                  ;           Subroutines       \n'
 '83         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         C000                                                \n'
 '85         C000                  ; none used here              \n'
 '86         C000                                                \n'
 '87         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         C000                  ;           End of all Subroutines\n'
 '89         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         C000                                                \n'
 '91         C000                                                \n'
 '92         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         C000                  ;           Definition of Program Data '
 'Memory\n'
 '94         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         E000                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e001                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e002                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e003                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e004                  Row3    DB  '-'               \n"
 "102        e005                  Row4    DB  '3'               \n"
 "103        e006                  Row5    DB  '3'               \n"
 "104        e007                  Row6    DB  '6'               \n"
 "105        e008                  Row7    DB  '2'               \n"
 '106        E000                                                \n'
 '107        e001                  PatternTable2  DB "EXAMPLES"  \n'
 '108        E000                                                \n'
 '109        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '110        E000                  ;           Interrupt Vectors \n'
 '111        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '112        E000                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        FFFE                  DW      RESET                   ; '
 'establishes the label RESET as\n'
 '115        FFFE                  ; the starting point          \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Found comment at line 0
DEBUG:BABY ASSEMBLER:No found previous value. Continuing.
DEBUG:BABY ASSEMBLER:Found comment at line 1
DEBUG:BABY ASSEMBLER:Found comment at line 2
DEBUG:BABY ASSEMBLER:Found comment at line 3
DEBUG:BABY ASSEMBLER:Found comment at line 4
DEBUG:BABY ASSEMBLER:Found comment at line 5
DEBUG:BABY ASSEMBLER:Found comment at line 6
DEBUG:BABY ASSEMBLER:Found comment at line 7
DEBUG:BABY ASSEMBLER:Found comment at line 8
DEBUG:BABY ASSEMBLER:Found comment at line 9
DEBUG:BABY ASSEMBLER:Found comment at line 10
DEBUG:BABY ASSEMBLER:Found comment at line 11
DEBUG:BABY ASSEMBLER:Found comment at line 12
DEBUG:BABY ASSEMBLER:Found comment at line 13
DEBUG:BABY ASSEMBLER:Found comment at line 14
DEBUG:BABY ASSEMBLER:Found comment at line 15
DEBUG:BABY ASSEMBLER:Found comment at line 16
DEBUG:BABY ASSEMBLER:Found comment at line 17
DEBUG:BABY ASSEMBLER:Found comment at line 18
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTCTL
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 19)
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTPW
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 20)
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTHOLD
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 21)
DEBUG:BABY ASSEMBLER:Found comment at line 23
DEBUG:BABY ASSEMBLER:Found comment at line 24
DEBUG:BABY ASSEMBLER:Found comment at line 25
DEBUG:BABY ASSEMBLER:No other matches so far for instruction LoopCount
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Count
DEBUG:BABY ASSEMBLER:Found comment at line 31
DEBUG:BABY ASSEMBLER:No other matches so far for instruction BufferTable:
DEBUG:BABY ASSEMBLER:Found comment at line 33
DEBUG:BABY ASSEMBLER:No other matches so far for instruction BufferTableSize
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0208 into old val 0x0200 (line 34)
DEBUG:BABY ASSEMBLER:Found comment at line 35
DEBUG:BABY ASSEMBLER:Found comment at line 36
DEBUG:BABY ASSEMBLER:Found comment at line 38
DEBUG:BABY ASSEMBLER:Found comment at line 40
DEBUG:BABY ASSEMBLER:Found comment at line 41
DEBUG:BABY ASSEMBLER:Found comment at line 42
DEBUG:BABY ASSEMBLER:No other matches so far for instruction RESET
DEBUG:BABY ASSEMBLER:Found comment at line 44
DEBUG:BABY ASSEMBLER:No other matches so far for instruction StopWDT
DEBUG:BABY ASSEMBLER:No other matches so far for instruction MainProgramStart
DEBUG:BABY ASSEMBLER:Found comment at line 49
DEBUG:BABY ASSEMBLER:No match found for ['mov', '#BufferTableSize,', 'R15', ';', 'R15', 'is', 'a', 'loop', 'counter'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No match found for ['mov', '#BufferTable,', 'R14', ';', 'R14', 'points', 'to', 'start', 'of', 'RAM', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction ClearNextByte
DEBUG:BABY ASSEMBLER:No match found for ['mov.b', '#0,', '0(R14)', ';', 'clear', 'the', 'location', 'to', 'zero'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction inc
DEBUG:BABY ASSEMBLER:No match found for ['inc', 'R14', ';', 'point', 'to', 'next', 'byte', 'in', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction dec
DEBUG:BABY ASSEMBLER:No match found for ['dec', 'R15', ';', 'done', 'them', 'all', 'yet?'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No match found for ['jnz', 'ClearNextByte', ';', 'if', 'no,', 'do', 'some', 'more'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction FinishedClearingRAMtable
DEBUG:BABY ASSEMBLER:Found comment at line 60
DEBUG:BABY ASSEMBLER:No match found for ['mov', '#BufferTableSize,', 'R15', ';', 'R15', 'is', 'a', 'loop', 'counter'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No match found for ['mov', '#BufferTable,', 'R14', ';', 'R14', 'points', 'to', 'start', 'of', 'RAM', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No match found for ['mov', '#PatternTable2,', 'R13', ';', 'R13', 'points', 'to', 'start', 'of', 'ROM', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction GetNextByte
DEBUG:BABY ASSEMBLER:No match found for ['mov.b', '0(R13),', '0(R14)', ';', 'copy', 'byte', 'from', 'ROM', 'table', 'to', 'RAM', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction inc
DEBUG:BABY ASSEMBLER:No match found for ['inc', 'R13', ';increment', 'source', 'addr'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction inc
DEBUG:BABY ASSEMBLER:No match found for ['inc', 'R14', ';', 'point', 'to', 'next', 'byte', 'in', 'RAM', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction dec
DEBUG:BABY ASSEMBLER:No match found for ['dec', 'R15', ';', 'done', 'them', 'all', 'yet?'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No match found for ['jnz', 'GetNextByte', ';', 'if', 'no,', 'do', 'some', 'more'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction FinishedCopyingTableToRAM
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Done
DEBUG:BABY ASSEMBLER:No match found for ['jnz', 'Done'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:Found comment at line 77
DEBUG:BABY ASSEMBLER:Found comment at line 78
DEBUG:BABY ASSEMBLER:Found comment at line 79
DEBUG:BABY ASSEMBLER:Found comment at line 81
DEBUG:BABY ASSEMBLER:Found comment at line 82
DEBUG:BABY ASSEMBLER:Found comment at line 83
DEBUG:BABY ASSEMBLER:Found comment at line 85
DEBUG:BABY ASSEMBLER:Found comment at line 87
DEBUG:BABY ASSEMBLER:Found comment at line 88
DEBUG:BABY ASSEMBLER:Found comment at line 89
DEBUG:BABY ASSEMBLER:Found comment at line 92
DEBUG:BABY ASSEMBLER:Found comment at line 93
DEBUG:BABY ASSEMBLER:Found comment at line 94
DEBUG:BABY ASSEMBLER:No other matches so far for instruction PatternTable1
DEBUG:BABY ASSEMBLER:No match found for ['PatternTable1', ';', 'this', 'is', 'just', 'an', 'example', 'table', '(or', 'perhaps', 'more'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row0
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row1
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row2
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row3
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row4
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row5
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row6
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row7
DEBUG:BABY ASSEMBLER:No other matches so far for instruction PatternTable2
DEBUG:BABY ASSEMBLER:Found comment at line 109
DEBUG:BABY ASSEMBLER:Found comment at line 110
DEBUG:BABY ASSEMBLER:Found comment at line 111
DEBUG:BABY ASSEMBLER:No other matches so far for instruction DW
DEBUG:BABY ASSEMBLER:No match found for ['DW', 'RESET', ';', 'establishes', 'the', 'label', 'RESET', 'as'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:Found comment at line 115
DEBUG:BABY ASSEMBLER:Found comment at line 117
WARNING:BABY ASSEMBLER:Previous address was None
DEBUG:BABY ASSEMBLER:No other matches so far for instruction END
WARNING:BABY ASSEMBLER:Got to the else, previous address was None.
DEBUG:BABY ASSEMBLER:Found comment at line 119
DEBUG:BABY ASSEMBLER:Found comment at line 120
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0200',
 'BufferTableSize': '0x0208',
 'ClearNextByte': '0xC000',
 'Count': '0x0201',
 'DW': '0xFFFE',
 'Done': '0xC000',
 'END': None,
 'FinishedClearingRAMtable': '0xC000',
 'FinishedCopyingTableToRAM': '0xC000',
 'GetNextByte': '0xC000',
 'LoopCount': '0x0200',
 'MainProgramStart': '0xC000',
 'PatternTable1': '0xE000',
 'PatternTable2': '0xE000',
 'RESET': '0xC000',
 'Row0': '0xE000',
 'Row1': '0xe001',
 'Row2': '0xe002',
 'Row3': '0xe003',
 'Row4': '0xe004',
 'Row5': '0xe005',
 'Row6': '0xe006',
 'Row7': '0xe007',
 'StopWDT': '0xC000',
 'WDTCTL': '0x0200',
 'WDTHOLD': '0x0200',
 'WDTPW': '0x0200',
 'dec': '0xC000',
 'inc': '0xC000'}
WARNING:BABY ASSEMBLER:Column contains NoneType
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0200                                                \n'
 '31         0200                  ;define a table (array) of 8 bytes\n'
 '32         0208                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         0208                  ; bytes in RAM space          \n'
 '34         0208                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         0208                  ;  literally "Current address minus\n'
 '36         0208                  ;  address of BufferTable"    \n'
 '37         0200                                                \n'
 '38         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         C000                                                \n'
 '46         c002                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         C000                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         C000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c002                  jnz    Done                   \n'
 '76         C000                                                \n'
 '77         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '78         C000                  ;           End of main code  \n'
 '79         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '80         C000                                                \n'
 '81         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '82         C000                  ;           Subroutines       \n'
 '83         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '84         C000                                                \n'
 '85         C000                  ; none used here              \n'
 '86         C000                                                \n'
 '87         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '88         C000                  ;           End of all Subroutines\n'
 '89         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '90         C000                                                \n'
 '91         C000                                                \n'
 '92         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '93         C000                  ;           Definition of Program Data '
 'Memory\n'
 '94         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         E000                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e001                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e002                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e003                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e004                  Row3    DB  '-'               \n"
 "102        e005                  Row4    DB  '3'               \n"
 "103        e006                  Row5    DB  '3'               \n"
 "104        e007                  Row6    DB  '6'               \n"
 "105        e008                  Row7    DB  '2'               \n"
 '106        E000                                                \n'
 '107        e001                  PatternTable2  DB "EXAMPLES"  \n'
 '108        E000                                                \n'
 '109        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '110        E000                  ;           Interrupt Vectors \n'
 '111        E000                  '
 ';-------------------------------------------------------------------------------\n'
 '112        E000                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        FFFE                  DW      RESET                   ; '
 'establishes the label RESET as\n'
 '115        FFFE                  ; the starting point          \n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Found comment at line 0
DEBUG:BABY ASSEMBLER:No found previous value. Continuing.
DEBUG:BABY ASSEMBLER:Found comment at line 1
DEBUG:BABY ASSEMBLER:Found comment at line 2
DEBUG:BABY ASSEMBLER:Found comment at line 3
DEBUG:BABY ASSEMBLER:Found comment at line 4
DEBUG:BABY ASSEMBLER:Found comment at line 5
DEBUG:BABY ASSEMBLER:Found comment at line 6
DEBUG:BABY ASSEMBLER:Found comment at line 7
DEBUG:BABY ASSEMBLER:Found comment at line 8
DEBUG:BABY ASSEMBLER:Found comment at line 9
DEBUG:BABY ASSEMBLER:Found comment at line 10
DEBUG:BABY ASSEMBLER:Found comment at line 11
DEBUG:BABY ASSEMBLER:Found comment at line 12
DEBUG:BABY ASSEMBLER:Found comment at line 13
DEBUG:BABY ASSEMBLER:Found comment at line 14
DEBUG:BABY ASSEMBLER:Found comment at line 15
DEBUG:BABY ASSEMBLER:Found comment at line 16
DEBUG:BABY ASSEMBLER:Found comment at line 17
DEBUG:BABY ASSEMBLER:Found comment at line 18
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTCTL
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 19)
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTPW
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 20)
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTHOLD
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 21)
DEBUG:BABY ASSEMBLER:Found whitespace at line 22
DEBUG:BABY ASSEMBLER:Found comment at line 23
DEBUG:BABY ASSEMBLER:Found comment at line 24
DEBUG:BABY ASSEMBLER:Found comment at line 25
DEBUG:BABY ASSEMBLER:Found whitespace at line 26
DEBUG:BABY ASSEMBLER:No other matches so far for instruction LoopCount
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Count
DEBUG:BABY ASSEMBLER:Found whitespace at line 30
DEBUG:BABY ASSEMBLER:Found comment at line 31
DEBUG:BABY ASSEMBLER:No other matches so far for instruction BufferTable:
DEBUG:BABY ASSEMBLER:Found comment at line 33
DEBUG:BABY ASSEMBLER:No other matches so far for instruction BufferTableSize
DEBUG:BABY ASSEMBLER:Storing previous val of 0x020a into old val 0x0200 (line 34)
DEBUG:BABY ASSEMBLER:Found comment at line 35
DEBUG:BABY ASSEMBLER:Found comment at line 36
DEBUG:BABY ASSEMBLER:Found whitespace at line 37
DEBUG:BABY ASSEMBLER:Found comment at line 38
DEBUG:BABY ASSEMBLER:Found comment at line 40
DEBUG:BABY ASSEMBLER:Found comment at line 41
DEBUG:BABY ASSEMBLER:Found comment at line 42
DEBUG:BABY ASSEMBLER:No other matches so far for instruction RESET
DEBUG:BABY ASSEMBLER:Found comment at line 44
DEBUG:BABY ASSEMBLER:Found whitespace at line 45
DEBUG:BABY ASSEMBLER:No other matches so far for instruction StopWDT
DEBUG:BABY ASSEMBLER:Found whitespace at line 47
DEBUG:BABY ASSEMBLER:No other matches so far for instruction MainProgramStart
DEBUG:BABY ASSEMBLER:Found comment at line 49
DEBUG:BABY ASSEMBLER:No match found for ['mov', '#BufferTableSize,', 'R15', ';', 'R15', 'is', 'a', 'loop', 'counter'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No match found for ['mov', '#BufferTable,', 'R14', ';', 'R14', 'points', 'to', 'start', 'of', 'RAM', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction ClearNextByte
DEBUG:BABY ASSEMBLER:No match found for ['mov.b', '#0,', '0(R14)', ';', 'clear', 'the', 'location', 'to', 'zero'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:Found whitespace at line 54
DEBUG:BABY ASSEMBLER:No other matches so far for instruction inc
DEBUG:BABY ASSEMBLER:No match found for ['inc', 'R14', ';', 'point', 'to', 'next', 'byte', 'in', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction dec
DEBUG:BABY ASSEMBLER:No match found for ['dec', 'R15', ';', 'done', 'them', 'all', 'yet?'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No match found for ['jnz', 'ClearNextByte', ';', 'if', 'no,', 'do', 'some', 'more'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction FinishedClearingRAMtable
DEBUG:BABY ASSEMBLER:Found whitespace at line 59
DEBUG:BABY ASSEMBLER:Found comment at line 60
DEBUG:BABY ASSEMBLER:No match found for ['mov', '#BufferTableSize,', 'R15', ';', 'R15', 'is', 'a', 'loop', 'counter'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No match found for ['mov', '#BufferTable,', 'R14', ';', 'R14', 'points', 'to', 'start', 'of', 'RAM', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No match found for ['mov', '#PatternTable2,', 'R13', ';', 'R13', 'points', 'to', 'start', 'of', 'ROM', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:Found whitespace at line 64
DEBUG:BABY ASSEMBLER:No other matches so far for instruction GetNextByte
DEBUG:BABY ASSEMBLER:No match found for ['mov.b', '0(R13),', '0(R14)', ';', 'copy', 'byte', 'from', 'ROM', 'table', 'to', 'RAM', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:Found whitespace at line 67
DEBUG:BABY ASSEMBLER:No other matches so far for instruction inc
DEBUG:BABY ASSEMBLER:No match found for ['inc', 'R13', ';increment', 'source', 'addr'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction inc
DEBUG:BABY ASSEMBLER:No match found for ['inc', 'R14', ';', 'point', 'to', 'next', 'byte', 'in', 'RAM', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction dec
DEBUG:BABY ASSEMBLER:No match found for ['dec', 'R15', ';', 'done', 'them', 'all', 'yet?'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No match found for ['jnz', 'GetNextByte', ';', 'if', 'no,', 'do', 'some', 'more'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction FinishedCopyingTableToRAM
DEBUG:BABY ASSEMBLER:Found whitespace at line 73
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Done
DEBUG:BABY ASSEMBLER:No match found for ['jnz', 'Done'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:Found whitespace at line 76
DEBUG:BABY ASSEMBLER:Found comment at line 77
DEBUG:BABY ASSEMBLER:Found comment at line 78
DEBUG:BABY ASSEMBLER:Found comment at line 79
DEBUG:BABY ASSEMBLER:Found whitespace at line 80
DEBUG:BABY ASSEMBLER:Found comment at line 81
DEBUG:BABY ASSEMBLER:Found comment at line 82
DEBUG:BABY ASSEMBLER:Found comment at line 83
DEBUG:BABY ASSEMBLER:Found whitespace at line 84
DEBUG:BABY ASSEMBLER:Found comment at line 85
DEBUG:BABY ASSEMBLER:Found whitespace at line 86
DEBUG:BABY ASSEMBLER:Found comment at line 87
DEBUG:BABY ASSEMBLER:Found comment at line 88
DEBUG:BABY ASSEMBLER:Found comment at line 89
DEBUG:BABY ASSEMBLER:Found whitespace at line 90
DEBUG:BABY ASSEMBLER:Found whitespace at line 91
DEBUG:BABY ASSEMBLER:Found comment at line 92
DEBUG:BABY ASSEMBLER:Found comment at line 93
DEBUG:BABY ASSEMBLER:Found comment at line 94
DEBUG:BABY ASSEMBLER:Found whitespace at line 96
DEBUG:BABY ASSEMBLER:No other matches so far for instruction PatternTable1
DEBUG:BABY ASSEMBLER:No match found for ['PatternTable1', ';', 'this', 'is', 'just', 'an', 'example', 'table', '(or', 'perhaps', 'more'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row0
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row1
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row2
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row3
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row4
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row5
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row6
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row7
DEBUG:BABY ASSEMBLER:Found whitespace at line 106
DEBUG:BABY ASSEMBLER:No other matches so far for instruction PatternTable2
DEBUG:BABY ASSEMBLER:Found whitespace at line 108
DEBUG:BABY ASSEMBLER:Found comment at line 109
DEBUG:BABY ASSEMBLER:Found comment at line 110
DEBUG:BABY ASSEMBLER:Found comment at line 111
DEBUG:BABY ASSEMBLER:Found whitespace at line 112
DEBUG:BABY ASSEMBLER:No other matches so far for instruction DW
DEBUG:BABY ASSEMBLER:No match found for ['DW', 'RESET', ';', 'establishes', 'the', 'label', 'RESET', 'as'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:Found comment at line 115
DEBUG:BABY ASSEMBLER:Found whitespace at line 116
DEBUG:BABY ASSEMBLER:Found comment at line 117
DEBUG:BABY ASSEMBLER:No other matches so far for instruction END
DEBUG:BABY ASSEMBLER:No match found for ['END', ';', 'END', 'of', 'all', 'code', 'for', 'this', 'program'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:Found comment at line 119
DEBUG:BABY ASSEMBLER:Found comment at line 120
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0202',
 'BufferTableSize': '0x020a',
 'ClearNextByte': '0xC000',
 'Count': '0x0201',
 'DW': '0xFFFE',
 'Done': '0xC000',
 'END': '0xFFFE',
 'FinishedClearingRAMtable': '0xC000',
 'FinishedCopyingTableToRAM': '0xC000',
 'GetNextByte': '0xC000',
 'LoopCount': '0x0200',
 'MainProgramStart': '0xc004',
 'PatternTable1': '0xE000',
 'PatternTable2': '0xe008',
 'RESET': '0xC000',
 'Row0': '0xE000',
 'Row1': '0xe001',
 'Row2': '0xe002',
 'Row3': '0xe003',
 'Row4': '0xe004',
 'Row5': '0xe005',
 'Row6': '0xe006',
 'Row7': '0xe007',
 'StopWDT': '0xc002',
 'WDTCTL': '0x0200',
 'WDTHOLD': '0x0200',
 'WDTPW': '0x0200',
 'dec': '0xC000',
 'inc': '0xC000'}
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         C000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c002                  jnz    Done                   \n'
 '76         c002                                                \n'
 '77         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '78         c002                  ;           End of main code  \n'
 '79         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '80         c002                                                \n'
 '81         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '82         c002                  ;           Subroutines       \n'
 '83         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '84         c002                                                \n'
 '85         c002                  ; none used here              \n'
 '86         c002                                                \n'
 '87         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '88         c002                  ;           End of all Subroutines\n'
 '89         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '90         c002                                                \n'
 '91         c002                                                \n'
 '92         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '93         c002                  ;           Definition of Program Data '
 'Memory\n'
 '94         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         E000                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e001                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e002                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e003                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e004                  Row3    DB  '-'               \n"
 "102        e005                  Row4    DB  '3'               \n"
 "103        e006                  Row5    DB  '3'               \n"
 "104        e007                  Row6    DB  '6'               \n"
 "105        e008                  Row7    DB  '2'               \n"
 '106        e008                                                \n'
 '107        e009                  PatternTable2  DB "EXAMPLES"  \n'
 '108        e009                                                \n'
 '109        e009                  '
 ';-------------------------------------------------------------------------------\n'
 '110        e009                  ;           Interrupt Vectors \n'
 '111        e009                  '
 ';-------------------------------------------------------------------------------\n'
 '112        e009                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        FFFE                  DW      RESET                   ; '
 'establishes the label RESET as\n'
 '115        FFFE                  ; the starting point          \n'
 '116        FFFE                                                \n'
 '117        FFFE                  '
 ';-------------------------------------------------------------------------------\n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Found comment at line 0
DEBUG:BABY ASSEMBLER:No found previous value. Continuing.
DEBUG:BABY ASSEMBLER:Found comment at line 1
DEBUG:BABY ASSEMBLER:Found comment at line 2
DEBUG:BABY ASSEMBLER:Found comment at line 3
DEBUG:BABY ASSEMBLER:Found comment at line 4
DEBUG:BABY ASSEMBLER:Found comment at line 5
DEBUG:BABY ASSEMBLER:Found comment at line 6
DEBUG:BABY ASSEMBLER:Found comment at line 7
DEBUG:BABY ASSEMBLER:Found comment at line 8
DEBUG:BABY ASSEMBLER:Found comment at line 9
DEBUG:BABY ASSEMBLER:Found comment at line 10
DEBUG:BABY ASSEMBLER:Found comment at line 11
DEBUG:BABY ASSEMBLER:Found comment at line 12
DEBUG:BABY ASSEMBLER:Found comment at line 13
DEBUG:BABY ASSEMBLER:Found comment at line 14
DEBUG:BABY ASSEMBLER:Found comment at line 15
DEBUG:BABY ASSEMBLER:Found comment at line 16
DEBUG:BABY ASSEMBLER:Found comment at line 17
DEBUG:BABY ASSEMBLER:Found comment at line 18
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTCTL
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 19)
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTPW
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 20)
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTHOLD
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 21)
DEBUG:BABY ASSEMBLER:Found whitespace at line 22
DEBUG:BABY ASSEMBLER:Found comment at line 23
DEBUG:BABY ASSEMBLER:Found comment at line 24
DEBUG:BABY ASSEMBLER:Found comment at line 25
DEBUG:BABY ASSEMBLER:Found whitespace at line 26
DEBUG:BABY ASSEMBLER:No other matches so far for instruction LoopCount
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Count
DEBUG:BABY ASSEMBLER:Found whitespace at line 30
DEBUG:BABY ASSEMBLER:Found comment at line 31
DEBUG:BABY ASSEMBLER:No other matches so far for instruction BufferTable:
DEBUG:BABY ASSEMBLER:Found comment at line 33
DEBUG:BABY ASSEMBLER:No other matches so far for instruction BufferTableSize
DEBUG:BABY ASSEMBLER:Storing previous val of 0x020a into old val 0x0200 (line 34)
DEBUG:BABY ASSEMBLER:Found comment at line 35
DEBUG:BABY ASSEMBLER:Found comment at line 36
DEBUG:BABY ASSEMBLER:Found whitespace at line 37
DEBUG:BABY ASSEMBLER:Found comment at line 38
DEBUG:BABY ASSEMBLER:Found comment at line 40
DEBUG:BABY ASSEMBLER:Found comment at line 41
DEBUG:BABY ASSEMBLER:Found comment at line 42
DEBUG:BABY ASSEMBLER:No other matches so far for instruction RESET
DEBUG:BABY ASSEMBLER:Found comment at line 44
DEBUG:BABY ASSEMBLER:Found whitespace at line 45
DEBUG:BABY ASSEMBLER:No other matches so far for instruction StopWDT
DEBUG:BABY ASSEMBLER:Found whitespace at line 47
DEBUG:BABY ASSEMBLER:No other matches so far for instruction MainProgramStart
DEBUG:BABY ASSEMBLER:Found comment at line 49
DEBUG:BABY ASSEMBLER:No match found for ['mov', '#BufferTableSize,', 'R15', ';', 'R15', 'is', 'a', 'loop', 'counter'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No match found for ['mov', '#BufferTable,', 'R14', ';', 'R14', 'points', 'to', 'start', 'of', 'RAM', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction ClearNextByte
DEBUG:BABY ASSEMBLER:No match found for ['mov.b', '#0,', '0(R14)', ';', 'clear', 'the', 'location', 'to', 'zero'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:Found whitespace at line 54
DEBUG:BABY ASSEMBLER:No other matches so far for instruction inc
DEBUG:BABY ASSEMBLER:No match found for ['inc', 'R14', ';', 'point', 'to', 'next', 'byte', 'in', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction dec
DEBUG:BABY ASSEMBLER:No match found for ['dec', 'R15', ';', 'done', 'them', 'all', 'yet?'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No match found for ['jnz', 'ClearNextByte', ';', 'if', 'no,', 'do', 'some', 'more'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction FinishedClearingRAMtable
DEBUG:BABY ASSEMBLER:Found whitespace at line 59
DEBUG:BABY ASSEMBLER:Found comment at line 60
DEBUG:BABY ASSEMBLER:No match found for ['mov', '#BufferTableSize,', 'R15', ';', 'R15', 'is', 'a', 'loop', 'counter'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No match found for ['mov', '#BufferTable,', 'R14', ';', 'R14', 'points', 'to', 'start', 'of', 'RAM', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No match found for ['mov', '#PatternTable2,', 'R13', ';', 'R13', 'points', 'to', 'start', 'of', 'ROM', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:Found whitespace at line 64
DEBUG:BABY ASSEMBLER:No other matches so far for instruction GetNextByte
DEBUG:BABY ASSEMBLER:No match found for ['mov.b', '0(R13),', '0(R14)', ';', 'copy', 'byte', 'from', 'ROM', 'table', 'to', 'RAM', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:Found whitespace at line 67
DEBUG:BABY ASSEMBLER:No other matches so far for instruction inc
DEBUG:BABY ASSEMBLER:No match found for ['inc', 'R13', ';increment', 'source', 'addr'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction inc
DEBUG:BABY ASSEMBLER:No match found for ['inc', 'R14', ';', 'point', 'to', 'next', 'byte', 'in', 'RAM', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction dec
DEBUG:BABY ASSEMBLER:No match found for ['dec', 'R15', ';', 'done', 'them', 'all', 'yet?'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No match found for ['jnz', 'GetNextByte', ';', 'if', 'no,', 'do', 'some', 'more'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction FinishedCopyingTableToRAM
DEBUG:BABY ASSEMBLER:Found whitespace at line 73
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Done
DEBUG:BABY ASSEMBLER:No match found for ['jnz', 'Done'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:Found whitespace at line 76
DEBUG:BABY ASSEMBLER:Found comment at line 77
DEBUG:BABY ASSEMBLER:Found comment at line 78
DEBUG:BABY ASSEMBLER:Found comment at line 79
DEBUG:BABY ASSEMBLER:Found whitespace at line 80
DEBUG:BABY ASSEMBLER:Found comment at line 81
DEBUG:BABY ASSEMBLER:Found comment at line 82
DEBUG:BABY ASSEMBLER:Found comment at line 83
DEBUG:BABY ASSEMBLER:Found whitespace at line 84
DEBUG:BABY ASSEMBLER:Found comment at line 85
DEBUG:BABY ASSEMBLER:Found whitespace at line 86
DEBUG:BABY ASSEMBLER:Found comment at line 87
DEBUG:BABY ASSEMBLER:Found comment at line 88
DEBUG:BABY ASSEMBLER:Found comment at line 89
DEBUG:BABY ASSEMBLER:Found whitespace at line 90
DEBUG:BABY ASSEMBLER:Found whitespace at line 91
DEBUG:BABY ASSEMBLER:Found comment at line 92
DEBUG:BABY ASSEMBLER:Found comment at line 93
DEBUG:BABY ASSEMBLER:Found comment at line 94
DEBUG:BABY ASSEMBLER:Found whitespace at line 96
DEBUG:BABY ASSEMBLER:No other matches so far for instruction PatternTable1
DEBUG:BABY ASSEMBLER:No match found for ['PatternTable1', ';', 'this', 'is', 'just', 'an', 'example', 'table', '(or', 'perhaps', 'more'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row0
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row1
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row2
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row3
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row4
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row5
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row6
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row7
DEBUG:BABY ASSEMBLER:Found whitespace at line 106
DEBUG:BABY ASSEMBLER:No other matches so far for instruction PatternTable2
DEBUG:BABY ASSEMBLER:Found whitespace at line 108
DEBUG:BABY ASSEMBLER:Found comment at line 109
DEBUG:BABY ASSEMBLER:Found comment at line 110
DEBUG:BABY ASSEMBLER:Found comment at line 111
DEBUG:BABY ASSEMBLER:Found whitespace at line 112
DEBUG:BABY ASSEMBLER:No other matches so far for instruction DW
DEBUG:BABY ASSEMBLER:No match found for ['DW', 'RESET', ';', 'establishes', 'the', 'label', 'RESET', 'as'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:Found comment at line 115
DEBUG:BABY ASSEMBLER:Found whitespace at line 116
DEBUG:BABY ASSEMBLER:Found comment at line 117
DEBUG:BABY ASSEMBLER:No other matches so far for instruction END
DEBUG:BABY ASSEMBLER:No match found for ['END', ';', 'END', 'of', 'all', 'code', 'for', 'this', 'program'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:Found comment at line 119
DEBUG:BABY ASSEMBLER:Found comment at line 120
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0202',
 'BufferTableSize': '0x020a',
 'ClearNextByte': '0xC000',
 'Count': '0x0201',
 'DW': '0xFFFE',
 'Done': '0xC000',
 'END': '0xFFFE',
 'FinishedClearingRAMtable': '0xC000',
 'FinishedCopyingTableToRAM': '0xC000',
 'GetNextByte': '0xC000',
 'LoopCount': '0x0200',
 'MainProgramStart': '0xc004',
 'PatternTable1': '0xE000',
 'PatternTable2': '0xe008',
 'RESET': '0xC000',
 'Row0': '0xE000',
 'Row1': '0xe001',
 'Row2': '0xe002',
 'Row3': '0xe003',
 'Row4': '0xe004',
 'Row5': '0xe005',
 'Row6': '0xe006',
 'Row7': '0xe007',
 'StopWDT': '0xc002',
 'WDTCTL': '0x0200',
 'WDTHOLD': '0x0200',
 'WDTPW': '0x0200',
 'dec': '0xC000',
 'inc': '0xC000'}
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         C000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c002                  jnz    Done                   \n'
 '76         c002                                                \n'
 '77         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '78         c002                  ;           End of main code  \n'
 '79         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '80         c002                                                \n'
 '81         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '82         c002                  ;           Subroutines       \n'
 '83         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '84         c002                                                \n'
 '85         c002                  ; none used here              \n'
 '86         c002                                                \n'
 '87         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '88         c002                  ;           End of all Subroutines\n'
 '89         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '90         c002                                                \n'
 '91         c002                                                \n'
 '92         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '93         c002                  ;           Definition of Program Data '
 'Memory\n'
 '94         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         E000                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e001                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e002                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e003                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e004                  Row3    DB  '-'               \n"
 "102        e005                  Row4    DB  '3'               \n"
 "103        e006                  Row5    DB  '3'               \n"
 "104        e007                  Row6    DB  '6'               \n"
 "105        e008                  Row7    DB  '2'               \n"
 '106        e008                                                \n'
 '107        e009                  PatternTable2  DB "EXAMPLES"  \n'
 '108        e009                                                \n'
 '109        e009                  '
 ';-------------------------------------------------------------------------------\n'
 '110        e009                  ;           Interrupt Vectors \n'
 '111        e009                  '
 ';-------------------------------------------------------------------------------\n'
 '112        e009                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        FFFE                  DW      RESET                   ; '
 'establishes the label RESET as\n'
 '115        FFFE                  ; the starting point          \n'
 '116        FFFE                                                \n'
 '117        FFFE                  '
 ';-------------------------------------------------------------------------------\n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Found comment at line 0
DEBUG:BABY ASSEMBLER:No found previous value. Continuing.
DEBUG:BABY ASSEMBLER:Found comment at line 1
DEBUG:BABY ASSEMBLER:Found comment at line 2
DEBUG:BABY ASSEMBLER:Found comment at line 3
DEBUG:BABY ASSEMBLER:Found comment at line 4
DEBUG:BABY ASSEMBLER:Found comment at line 5
DEBUG:BABY ASSEMBLER:Found comment at line 6
DEBUG:BABY ASSEMBLER:Found comment at line 7
DEBUG:BABY ASSEMBLER:Found comment at line 8
DEBUG:BABY ASSEMBLER:Found comment at line 9
DEBUG:BABY ASSEMBLER:Found comment at line 10
DEBUG:BABY ASSEMBLER:Found comment at line 11
DEBUG:BABY ASSEMBLER:Found comment at line 12
DEBUG:BABY ASSEMBLER:Found comment at line 13
DEBUG:BABY ASSEMBLER:Found comment at line 14
DEBUG:BABY ASSEMBLER:Found comment at line 15
DEBUG:BABY ASSEMBLER:Found comment at line 16
DEBUG:BABY ASSEMBLER:Found comment at line 17
DEBUG:BABY ASSEMBLER:Found comment at line 18
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTCTL
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 19)
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTPW
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 20)
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTHOLD
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 21)
DEBUG:BABY ASSEMBLER:Found whitespace at line 22
DEBUG:BABY ASSEMBLER:Found comment at line 23
DEBUG:BABY ASSEMBLER:Found comment at line 24
DEBUG:BABY ASSEMBLER:Found comment at line 25
DEBUG:BABY ASSEMBLER:Found whitespace at line 26
DEBUG:BABY ASSEMBLER:No other matches so far for instruction LoopCount
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Count
DEBUG:BABY ASSEMBLER:Found whitespace at line 30
DEBUG:BABY ASSEMBLER:Found comment at line 31
DEBUG:BABY ASSEMBLER:No other matches so far for instruction BufferTable:
DEBUG:BABY ASSEMBLER:Found comment at line 33
DEBUG:BABY ASSEMBLER:No other matches so far for instruction BufferTableSize
DEBUG:BABY ASSEMBLER:Storing previous val of 0x020a into old val 0x0200 (line 34)
DEBUG:BABY ASSEMBLER:Found comment at line 35
DEBUG:BABY ASSEMBLER:Found comment at line 36
DEBUG:BABY ASSEMBLER:Found whitespace at line 37
DEBUG:BABY ASSEMBLER:Found comment at line 38
DEBUG:BABY ASSEMBLER:Found comment at line 40
DEBUG:BABY ASSEMBLER:Found comment at line 41
DEBUG:BABY ASSEMBLER:Found comment at line 42
DEBUG:BABY ASSEMBLER:No other matches so far for instruction RESET
DEBUG:BABY ASSEMBLER:Found comment at line 44
DEBUG:BABY ASSEMBLER:Found whitespace at line 45
DEBUG:BABY ASSEMBLER:No other matches so far for instruction StopWDT
DEBUG:BABY ASSEMBLER:Found whitespace at line 47
DEBUG:BABY ASSEMBLER:No other matches so far for instruction MainProgramStart
DEBUG:BABY ASSEMBLER:Found comment at line 49
DEBUG:BABY ASSEMBLER:No match found for ['mov', '#BufferTableSize,', 'R15', ';', 'R15', 'is', 'a', 'loop', 'counter'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No match found for ['mov', '#BufferTable,', 'R14', ';', 'R14', 'points', 'to', 'start', 'of', 'RAM', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction ClearNextByte
DEBUG:BABY ASSEMBLER:No match found for ['mov.b', '#0,', '0(R14)', ';', 'clear', 'the', 'location', 'to', 'zero'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:Found whitespace at line 54
DEBUG:BABY ASSEMBLER:No other matches so far for instruction inc
DEBUG:BABY ASSEMBLER:No match found for ['inc', 'R14', ';', 'point', 'to', 'next', 'byte', 'in', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction dec
DEBUG:BABY ASSEMBLER:No match found for ['dec', 'R15', ';', 'done', 'them', 'all', 'yet?'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No match found for ['jnz', 'ClearNextByte', ';', 'if', 'no,', 'do', 'some', 'more'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction FinishedClearingRAMtable
DEBUG:BABY ASSEMBLER:Found whitespace at line 59
DEBUG:BABY ASSEMBLER:Found comment at line 60
DEBUG:BABY ASSEMBLER:No match found for ['mov', '#BufferTableSize,', 'R15', ';', 'R15', 'is', 'a', 'loop', 'counter'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No match found for ['mov', '#BufferTable,', 'R14', ';', 'R14', 'points', 'to', 'start', 'of', 'RAM', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No match found for ['mov', '#PatternTable2,', 'R13', ';', 'R13', 'points', 'to', 'start', 'of', 'ROM', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:Found whitespace at line 64
DEBUG:BABY ASSEMBLER:No other matches so far for instruction GetNextByte
DEBUG:BABY ASSEMBLER:No match found for ['mov.b', '0(R13),', '0(R14)', ';', 'copy', 'byte', 'from', 'ROM', 'table', 'to', 'RAM', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:Found whitespace at line 67
DEBUG:BABY ASSEMBLER:No other matches so far for instruction inc
DEBUG:BABY ASSEMBLER:No match found for ['inc', 'R13', ';increment', 'source', 'addr'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction inc
DEBUG:BABY ASSEMBLER:No match found for ['inc', 'R14', ';', 'point', 'to', 'next', 'byte', 'in', 'RAM', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction dec
DEBUG:BABY ASSEMBLER:No match found for ['dec', 'R15', ';', 'done', 'them', 'all', 'yet?'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No match found for ['jnz', 'GetNextByte', ';', 'if', 'no,', 'do', 'some', 'more'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction FinishedCopyingTableToRAM
DEBUG:BABY ASSEMBLER:Found whitespace at line 73
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Done
DEBUG:BABY ASSEMBLER:No match found for ['jnz', 'Done'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:Found whitespace at line 76
DEBUG:BABY ASSEMBLER:Found comment at line 77
DEBUG:BABY ASSEMBLER:Found comment at line 78
DEBUG:BABY ASSEMBLER:Found comment at line 79
DEBUG:BABY ASSEMBLER:Found whitespace at line 80
DEBUG:BABY ASSEMBLER:Found comment at line 81
DEBUG:BABY ASSEMBLER:Found comment at line 82
DEBUG:BABY ASSEMBLER:Found comment at line 83
DEBUG:BABY ASSEMBLER:Found whitespace at line 84
DEBUG:BABY ASSEMBLER:Found comment at line 85
DEBUG:BABY ASSEMBLER:Found whitespace at line 86
DEBUG:BABY ASSEMBLER:Found comment at line 87
DEBUG:BABY ASSEMBLER:Found comment at line 88
DEBUG:BABY ASSEMBLER:Found comment at line 89
DEBUG:BABY ASSEMBLER:Found whitespace at line 90
DEBUG:BABY ASSEMBLER:Found whitespace at line 91
DEBUG:BABY ASSEMBLER:Found comment at line 92
DEBUG:BABY ASSEMBLER:Found comment at line 93
DEBUG:BABY ASSEMBLER:Found comment at line 94
DEBUG:BABY ASSEMBLER:Found whitespace at line 96
DEBUG:BABY ASSEMBLER:No other matches so far for instruction PatternTable1
DEBUG:BABY ASSEMBLER:No match found for ['PatternTable1', ';', 'this', 'is', 'just', 'an', 'example', 'table', '(or', 'perhaps', 'more'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row0
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row1
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row2
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row3
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row4
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row5
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row6
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row7
DEBUG:BABY ASSEMBLER:Found whitespace at line 106
DEBUG:BABY ASSEMBLER:No other matches so far for instruction PatternTable2
DEBUG:BABY ASSEMBLER:Found whitespace at line 108
DEBUG:BABY ASSEMBLER:Found comment at line 109
DEBUG:BABY ASSEMBLER:Found comment at line 110
DEBUG:BABY ASSEMBLER:Found comment at line 111
DEBUG:BABY ASSEMBLER:Found whitespace at line 112
DEBUG:BABY ASSEMBLER:No other matches so far for instruction DW
DEBUG:BABY ASSEMBLER:No match found for ['DW', 'RESET', ';', 'establishes', 'the', 'label', 'RESET', 'as'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:Found comment at line 115
DEBUG:BABY ASSEMBLER:Found whitespace at line 116
DEBUG:BABY ASSEMBLER:Found comment at line 117
DEBUG:BABY ASSEMBLER:No other matches so far for instruction END
DEBUG:BABY ASSEMBLER:No match found for ['END', ';', 'END', 'of', 'all', 'code', 'for', 'this', 'program'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:Found comment at line 119
DEBUG:BABY ASSEMBLER:Found comment at line 120
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0202',
 'BufferTableSize': '0x020a',
 'ClearNextByte': '0xC000',
 'Count': '0x0201',
 'DW': '0xFFFE',
 'Done': '0xC000',
 'END': '0xFFFE',
 'FinishedClearingRAMtable': '0xC000',
 'FinishedCopyingTableToRAM': '0xC000',
 'GetNextByte': '0xC000',
 'LoopCount': '0x0200',
 'MainProgramStart': '0xc004',
 'PatternTable1': '0xE000',
 'PatternTable2': '0xe008',
 'RESET': '0xC000',
 'Row0': '0xE000',
 'Row1': '0xe001',
 'Row2': '0xe002',
 'Row3': '0xe003',
 'Row4': '0xe004',
 'Row5': '0xe005',
 'Row6': '0xe006',
 'Row7': '0xe007',
 'StopWDT': '0xc002',
 'WDTCTL': '0x0200',
 'WDTHOLD': '0x0200',
 'WDTPW': '0x0200',
 'dec': '0xC000',
 'inc': '0xC000'}
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         C000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c002                  jnz    Done                   \n'
 '76         c002                                                \n'
 '77         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '78         c002                  ;           End of main code  \n'
 '79         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '80         c002                                                \n'
 '81         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '82         c002                  ;           Subroutines       \n'
 '83         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '84         c002                                                \n'
 '85         c002                  ; none used here              \n'
 '86         c002                                                \n'
 '87         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '88         c002                  ;           End of all Subroutines\n'
 '89         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '90         c002                                                \n'
 '91         c002                                                \n'
 '92         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '93         c002                  ;           Definition of Program Data '
 'Memory\n'
 '94         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         E000                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e001                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e002                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e003                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e004                  Row3    DB  '-'               \n"
 "102        e005                  Row4    DB  '3'               \n"
 "103        e006                  Row5    DB  '3'               \n"
 "104        e007                  Row6    DB  '6'               \n"
 "105        e008                  Row7    DB  '2'               \n"
 '106        e008                                                \n'
 '107        e009                  PatternTable2  DB "EXAMPLES"  \n'
 '108        e009                                                \n'
 '109        e009                  '
 ';-------------------------------------------------------------------------------\n'
 '110        e009                  ;           Interrupt Vectors \n'
 '111        e009                  '
 ';-------------------------------------------------------------------------------\n'
 '112        e009                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        FFFE                  DW      RESET                   ; '
 'establishes the label RESET as\n'
 '115        FFFE                  ; the starting point          \n'
 '116        FFFE                                                \n'
 '117        FFFE                  '
 ';-------------------------------------------------------------------------------\n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Found comment at line 0
DEBUG:BABY ASSEMBLER:No found previous value. Continuing.
DEBUG:BABY ASSEMBLER:Found comment at line 1
DEBUG:BABY ASSEMBLER:Found comment at line 2
DEBUG:BABY ASSEMBLER:Found comment at line 3
DEBUG:BABY ASSEMBLER:Found comment at line 4
DEBUG:BABY ASSEMBLER:Found comment at line 5
DEBUG:BABY ASSEMBLER:Found comment at line 6
DEBUG:BABY ASSEMBLER:Found comment at line 7
DEBUG:BABY ASSEMBLER:Found comment at line 8
DEBUG:BABY ASSEMBLER:Found comment at line 9
DEBUG:BABY ASSEMBLER:Found comment at line 10
DEBUG:BABY ASSEMBLER:Found comment at line 11
DEBUG:BABY ASSEMBLER:Found comment at line 12
DEBUG:BABY ASSEMBLER:Found comment at line 13
DEBUG:BABY ASSEMBLER:Found comment at line 14
DEBUG:BABY ASSEMBLER:Found comment at line 15
DEBUG:BABY ASSEMBLER:Found comment at line 16
DEBUG:BABY ASSEMBLER:Found comment at line 17
DEBUG:BABY ASSEMBLER:Found comment at line 18
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTCTL
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 19)
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTPW
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 20)
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTHOLD
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 21)
DEBUG:BABY ASSEMBLER:Found whitespace at line 22
DEBUG:BABY ASSEMBLER:Found comment at line 23
DEBUG:BABY ASSEMBLER:Found comment at line 24
DEBUG:BABY ASSEMBLER:Found comment at line 25
DEBUG:BABY ASSEMBLER:Found whitespace at line 26
DEBUG:BABY ASSEMBLER:No other matches so far for instruction LoopCount
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Count
DEBUG:BABY ASSEMBLER:Found whitespace at line 30
DEBUG:BABY ASSEMBLER:Found comment at line 31
DEBUG:BABY ASSEMBLER:No other matches so far for instruction BufferTable:
DEBUG:BABY ASSEMBLER:Found comment at line 33
DEBUG:BABY ASSEMBLER:No other matches so far for instruction BufferTableSize
DEBUG:BABY ASSEMBLER:Storing previous val of 0x020a into old val 0x0200 (line 34)
DEBUG:BABY ASSEMBLER:Found comment at line 35
DEBUG:BABY ASSEMBLER:Found comment at line 36
DEBUG:BABY ASSEMBLER:Found whitespace at line 37
DEBUG:BABY ASSEMBLER:Found comment at line 38
DEBUG:BABY ASSEMBLER:Found comment at line 40
DEBUG:BABY ASSEMBLER:Found comment at line 41
DEBUG:BABY ASSEMBLER:Found comment at line 42
DEBUG:BABY ASSEMBLER:No other matches so far for instruction RESET
DEBUG:BABY ASSEMBLER:Found comment at line 44
DEBUG:BABY ASSEMBLER:Found whitespace at line 45
DEBUG:BABY ASSEMBLER:No other matches so far for instruction StopWDT
DEBUG:BABY ASSEMBLER:Found whitespace at line 47
DEBUG:BABY ASSEMBLER:No other matches so far for instruction MainProgramStart
DEBUG:BABY ASSEMBLER:Found comment at line 49
DEBUG:BABY ASSEMBLER:No match found for ['mov', '#BufferTableSize,', 'R15', ';', 'R15', 'is', 'a', 'loop', 'counter'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No match found for ['mov', '#BufferTable,', 'R14', ';', 'R14', 'points', 'to', 'start', 'of', 'RAM', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction ClearNextByte
DEBUG:BABY ASSEMBLER:No match found for ['mov.b', '#0,', '0(R14)', ';', 'clear', 'the', 'location', 'to', 'zero'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:Found whitespace at line 54
DEBUG:BABY ASSEMBLER:No other matches so far for instruction inc
DEBUG:BABY ASSEMBLER:No match found for ['inc', 'R14', ';', 'point', 'to', 'next', 'byte', 'in', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction dec
DEBUG:BABY ASSEMBLER:No match found for ['dec', 'R15', ';', 'done', 'them', 'all', 'yet?'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No match found for ['jnz', 'ClearNextByte', ';', 'if', 'no,', 'do', 'some', 'more'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction FinishedClearingRAMtable
DEBUG:BABY ASSEMBLER:Found whitespace at line 59
DEBUG:BABY ASSEMBLER:Found comment at line 60
DEBUG:BABY ASSEMBLER:No match found for ['mov', '#BufferTableSize,', 'R15', ';', 'R15', 'is', 'a', 'loop', 'counter'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No match found for ['mov', '#BufferTable,', 'R14', ';', 'R14', 'points', 'to', 'start', 'of', 'RAM', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No match found for ['mov', '#PatternTable2,', 'R13', ';', 'R13', 'points', 'to', 'start', 'of', 'ROM', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:Found whitespace at line 64
DEBUG:BABY ASSEMBLER:No other matches so far for instruction GetNextByte
DEBUG:BABY ASSEMBLER:No match found for ['mov.b', '0(R13),', '0(R14)', ';', 'copy', 'byte', 'from', 'ROM', 'table', 'to', 'RAM', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:Found whitespace at line 67
DEBUG:BABY ASSEMBLER:No other matches so far for instruction inc
DEBUG:BABY ASSEMBLER:No match found for ['inc', 'R13', ';increment', 'source', 'addr'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction inc
DEBUG:BABY ASSEMBLER:No match found for ['inc', 'R14', ';', 'point', 'to', 'next', 'byte', 'in', 'RAM', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction dec
DEBUG:BABY ASSEMBLER:No match found for ['dec', 'R15', ';', 'done', 'them', 'all', 'yet?'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No match found for ['jnz', 'GetNextByte', ';', 'if', 'no,', 'do', 'some', 'more'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction FinishedCopyingTableToRAM
DEBUG:BABY ASSEMBLER:Found whitespace at line 73
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Done
DEBUG:BABY ASSEMBLER:No match found for ['jnz', 'Done'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:Found whitespace at line 76
DEBUG:BABY ASSEMBLER:Found comment at line 77
DEBUG:BABY ASSEMBLER:Found comment at line 78
DEBUG:BABY ASSEMBLER:Found comment at line 79
DEBUG:BABY ASSEMBLER:Found whitespace at line 80
DEBUG:BABY ASSEMBLER:Found comment at line 81
DEBUG:BABY ASSEMBLER:Found comment at line 82
DEBUG:BABY ASSEMBLER:Found comment at line 83
DEBUG:BABY ASSEMBLER:Found whitespace at line 84
DEBUG:BABY ASSEMBLER:Found comment at line 85
DEBUG:BABY ASSEMBLER:Found whitespace at line 86
DEBUG:BABY ASSEMBLER:Found comment at line 87
DEBUG:BABY ASSEMBLER:Found comment at line 88
DEBUG:BABY ASSEMBLER:Found comment at line 89
DEBUG:BABY ASSEMBLER:Found whitespace at line 90
DEBUG:BABY ASSEMBLER:Found whitespace at line 91
DEBUG:BABY ASSEMBLER:Found comment at line 92
DEBUG:BABY ASSEMBLER:Found comment at line 93
DEBUG:BABY ASSEMBLER:Found comment at line 94
DEBUG:BABY ASSEMBLER:Found whitespace at line 96
DEBUG:BABY ASSEMBLER:No other matches so far for instruction PatternTable1
DEBUG:BABY ASSEMBLER:No match found for ['PatternTable1', ';', 'this', 'is', 'just', 'an', 'example', 'table', '(or', 'perhaps', 'more'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row0
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row1
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row2
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row3
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row4
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row5
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row6
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row7
DEBUG:BABY ASSEMBLER:Found whitespace at line 106
DEBUG:BABY ASSEMBLER:No other matches so far for instruction PatternTable2
DEBUG:BABY ASSEMBLER:Found whitespace at line 108
DEBUG:BABY ASSEMBLER:Found comment at line 109
DEBUG:BABY ASSEMBLER:Found comment at line 110
DEBUG:BABY ASSEMBLER:Found comment at line 111
DEBUG:BABY ASSEMBLER:Found whitespace at line 112
DEBUG:BABY ASSEMBLER:No other matches so far for instruction DW
DEBUG:BABY ASSEMBLER:No match found for ['DW', 'RESET', ';', 'establishes', 'the', 'label', 'RESET', 'as'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:Found comment at line 115
DEBUG:BABY ASSEMBLER:Found whitespace at line 116
DEBUG:BABY ASSEMBLER:Found comment at line 117
DEBUG:BABY ASSEMBLER:No other matches so far for instruction END
DEBUG:BABY ASSEMBLER:No match found for ['END', ';', 'END', 'of', 'all', 'code', 'for', 'this', 'program'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:Found comment at line 119
DEBUG:BABY ASSEMBLER:Found comment at line 120
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0202',
 'BufferTableSize': '0x020a',
 'ClearNextByte': '0xC000',
 'Count': '0x0201',
 'DW': '0xFFFE',
 'Done': '0xC000',
 'END': '0xFFFE',
 'FinishedClearingRAMtable': '0xC000',
 'FinishedCopyingTableToRAM': '0xC000',
 'GetNextByte': '0xC000',
 'LoopCount': '0x0200',
 'MainProgramStart': '0xc004',
 'PatternTable1': '0xE000',
 'PatternTable2': '0xe008',
 'RESET': '0xC000',
 'Row0': '0xE000',
 'Row1': '0xe001',
 'Row2': '0xe002',
 'Row3': '0xe003',
 'Row4': '0xe004',
 'Row5': '0xe005',
 'Row6': '0xe006',
 'Row7': '0xe007',
 'StopWDT': '0xc002',
 'WDTCTL': '0x0200',
 'WDTHOLD': '0x0200',
 'WDTPW': '0x0200',
 'dec': '0xC000',
 'inc': '0xC000'}
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         C000                  jnz  GetNextByte     ; if no, do some '
 'more\n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         C000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         C000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         C000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         C000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c002                  jnz    Done                   \n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         C000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c002                  jnz    Done                   \n'
 '76         c002                                                \n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         C000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c002                  jnz    Done                   \n'
 '76         c002                                                \n'
 '77         c002                  '
 ';-------------------------------------------------------------------------------\n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         C000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c002                  jnz    Done                   \n'
 '76         c002                                                \n'
 '77         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '78         c002                  ;           End of main code  \n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         C000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c002                  jnz    Done                   \n'
 '76         c002                                                \n'
 '77         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '78         c002                  ;           End of main code  \n'
 '79         c002                  '
 ';-------------------------------------------------------------------------------\n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         C000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c002                  jnz    Done                   \n'
 '76         c002                                                \n'
 '77         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '78         c002                  ;           End of main code  \n'
 '79         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '80         c002                                                \n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         C000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c002                  jnz    Done                   \n'
 '76         c002                                                \n'
 '77         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '78         c002                  ;           End of main code  \n'
 '79         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '80         c002                                                \n'
 '81         c002                  '
 ';-------------------------------------------------------------------------------\n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         C000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c002                  jnz    Done                   \n'
 '76         c002                                                \n'
 '77         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '78         c002                  ;           End of main code  \n'
 '79         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '80         c002                                                \n'
 '81         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '82         c002                  ;           Subroutines       \n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         C000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c002                  jnz    Done                   \n'
 '76         c002                                                \n'
 '77         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '78         c002                  ;           End of main code  \n'
 '79         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '80         c002                                                \n'
 '81         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '82         c002                  ;           Subroutines       \n'
 '83         c002                  '
 ';-------------------------------------------------------------------------------\n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         C000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c002                  jnz    Done                   \n'
 '76         c002                                                \n'
 '77         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '78         c002                  ;           End of main code  \n'
 '79         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '80         c002                                                \n'
 '81         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '82         c002                  ;           Subroutines       \n'
 '83         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '84         c002                                                \n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         C000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c002                  jnz    Done                   \n'
 '76         c002                                                \n'
 '77         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '78         c002                  ;           End of main code  \n'
 '79         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '80         c002                                                \n'
 '81         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '82         c002                  ;           Subroutines       \n'
 '83         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '84         c002                                                \n'
 '85         c002                  ; none used here              \n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         C000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c002                  jnz    Done                   \n'
 '76         c002                                                \n'
 '77         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '78         c002                  ;           End of main code  \n'
 '79         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '80         c002                                                \n'
 '81         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '82         c002                  ;           Subroutines       \n'
 '83         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '84         c002                                                \n'
 '85         c002                  ; none used here              \n'
 '86         c002                                                \n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         C000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c002                  jnz    Done                   \n'
 '76         c002                                                \n'
 '77         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '78         c002                  ;           End of main code  \n'
 '79         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '80         c002                                                \n'
 '81         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '82         c002                  ;           Subroutines       \n'
 '83         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '84         c002                                                \n'
 '85         c002                  ; none used here              \n'
 '86         c002                                                \n'
 '87         c002                  '
 ';-------------------------------------------------------------------------------\n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         C000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c002                  jnz    Done                   \n'
 '76         c002                                                \n'
 '77         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '78         c002                  ;           End of main code  \n'
 '79         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '80         c002                                                \n'
 '81         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '82         c002                  ;           Subroutines       \n'
 '83         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '84         c002                                                \n'
 '85         c002                  ; none used here              \n'
 '86         c002                                                \n'
 '87         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '88         c002                  ;           End of all Subroutines\n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         C000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c002                  jnz    Done                   \n'
 '76         c002                                                \n'
 '77         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '78         c002                  ;           End of main code  \n'
 '79         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '80         c002                                                \n'
 '81         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '82         c002                  ;           Subroutines       \n'
 '83         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '84         c002                                                \n'
 '85         c002                  ; none used here              \n'
 '86         c002                                                \n'
 '87         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '88         c002                  ;           End of all Subroutines\n'
 '89         c002                  '
 ';-------------------------------------------------------------------------------\n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         C000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c002                  jnz    Done                   \n'
 '76         c002                                                \n'
 '77         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '78         c002                  ;           End of main code  \n'
 '79         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '80         c002                                                \n'
 '81         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '82         c002                  ;           Subroutines       \n'
 '83         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '84         c002                                                \n'
 '85         c002                  ; none used here              \n'
 '86         c002                                                \n'
 '87         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '88         c002                  ;           End of all Subroutines\n'
 '89         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '90         c002                                                \n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         C000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c002                  jnz    Done                   \n'
 '76         c002                                                \n'
 '77         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '78         c002                  ;           End of main code  \n'
 '79         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '80         c002                                                \n'
 '81         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '82         c002                  ;           Subroutines       \n'
 '83         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '84         c002                                                \n'
 '85         c002                  ; none used here              \n'
 '86         c002                                                \n'
 '87         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '88         c002                  ;           End of all Subroutines\n'
 '89         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '90         c002                                                \n'
 '91         c002                                                \n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         C000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c002                  jnz    Done                   \n'
 '76         c002                                                \n'
 '77         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '78         c002                  ;           End of main code  \n'
 '79         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '80         c002                                                \n'
 '81         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '82         c002                  ;           Subroutines       \n'
 '83         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '84         c002                                                \n'
 '85         c002                  ; none used here              \n'
 '86         c002                                                \n'
 '87         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '88         c002                  ;           End of all Subroutines\n'
 '89         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '90         c002                                                \n'
 '91         c002                                                \n'
 '92         c002                  '
 ';-------------------------------------------------------------------------------\n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         C000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c002                  jnz    Done                   \n'
 '76         c002                                                \n'
 '77         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '78         c002                  ;           End of main code  \n'
 '79         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '80         c002                                                \n'
 '81         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '82         c002                  ;           Subroutines       \n'
 '83         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '84         c002                                                \n'
 '85         c002                  ; none used here              \n'
 '86         c002                                                \n'
 '87         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '88         c002                  ;           End of all Subroutines\n'
 '89         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '90         c002                                                \n'
 '91         c002                                                \n'
 '92         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '93         c002                  ;           Definition of Program Data '
 'Memory\n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         C000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c002                  jnz    Done                   \n'
 '76         c002                                                \n'
 '77         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '78         c002                  ;           End of main code  \n'
 '79         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '80         c002                                                \n'
 '81         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '82         c002                  ;           Subroutines       \n'
 '83         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '84         c002                                                \n'
 '85         c002                  ; none used here              \n'
 '86         c002                                                \n'
 '87         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '88         c002                  ;           End of all Subroutines\n'
 '89         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '90         c002                                                \n'
 '91         c002                                                \n'
 '92         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '93         c002                  ;           Definition of Program Data '
 'Memory\n'
 '94         c002                  '
 ';-------------------------------------------------------------------------------\n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         C000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c002                  jnz    Done                   \n'
 '76         c002                                                \n'
 '77         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '78         c002                  ;           End of main code  \n'
 '79         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '80         c002                                                \n'
 '81         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '82         c002                  ;           Subroutines       \n'
 '83         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '84         c002                                                \n'
 '85         c002                  ; none used here              \n'
 '86         c002                                                \n'
 '87         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '88         c002                  ;           End of all Subroutines\n'
 '89         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '90         c002                                                \n'
 '91         c002                                                \n'
 '92         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '93         c002                  ;           Definition of Program Data '
 'Memory\n'
 '94         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         C000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c002                  jnz    Done                   \n'
 '76         c002                                                \n'
 '77         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '78         c002                  ;           End of main code  \n'
 '79         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '80         c002                                                \n'
 '81         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '82         c002                  ;           Subroutines       \n'
 '83         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '84         c002                                                \n'
 '85         c002                  ; none used here              \n'
 '86         c002                                                \n'
 '87         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '88         c002                  ;           End of all Subroutines\n'
 '89         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '90         c002                                                \n'
 '91         c002                                                \n'
 '92         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '93         c002                  ;           Definition of Program Data '
 'Memory\n'
 '94         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         C000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c002                  jnz    Done                   \n'
 '76         c002                                                \n'
 '77         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '78         c002                  ;           End of main code  \n'
 '79         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '80         c002                                                \n'
 '81         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '82         c002                  ;           Subroutines       \n'
 '83         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '84         c002                                                \n'
 '85         c002                  ; none used here              \n'
 '86         c002                                                \n'
 '87         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '88         c002                  ;           End of all Subroutines\n'
 '89         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '90         c002                                                \n'
 '91         c002                                                \n'
 '92         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '93         c002                  ;           Definition of Program Data '
 'Memory\n'
 '94         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         E000                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         C000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c002                  jnz    Done                   \n'
 '76         c002                                                \n'
 '77         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '78         c002                  ;           End of main code  \n'
 '79         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '80         c002                                                \n'
 '81         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '82         c002                  ;           Subroutines       \n'
 '83         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '84         c002                                                \n'
 '85         c002                  ; none used here              \n'
 '86         c002                                                \n'
 '87         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '88         c002                  ;           End of all Subroutines\n'
 '89         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '90         c002                                                \n'
 '91         c002                                                \n'
 '92         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '93         c002                  ;           Definition of Program Data '
 'Memory\n'
 '94         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         E000                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e001                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         C000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c002                  jnz    Done                   \n'
 '76         c002                                                \n'
 '77         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '78         c002                  ;           End of main code  \n'
 '79         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '80         c002                                                \n'
 '81         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '82         c002                  ;           Subroutines       \n'
 '83         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '84         c002                                                \n'
 '85         c002                  ; none used here              \n'
 '86         c002                                                \n'
 '87         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '88         c002                  ;           End of all Subroutines\n'
 '89         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '90         c002                                                \n'
 '91         c002                                                \n'
 '92         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '93         c002                  ;           Definition of Program Data '
 'Memory\n'
 '94         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         E000                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e001                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e002                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         C000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c002                  jnz    Done                   \n'
 '76         c002                                                \n'
 '77         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '78         c002                  ;           End of main code  \n'
 '79         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '80         c002                                                \n'
 '81         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '82         c002                  ;           Subroutines       \n'
 '83         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '84         c002                                                \n'
 '85         c002                  ; none used here              \n'
 '86         c002                                                \n'
 '87         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '88         c002                  ;           End of all Subroutines\n'
 '89         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '90         c002                                                \n'
 '91         c002                                                \n'
 '92         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '93         c002                  ;           Definition of Program Data '
 'Memory\n'
 '94         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         E000                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e001                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e002                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e003                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         C000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c002                  jnz    Done                   \n'
 '76         c002                                                \n'
 '77         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '78         c002                  ;           End of main code  \n'
 '79         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '80         c002                                                \n'
 '81         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '82         c002                  ;           Subroutines       \n'
 '83         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '84         c002                                                \n'
 '85         c002                  ; none used here              \n'
 '86         c002                                                \n'
 '87         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '88         c002                  ;           End of all Subroutines\n'
 '89         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '90         c002                                                \n'
 '91         c002                                                \n'
 '92         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '93         c002                  ;           Definition of Program Data '
 'Memory\n'
 '94         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         E000                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e001                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e002                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e003                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e004                  Row3    DB  '-'               \n")
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         C000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c002                  jnz    Done                   \n'
 '76         c002                                                \n'
 '77         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '78         c002                  ;           End of main code  \n'
 '79         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '80         c002                                                \n'
 '81         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '82         c002                  ;           Subroutines       \n'
 '83         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '84         c002                                                \n'
 '85         c002                  ; none used here              \n'
 '86         c002                                                \n'
 '87         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '88         c002                  ;           End of all Subroutines\n'
 '89         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '90         c002                                                \n'
 '91         c002                                                \n'
 '92         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '93         c002                  ;           Definition of Program Data '
 'Memory\n'
 '94         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         E000                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e001                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e002                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e003                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e004                  Row3    DB  '-'               \n"
 "102        e005                  Row4    DB  '3'               \n")
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         C000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c002                  jnz    Done                   \n'
 '76         c002                                                \n'
 '77         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '78         c002                  ;           End of main code  \n'
 '79         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '80         c002                                                \n'
 '81         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '82         c002                  ;           Subroutines       \n'
 '83         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '84         c002                                                \n'
 '85         c002                  ; none used here              \n'
 '86         c002                                                \n'
 '87         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '88         c002                  ;           End of all Subroutines\n'
 '89         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '90         c002                                                \n'
 '91         c002                                                \n'
 '92         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '93         c002                  ;           Definition of Program Data '
 'Memory\n'
 '94         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         E000                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e001                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e002                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e003                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e004                  Row3    DB  '-'               \n"
 "102        e005                  Row4    DB  '3'               \n"
 "103        e006                  Row5    DB  '3'               \n")
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         C000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c002                  jnz    Done                   \n'
 '76         c002                                                \n'
 '77         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '78         c002                  ;           End of main code  \n'
 '79         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '80         c002                                                \n'
 '81         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '82         c002                  ;           Subroutines       \n'
 '83         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '84         c002                                                \n'
 '85         c002                  ; none used here              \n'
 '86         c002                                                \n'
 '87         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '88         c002                  ;           End of all Subroutines\n'
 '89         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '90         c002                                                \n'
 '91         c002                                                \n'
 '92         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '93         c002                  ;           Definition of Program Data '
 'Memory\n'
 '94         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         E000                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e001                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e002                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e003                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e004                  Row3    DB  '-'               \n"
 "102        e005                  Row4    DB  '3'               \n"
 "103        e006                  Row5    DB  '3'               \n"
 "104        e007                  Row6    DB  '6'               \n")
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         C000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c002                  jnz    Done                   \n'
 '76         c002                                                \n'
 '77         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '78         c002                  ;           End of main code  \n'
 '79         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '80         c002                                                \n'
 '81         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '82         c002                  ;           Subroutines       \n'
 '83         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '84         c002                                                \n'
 '85         c002                  ; none used here              \n'
 '86         c002                                                \n'
 '87         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '88         c002                  ;           End of all Subroutines\n'
 '89         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '90         c002                                                \n'
 '91         c002                                                \n'
 '92         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '93         c002                  ;           Definition of Program Data '
 'Memory\n'
 '94         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         E000                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e001                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e002                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e003                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e004                  Row3    DB  '-'               \n"
 "102        e005                  Row4    DB  '3'               \n"
 "103        e006                  Row5    DB  '3'               \n"
 "104        e007                  Row6    DB  '6'               \n"
 "105        e008                  Row7    DB  '2'               \n")
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         C000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c002                  jnz    Done                   \n'
 '76         c002                                                \n'
 '77         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '78         c002                  ;           End of main code  \n'
 '79         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '80         c002                                                \n'
 '81         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '82         c002                  ;           Subroutines       \n'
 '83         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '84         c002                                                \n'
 '85         c002                  ; none used here              \n'
 '86         c002                                                \n'
 '87         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '88         c002                  ;           End of all Subroutines\n'
 '89         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '90         c002                                                \n'
 '91         c002                                                \n'
 '92         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '93         c002                  ;           Definition of Program Data '
 'Memory\n'
 '94         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         E000                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e001                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e002                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e003                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e004                  Row3    DB  '-'               \n"
 "102        e005                  Row4    DB  '3'               \n"
 "103        e006                  Row5    DB  '3'               \n"
 "104        e007                  Row6    DB  '6'               \n"
 "105        e008                  Row7    DB  '2'               \n"
 '106        e008                                                \n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         C000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c002                  jnz    Done                   \n'
 '76         c002                                                \n'
 '77         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '78         c002                  ;           End of main code  \n'
 '79         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '80         c002                                                \n'
 '81         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '82         c002                  ;           Subroutines       \n'
 '83         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '84         c002                                                \n'
 '85         c002                  ; none used here              \n'
 '86         c002                                                \n'
 '87         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '88         c002                  ;           End of all Subroutines\n'
 '89         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '90         c002                                                \n'
 '91         c002                                                \n'
 '92         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '93         c002                  ;           Definition of Program Data '
 'Memory\n'
 '94         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         E000                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e001                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e002                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e003                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e004                  Row3    DB  '-'               \n"
 "102        e005                  Row4    DB  '3'               \n"
 "103        e006                  Row5    DB  '3'               \n"
 "104        e007                  Row6    DB  '6'               \n"
 "105        e008                  Row7    DB  '2'               \n"
 '106        e008                                                \n'
 '107        e009                  PatternTable2  DB "EXAMPLES"  \n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         C000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c002                  jnz    Done                   \n'
 '76         c002                                                \n'
 '77         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '78         c002                  ;           End of main code  \n'
 '79         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '80         c002                                                \n'
 '81         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '82         c002                  ;           Subroutines       \n'
 '83         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '84         c002                                                \n'
 '85         c002                  ; none used here              \n'
 '86         c002                                                \n'
 '87         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '88         c002                  ;           End of all Subroutines\n'
 '89         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '90         c002                                                \n'
 '91         c002                                                \n'
 '92         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '93         c002                  ;           Definition of Program Data '
 'Memory\n'
 '94         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         E000                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e001                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e002                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e003                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e004                  Row3    DB  '-'               \n"
 "102        e005                  Row4    DB  '3'               \n"
 "103        e006                  Row5    DB  '3'               \n"
 "104        e007                  Row6    DB  '6'               \n"
 "105        e008                  Row7    DB  '2'               \n"
 '106        e008                                                \n'
 '107        e009                  PatternTable2  DB "EXAMPLES"  \n'
 '108        e009                                                \n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         C000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c002                  jnz    Done                   \n'
 '76         c002                                                \n'
 '77         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '78         c002                  ;           End of main code  \n'
 '79         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '80         c002                                                \n'
 '81         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '82         c002                  ;           Subroutines       \n'
 '83         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '84         c002                                                \n'
 '85         c002                  ; none used here              \n'
 '86         c002                                                \n'
 '87         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '88         c002                  ;           End of all Subroutines\n'
 '89         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '90         c002                                                \n'
 '91         c002                                                \n'
 '92         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '93         c002                  ;           Definition of Program Data '
 'Memory\n'
 '94         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         E000                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e001                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e002                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e003                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e004                  Row3    DB  '-'               \n"
 "102        e005                  Row4    DB  '3'               \n"
 "103        e006                  Row5    DB  '3'               \n"
 "104        e007                  Row6    DB  '6'               \n"
 "105        e008                  Row7    DB  '2'               \n"
 '106        e008                                                \n'
 '107        e009                  PatternTable2  DB "EXAMPLES"  \n'
 '108        e009                                                \n'
 '109        e009                  '
 ';-------------------------------------------------------------------------------\n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         C000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c002                  jnz    Done                   \n'
 '76         c002                                                \n'
 '77         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '78         c002                  ;           End of main code  \n'
 '79         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '80         c002                                                \n'
 '81         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '82         c002                  ;           Subroutines       \n'
 '83         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '84         c002                                                \n'
 '85         c002                  ; none used here              \n'
 '86         c002                                                \n'
 '87         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '88         c002                  ;           End of all Subroutines\n'
 '89         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '90         c002                                                \n'
 '91         c002                                                \n'
 '92         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '93         c002                  ;           Definition of Program Data '
 'Memory\n'
 '94         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         E000                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e001                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e002                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e003                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e004                  Row3    DB  '-'               \n"
 "102        e005                  Row4    DB  '3'               \n"
 "103        e006                  Row5    DB  '3'               \n"
 "104        e007                  Row6    DB  '6'               \n"
 "105        e008                  Row7    DB  '2'               \n"
 '106        e008                                                \n'
 '107        e009                  PatternTable2  DB "EXAMPLES"  \n'
 '108        e009                                                \n'
 '109        e009                  '
 ';-------------------------------------------------------------------------------\n'
 '110        e009                  ;           Interrupt Vectors \n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         C000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c002                  jnz    Done                   \n'
 '76         c002                                                \n'
 '77         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '78         c002                  ;           End of main code  \n'
 '79         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '80         c002                                                \n'
 '81         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '82         c002                  ;           Subroutines       \n'
 '83         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '84         c002                                                \n'
 '85         c002                  ; none used here              \n'
 '86         c002                                                \n'
 '87         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '88         c002                  ;           End of all Subroutines\n'
 '89         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '90         c002                                                \n'
 '91         c002                                                \n'
 '92         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '93         c002                  ;           Definition of Program Data '
 'Memory\n'
 '94         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         E000                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e001                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e002                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e003                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e004                  Row3    DB  '-'               \n"
 "102        e005                  Row4    DB  '3'               \n"
 "103        e006                  Row5    DB  '3'               \n"
 "104        e007                  Row6    DB  '6'               \n"
 "105        e008                  Row7    DB  '2'               \n"
 '106        e008                                                \n'
 '107        e009                  PatternTable2  DB "EXAMPLES"  \n'
 '108        e009                                                \n'
 '109        e009                  '
 ';-------------------------------------------------------------------------------\n'
 '110        e009                  ;           Interrupt Vectors \n'
 '111        e009                  '
 ';-------------------------------------------------------------------------------\n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         C000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c002                  jnz    Done                   \n'
 '76         c002                                                \n'
 '77         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '78         c002                  ;           End of main code  \n'
 '79         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '80         c002                                                \n'
 '81         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '82         c002                  ;           Subroutines       \n'
 '83         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '84         c002                                                \n'
 '85         c002                  ; none used here              \n'
 '86         c002                                                \n'
 '87         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '88         c002                  ;           End of all Subroutines\n'
 '89         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '90         c002                                                \n'
 '91         c002                                                \n'
 '92         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '93         c002                  ;           Definition of Program Data '
 'Memory\n'
 '94         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         E000                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e001                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e002                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e003                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e004                  Row3    DB  '-'               \n"
 "102        e005                  Row4    DB  '3'               \n"
 "103        e006                  Row5    DB  '3'               \n"
 "104        e007                  Row6    DB  '6'               \n"
 "105        e008                  Row7    DB  '2'               \n"
 '106        e008                                                \n'
 '107        e009                  PatternTable2  DB "EXAMPLES"  \n'
 '108        e009                                                \n'
 '109        e009                  '
 ';-------------------------------------------------------------------------------\n'
 '110        e009                  ;           Interrupt Vectors \n'
 '111        e009                  '
 ';-------------------------------------------------------------------------------\n'
 '112        e009                                                \n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         C000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c002                  jnz    Done                   \n'
 '76         c002                                                \n'
 '77         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '78         c002                  ;           End of main code  \n'
 '79         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '80         c002                                                \n'
 '81         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '82         c002                  ;           Subroutines       \n'
 '83         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '84         c002                                                \n'
 '85         c002                  ; none used here              \n'
 '86         c002                                                \n'
 '87         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '88         c002                  ;           End of all Subroutines\n'
 '89         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '90         c002                                                \n'
 '91         c002                                                \n'
 '92         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '93         c002                  ;           Definition of Program Data '
 'Memory\n'
 '94         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         E000                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e001                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e002                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e003                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e004                  Row3    DB  '-'               \n"
 "102        e005                  Row4    DB  '3'               \n"
 "103        e006                  Row5    DB  '3'               \n"
 "104        e007                  Row6    DB  '6'               \n"
 "105        e008                  Row7    DB  '2'               \n"
 '106        e008                                                \n'
 '107        e009                  PatternTable2  DB "EXAMPLES"  \n'
 '108        e009                                                \n'
 '109        e009                  '
 ';-------------------------------------------------------------------------------\n'
 '110        e009                  ;           Interrupt Vectors \n'
 '111        e009                  '
 ';-------------------------------------------------------------------------------\n'
 '112        e009                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         C000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c002                  jnz    Done                   \n'
 '76         c002                                                \n'
 '77         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '78         c002                  ;           End of main code  \n'
 '79         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '80         c002                                                \n'
 '81         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '82         c002                  ;           Subroutines       \n'
 '83         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '84         c002                                                \n'
 '85         c002                  ; none used here              \n'
 '86         c002                                                \n'
 '87         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '88         c002                  ;           End of all Subroutines\n'
 '89         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '90         c002                                                \n'
 '91         c002                                                \n'
 '92         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '93         c002                  ;           Definition of Program Data '
 'Memory\n'
 '94         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         E000                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e001                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e002                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e003                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e004                  Row3    DB  '-'               \n"
 "102        e005                  Row4    DB  '3'               \n"
 "103        e006                  Row5    DB  '3'               \n"
 "104        e007                  Row6    DB  '6'               \n"
 "105        e008                  Row7    DB  '2'               \n"
 '106        e008                                                \n'
 '107        e009                  PatternTable2  DB "EXAMPLES"  \n'
 '108        e009                                                \n'
 '109        e009                  '
 ';-------------------------------------------------------------------------------\n'
 '110        e009                  ;           Interrupt Vectors \n'
 '111        e009                  '
 ';-------------------------------------------------------------------------------\n'
 '112        e009                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        FFFE                  DW      RESET                   ; '
 'establishes the label RESET as\n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         C000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c002                  jnz    Done                   \n'
 '76         c002                                                \n'
 '77         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '78         c002                  ;           End of main code  \n'
 '79         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '80         c002                                                \n'
 '81         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '82         c002                  ;           Subroutines       \n'
 '83         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '84         c002                                                \n'
 '85         c002                  ; none used here              \n'
 '86         c002                                                \n'
 '87         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '88         c002                  ;           End of all Subroutines\n'
 '89         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '90         c002                                                \n'
 '91         c002                                                \n'
 '92         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '93         c002                  ;           Definition of Program Data '
 'Memory\n'
 '94         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         E000                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e001                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e002                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e003                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e004                  Row3    DB  '-'               \n"
 "102        e005                  Row4    DB  '3'               \n"
 "103        e006                  Row5    DB  '3'               \n"
 "104        e007                  Row6    DB  '6'               \n"
 "105        e008                  Row7    DB  '2'               \n"
 '106        e008                                                \n'
 '107        e009                  PatternTable2  DB "EXAMPLES"  \n'
 '108        e009                                                \n'
 '109        e009                  '
 ';-------------------------------------------------------------------------------\n'
 '110        e009                  ;           Interrupt Vectors \n'
 '111        e009                  '
 ';-------------------------------------------------------------------------------\n'
 '112        e009                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        FFFE                  DW      RESET                   ; '
 'establishes the label RESET as\n'
 '115        FFFE                  ; the starting point          \n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         C000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c002                  jnz    Done                   \n'
 '76         c002                                                \n'
 '77         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '78         c002                  ;           End of main code  \n'
 '79         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '80         c002                                                \n'
 '81         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '82         c002                  ;           Subroutines       \n'
 '83         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '84         c002                                                \n'
 '85         c002                  ; none used here              \n'
 '86         c002                                                \n'
 '87         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '88         c002                  ;           End of all Subroutines\n'
 '89         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '90         c002                                                \n'
 '91         c002                                                \n'
 '92         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '93         c002                  ;           Definition of Program Data '
 'Memory\n'
 '94         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         E000                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e001                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e002                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e003                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e004                  Row3    DB  '-'               \n"
 "102        e005                  Row4    DB  '3'               \n"
 "103        e006                  Row5    DB  '3'               \n"
 "104        e007                  Row6    DB  '6'               \n"
 "105        e008                  Row7    DB  '2'               \n"
 '106        e008                                                \n'
 '107        e009                  PatternTable2  DB "EXAMPLES"  \n'
 '108        e009                                                \n'
 '109        e009                  '
 ';-------------------------------------------------------------------------------\n'
 '110        e009                  ;           Interrupt Vectors \n'
 '111        e009                  '
 ';-------------------------------------------------------------------------------\n'
 '112        e009                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        FFFE                  DW      RESET                   ; '
 'establishes the label RESET as\n'
 '115        FFFE                  ; the starting point          \n'
 '116        FFFE                                                \n')
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         C000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c002                  jnz    Done                   \n'
 '76         c002                                                \n'
 '77         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '78         c002                  ;           End of main code  \n'
 '79         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '80         c002                                                \n'
 '81         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '82         c002                  ;           Subroutines       \n'
 '83         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '84         c002                                                \n'
 '85         c002                  ; none used here              \n'
 '86         c002                                                \n'
 '87         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '88         c002                  ;           End of all Subroutines\n'
 '89         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '90         c002                                                \n'
 '91         c002                                                \n'
 '92         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '93         c002                  ;           Definition of Program Data '
 'Memory\n'
 '94         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         E000                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e001                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e002                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e003                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e004                  Row3    DB  '-'               \n"
 "102        e005                  Row4    DB  '3'               \n"
 "103        e006                  Row5    DB  '3'               \n"
 "104        e007                  Row6    DB  '6'               \n"
 "105        e008                  Row7    DB  '2'               \n"
 '106        e008                                                \n'
 '107        e009                  PatternTable2  DB "EXAMPLES"  \n'
 '108        e009                                                \n'
 '109        e009                  '
 ';-------------------------------------------------------------------------------\n'
 '110        e009                  ;           Interrupt Vectors \n'
 '111        e009                  '
 ';-------------------------------------------------------------------------------\n'
 '112        e009                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        FFFE                  DW      RESET                   ; '
 'establishes the label RESET as\n'
 '115        FFFE                  ; the starting point          \n'
 '116        FFFE                                                \n'
 '117        FFFE                  '
 ';-------------------------------------------------------------------------------\n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Found comment at line 0
DEBUG:BABY ASSEMBLER:No found previous value. Continuing.
DEBUG:BABY ASSEMBLER:Found comment at line 1
DEBUG:BABY ASSEMBLER:Found comment at line 2
DEBUG:BABY ASSEMBLER:Found comment at line 3
DEBUG:BABY ASSEMBLER:Found comment at line 4
DEBUG:BABY ASSEMBLER:Found comment at line 5
DEBUG:BABY ASSEMBLER:Found comment at line 6
DEBUG:BABY ASSEMBLER:Found comment at line 7
DEBUG:BABY ASSEMBLER:Found comment at line 8
DEBUG:BABY ASSEMBLER:Found comment at line 9
DEBUG:BABY ASSEMBLER:Found comment at line 10
DEBUG:BABY ASSEMBLER:Found comment at line 11
DEBUG:BABY ASSEMBLER:Found comment at line 12
DEBUG:BABY ASSEMBLER:Found comment at line 13
DEBUG:BABY ASSEMBLER:Found comment at line 14
DEBUG:BABY ASSEMBLER:Found comment at line 15
DEBUG:BABY ASSEMBLER:Found comment at line 16
DEBUG:BABY ASSEMBLER:Found comment at line 17
DEBUG:BABY ASSEMBLER:Found comment at line 18
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTCTL
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 19)
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTPW
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 20)
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTHOLD
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 21)
DEBUG:BABY ASSEMBLER:Found whitespace at line 22
DEBUG:BABY ASSEMBLER:Found comment at line 23
DEBUG:BABY ASSEMBLER:Found comment at line 24
DEBUG:BABY ASSEMBLER:Found comment at line 25
DEBUG:BABY ASSEMBLER:Found whitespace at line 26
DEBUG:BABY ASSEMBLER:No other matches so far for instruction LoopCount
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Count
DEBUG:BABY ASSEMBLER:Found whitespace at line 30
DEBUG:BABY ASSEMBLER:Found comment at line 31
DEBUG:BABY ASSEMBLER:No other matches so far for instruction BufferTable:
DEBUG:BABY ASSEMBLER:Found comment at line 33
DEBUG:BABY ASSEMBLER:No other matches so far for instruction BufferTableSize
DEBUG:BABY ASSEMBLER:Storing previous val of 0x020a into old val 0x0200 (line 34)
DEBUG:BABY ASSEMBLER:Found comment at line 35
DEBUG:BABY ASSEMBLER:Found comment at line 36
DEBUG:BABY ASSEMBLER:Found whitespace at line 37
DEBUG:BABY ASSEMBLER:Found comment at line 38
DEBUG:BABY ASSEMBLER:Found comment at line 40
DEBUG:BABY ASSEMBLER:Found comment at line 41
DEBUG:BABY ASSEMBLER:Found comment at line 42
DEBUG:BABY ASSEMBLER:No other matches so far for instruction RESET
DEBUG:BABY ASSEMBLER:Found comment at line 44
DEBUG:BABY ASSEMBLER:Found whitespace at line 45
DEBUG:BABY ASSEMBLER:No other matches so far for instruction StopWDT
DEBUG:BABY ASSEMBLER:Found whitespace at line 47
DEBUG:BABY ASSEMBLER:No other matches so far for instruction MainProgramStart
DEBUG:BABY ASSEMBLER:Found comment at line 49
DEBUG:BABY ASSEMBLER:No match found for ['mov', '#BufferTableSize,', 'R15', ';', 'R15', 'is', 'a', 'loop', 'counter'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No match found for ['mov', '#BufferTable,', 'R14', ';', 'R14', 'points', 'to', 'start', 'of', 'RAM', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction ClearNextByte
DEBUG:BABY ASSEMBLER:No match found for ['mov.b', '#0,', '0(R14)', ';', 'clear', 'the', 'location', 'to', 'zero'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:Found whitespace at line 54
DEBUG:BABY ASSEMBLER:No other matches so far for instruction inc
DEBUG:BABY ASSEMBLER:No match found for ['inc', 'R14', ';', 'point', 'to', 'next', 'byte', 'in', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction dec
DEBUG:BABY ASSEMBLER:No match found for ['dec', 'R15', ';', 'done', 'them', 'all', 'yet?'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No match found for ['jnz', 'ClearNextByte', ';', 'if', 'no,', 'do', 'some', 'more'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction FinishedClearingRAMtable
DEBUG:BABY ASSEMBLER:Found whitespace at line 59
DEBUG:BABY ASSEMBLER:Found comment at line 60
DEBUG:BABY ASSEMBLER:No match found for ['mov', '#BufferTableSize,', 'R15', ';', 'R15', 'is', 'a', 'loop', 'counter'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No match found for ['mov', '#BufferTable,', 'R14', ';', 'R14', 'points', 'to', 'start', 'of', 'RAM', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No match found for ['mov', '#PatternTable2,', 'R13', ';', 'R13', 'points', 'to', 'start', 'of', 'ROM', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:Found whitespace at line 64
DEBUG:BABY ASSEMBLER:No other matches so far for instruction GetNextByte
DEBUG:BABY ASSEMBLER:No match found for ['mov.b', '0(R13),', '0(R14)', ';', 'copy', 'byte', 'from', 'ROM', 'table', 'to', 'RAM', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:Found whitespace at line 67
DEBUG:BABY ASSEMBLER:No other matches so far for instruction inc
DEBUG:BABY ASSEMBLER:No match found for ['inc', 'R13', ';increment', 'source', 'addr'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction inc
DEBUG:BABY ASSEMBLER:No match found for ['inc', 'R14', ';', 'point', 'to', 'next', 'byte', 'in', 'RAM', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction dec
DEBUG:BABY ASSEMBLER:No match found for ['dec', 'R15', ';', 'done', 'them', 'all', 'yet?'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No match found for ['jnz', 'GetNextByte', ';', 'if', 'no,', 'do', 'some', 'more'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction FinishedCopyingTableToRAM
DEBUG:BABY ASSEMBLER:Found whitespace at line 73
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Done
DEBUG:BABY ASSEMBLER:No match found for ['jnz', 'Done'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:Found whitespace at line 76
DEBUG:BABY ASSEMBLER:Found comment at line 77
DEBUG:BABY ASSEMBLER:Found comment at line 78
DEBUG:BABY ASSEMBLER:Found comment at line 79
DEBUG:BABY ASSEMBLER:Found whitespace at line 80
DEBUG:BABY ASSEMBLER:Found comment at line 81
DEBUG:BABY ASSEMBLER:Found comment at line 82
DEBUG:BABY ASSEMBLER:Found comment at line 83
DEBUG:BABY ASSEMBLER:Found whitespace at line 84
DEBUG:BABY ASSEMBLER:Found comment at line 85
DEBUG:BABY ASSEMBLER:Found whitespace at line 86
DEBUG:BABY ASSEMBLER:Found comment at line 87
DEBUG:BABY ASSEMBLER:Found comment at line 88
DEBUG:BABY ASSEMBLER:Found comment at line 89
DEBUG:BABY ASSEMBLER:Found whitespace at line 90
DEBUG:BABY ASSEMBLER:Found whitespace at line 91
DEBUG:BABY ASSEMBLER:Found comment at line 92
DEBUG:BABY ASSEMBLER:Found comment at line 93
DEBUG:BABY ASSEMBLER:Found comment at line 94
DEBUG:BABY ASSEMBLER:Found whitespace at line 96
DEBUG:BABY ASSEMBLER:No other matches so far for instruction PatternTable1
DEBUG:BABY ASSEMBLER:No match found for ['PatternTable1', ';', 'this', 'is', 'just', 'an', 'example', 'table', '(or', 'perhaps', 'more'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row0
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row1
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row2
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row3
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row4
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row5
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row6
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row7
DEBUG:BABY ASSEMBLER:Found whitespace at line 106
DEBUG:BABY ASSEMBLER:No other matches so far for instruction PatternTable2
DEBUG:BABY ASSEMBLER:Found whitespace at line 108
DEBUG:BABY ASSEMBLER:Found comment at line 109
DEBUG:BABY ASSEMBLER:Found comment at line 110
DEBUG:BABY ASSEMBLER:Found comment at line 111
DEBUG:BABY ASSEMBLER:Found whitespace at line 112
DEBUG:BABY ASSEMBLER:No other matches so far for instruction DW
DEBUG:BABY ASSEMBLER:No match found for ['DW', 'RESET', ';', 'establishes', 'the', 'label', 'RESET', 'as'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:Found comment at line 115
DEBUG:BABY ASSEMBLER:Found whitespace at line 116
DEBUG:BABY ASSEMBLER:Found comment at line 117
DEBUG:BABY ASSEMBLER:No other matches so far for instruction END
DEBUG:BABY ASSEMBLER:No match found for ['END', ';', 'END', 'of', 'all', 'code', 'for', 'this', 'program'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:Found comment at line 119
DEBUG:BABY ASSEMBLER:Found comment at line 120
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0202',
 'BufferTableSize': '0x020a',
 'ClearNextByte': '0xC000',
 'Count': '0x0201',
 'DW': '0xFFFE',
 'Done': '0xC000',
 'END': '0xFFFE',
 'FinishedClearingRAMtable': '0xC000',
 'FinishedCopyingTableToRAM': '0xC000',
 'GetNextByte': '0xC000',
 'LoopCount': '0x0200',
 'MainProgramStart': '0xc004',
 'PatternTable1': '0xE000',
 'PatternTable2': '0xe008',
 'RESET': '0xC000',
 'Row0': '0xE000',
 'Row1': '0xe001',
 'Row2': '0xe002',
 'Row3': '0xe003',
 'Row4': '0xe004',
 'Row5': '0xe005',
 'Row6': '0xe006',
 'Row7': '0xe007',
 'StopWDT': '0xc002',
 'WDTCTL': '0x0200',
 'WDTHOLD': '0x0200',
 'WDTPW': '0x0200',
 'dec': '0xC000',
 'inc': '0xC000'}
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         C000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c002                  jnz    Done                   \n'
 '76         c002                                                \n'
 '77         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '78         c002                  ;           End of main code  \n'
 '79         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '80         c002                                                \n'
 '81         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '82         c002                  ;           Subroutines       \n'
 '83         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '84         c002                                                \n'
 '85         c002                  ; none used here              \n'
 '86         c002                                                \n'
 '87         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '88         c002                  ;           End of all Subroutines\n'
 '89         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '90         c002                                                \n'
 '91         c002                                                \n'
 '92         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '93         c002                  ;           Definition of Program Data '
 'Memory\n'
 '94         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         E000                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e001                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e002                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e003                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e004                  Row3    DB  '-'               \n"
 "102        e005                  Row4    DB  '3'               \n"
 "103        e006                  Row5    DB  '3'               \n"
 "104        e007                  Row6    DB  '6'               \n"
 "105        e008                  Row7    DB  '2'               \n"
 '106        e008                                                \n'
 '107        e009                  PatternTable2  DB "EXAMPLES"  \n'
 '108        e009                                                \n'
 '109        e009                  '
 ';-------------------------------------------------------------------------------\n'
 '110        e009                  ;           Interrupt Vectors \n'
 '111        e009                  '
 ';-------------------------------------------------------------------------------\n'
 '112        e009                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        FFFE                  DW      RESET                   ; '
 'establishes the label RESET as\n'
 '115        FFFE                  ; the starting point          \n'
 '116        FFFE                                                \n'
 '117        FFFE                  '
 ';-------------------------------------------------------------------------------\n')
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Found comment at line 0
DEBUG:BABY ASSEMBLER:No found previous value. Continuing.
DEBUG:BABY ASSEMBLER:Found comment at line 1
DEBUG:BABY ASSEMBLER:Found comment at line 2
DEBUG:BABY ASSEMBLER:Found comment at line 3
DEBUG:BABY ASSEMBLER:Found comment at line 4
DEBUG:BABY ASSEMBLER:Found comment at line 5
DEBUG:BABY ASSEMBLER:Found comment at line 6
DEBUG:BABY ASSEMBLER:Found comment at line 7
DEBUG:BABY ASSEMBLER:Found comment at line 8
DEBUG:BABY ASSEMBLER:Found comment at line 9
DEBUG:BABY ASSEMBLER:Found comment at line 10
DEBUG:BABY ASSEMBLER:Found comment at line 11
DEBUG:BABY ASSEMBLER:Found comment at line 12
DEBUG:BABY ASSEMBLER:Found comment at line 13
DEBUG:BABY ASSEMBLER:Found comment at line 14
DEBUG:BABY ASSEMBLER:Found comment at line 15
DEBUG:BABY ASSEMBLER:Found comment at line 16
DEBUG:BABY ASSEMBLER:Found comment at line 17
DEBUG:BABY ASSEMBLER:Found comment at line 18
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTCTL
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 19)
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTPW
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 20)
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTHOLD
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 21)
DEBUG:BABY ASSEMBLER:Found whitespace at line 22
DEBUG:BABY ASSEMBLER:Found comment at line 23
DEBUG:BABY ASSEMBLER:Found comment at line 24
DEBUG:BABY ASSEMBLER:Found comment at line 25
DEBUG:BABY ASSEMBLER:Found whitespace at line 26
DEBUG:BABY ASSEMBLER:No other matches so far for instruction LoopCount
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Count
DEBUG:BABY ASSEMBLER:Found whitespace at line 30
DEBUG:BABY ASSEMBLER:Found comment at line 31
DEBUG:BABY ASSEMBLER:No other matches so far for instruction BufferTable:
DEBUG:BABY ASSEMBLER:Found comment at line 33
DEBUG:BABY ASSEMBLER:No other matches so far for instruction BufferTableSize
DEBUG:BABY ASSEMBLER:Storing previous val of 0x020a into old val 0x0200 (line 34)
DEBUG:BABY ASSEMBLER:Found comment at line 35
DEBUG:BABY ASSEMBLER:Found comment at line 36
DEBUG:BABY ASSEMBLER:Found whitespace at line 37
DEBUG:BABY ASSEMBLER:Found comment at line 38
DEBUG:BABY ASSEMBLER:Found comment at line 40
DEBUG:BABY ASSEMBLER:Found comment at line 41
DEBUG:BABY ASSEMBLER:Found comment at line 42
DEBUG:BABY ASSEMBLER:No other matches so far for instruction RESET
DEBUG:BABY ASSEMBLER:Found comment at line 44
DEBUG:BABY ASSEMBLER:Found whitespace at line 45
DEBUG:BABY ASSEMBLER:No other matches so far for instruction StopWDT
DEBUG:BABY ASSEMBLER:Found whitespace at line 47
DEBUG:BABY ASSEMBLER:No other matches so far for instruction MainProgramStart
DEBUG:BABY ASSEMBLER:Found comment at line 49
DEBUG:BABY ASSEMBLER:No match found for ['mov', '#BufferTableSize,', 'R15', ';', 'R15', 'is', 'a', 'loop', 'counter'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No match found for ['mov', '#BufferTable,', 'R14', ';', 'R14', 'points', 'to', 'start', 'of', 'RAM', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction ClearNextByte
DEBUG:BABY ASSEMBLER:No match found for ['mov.b', '#0,', '0(R14)', ';', 'clear', 'the', 'location', 'to', 'zero'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:Found whitespace at line 54
DEBUG:BABY ASSEMBLER:No other matches so far for instruction inc
DEBUG:BABY ASSEMBLER:No match found for ['inc', 'R14', ';', 'point', 'to', 'next', 'byte', 'in', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction dec
DEBUG:BABY ASSEMBLER:No match found for ['dec', 'R15', ';', 'done', 'them', 'all', 'yet?'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No match found for ['jnz', 'ClearNextByte', ';', 'if', 'no,', 'do', 'some', 'more'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction FinishedClearingRAMtable
DEBUG:BABY ASSEMBLER:Found whitespace at line 59
DEBUG:BABY ASSEMBLER:Found comment at line 60
DEBUG:BABY ASSEMBLER:No match found for ['mov', '#BufferTableSize,', 'R15', ';', 'R15', 'is', 'a', 'loop', 'counter'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No match found for ['mov', '#BufferTable,', 'R14', ';', 'R14', 'points', 'to', 'start', 'of', 'RAM', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No match found for ['mov', '#PatternTable2,', 'R13', ';', 'R13', 'points', 'to', 'start', 'of', 'ROM', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:Found whitespace at line 64
DEBUG:BABY ASSEMBLER:No other matches so far for instruction GetNextByte
DEBUG:BABY ASSEMBLER:No match found for ['mov.b', '0(R13),', '0(R14)', ';', 'copy', 'byte', 'from', 'ROM', 'table', 'to', 'RAM', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:Found whitespace at line 67
DEBUG:BABY ASSEMBLER:No other matches so far for instruction inc
DEBUG:BABY ASSEMBLER:No match found for ['inc', 'R13', ';increment', 'source', 'addr'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction inc
DEBUG:BABY ASSEMBLER:No match found for ['inc', 'R14', ';', 'point', 'to', 'next', 'byte', 'in', 'RAM', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction dec
DEBUG:BABY ASSEMBLER:No match found for ['dec', 'R15', ';', 'done', 'them', 'all', 'yet?'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No match found for ['jnz', 'GetNextByte', ';', 'if', 'no,', 'do', 'some', 'more'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction FinishedCopyingTableToRAM
DEBUG:BABY ASSEMBLER:Found whitespace at line 73
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Done
DEBUG:BABY ASSEMBLER:No match found for ['jnz', 'Done'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:Found whitespace at line 76
DEBUG:BABY ASSEMBLER:Found comment at line 77
DEBUG:BABY ASSEMBLER:Found comment at line 78
DEBUG:BABY ASSEMBLER:Found comment at line 79
DEBUG:BABY ASSEMBLER:Found whitespace at line 80
DEBUG:BABY ASSEMBLER:Found comment at line 81
DEBUG:BABY ASSEMBLER:Found comment at line 82
DEBUG:BABY ASSEMBLER:Found comment at line 83
DEBUG:BABY ASSEMBLER:Found whitespace at line 84
DEBUG:BABY ASSEMBLER:Found comment at line 85
DEBUG:BABY ASSEMBLER:Found whitespace at line 86
DEBUG:BABY ASSEMBLER:Found comment at line 87
DEBUG:BABY ASSEMBLER:Found comment at line 88
DEBUG:BABY ASSEMBLER:Found comment at line 89
DEBUG:BABY ASSEMBLER:Found whitespace at line 90
DEBUG:BABY ASSEMBLER:Found whitespace at line 91
DEBUG:BABY ASSEMBLER:Found comment at line 92
DEBUG:BABY ASSEMBLER:Found comment at line 93
DEBUG:BABY ASSEMBLER:Found comment at line 94
DEBUG:BABY ASSEMBLER:Found whitespace at line 96
DEBUG:BABY ASSEMBLER:No other matches so far for instruction PatternTable1
DEBUG:BABY ASSEMBLER:No match found for ['PatternTable1', ';', 'this', 'is', 'just', 'an', 'example', 'table', '(or', 'perhaps', 'more'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row0
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row1
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row2
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row3
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row4
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row5
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row6
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row7
DEBUG:BABY ASSEMBLER:Found whitespace at line 106
DEBUG:BABY ASSEMBLER:No other matches so far for instruction PatternTable2
DEBUG:BABY ASSEMBLER:Found whitespace at line 108
DEBUG:BABY ASSEMBLER:Found comment at line 109
DEBUG:BABY ASSEMBLER:Found comment at line 110
DEBUG:BABY ASSEMBLER:Found comment at line 111
DEBUG:BABY ASSEMBLER:Found whitespace at line 112
DEBUG:BABY ASSEMBLER:No other matches so far for instruction DW
DEBUG:BABY ASSEMBLER:No match found for ['DW', 'RESET', ';', 'establishes', 'the', 'label', 'RESET', 'as'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:Found comment at line 115
DEBUG:BABY ASSEMBLER:Found whitespace at line 116
DEBUG:BABY ASSEMBLER:Found comment at line 117
DEBUG:BABY ASSEMBLER:No other matches so far for instruction END
DEBUG:BABY ASSEMBLER:No match found for ['END', ';', 'END', 'of', 'all', 'code', 'for', 'this', 'program'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:Found comment at line 119
DEBUG:BABY ASSEMBLER:Found comment at line 120
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0202',
 'BufferTableSize': '0x020a',
 'ClearNextByte': '0xC000',
 'Count': '0x0201',
 'DW': '0xFFFE',
 'Done': '0xC000',
 'END': '0xFFFE',
 'FinishedClearingRAMtable': '0xC000',
 'FinishedCopyingTableToRAM': '0xC000',
 'GetNextByte': '0xC000',
 'LoopCount': '0x0200',
 'MainProgramStart': '0xc004',
 'PatternTable1': '0xE000',
 'PatternTable2': '0xe008',
 'RESET': '0xC000',
 'Row0': '0xE000',
 'Row1': '0xe001',
 'Row2': '0xe002',
 'Row3': '0xe003',
 'Row4': '0xe004',
 'Row5': '0xe005',
 'Row6': '0xe006',
 'Row7': '0xe007',
 'StopWDT': '0xc002',
 'WDTCTL': '0x0200',
 'WDTHOLD': '0x0200',
 'WDTPW': '0x0200',
 'dec': '0xC000',
 'inc': '0xC000'}
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020a                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020a                  ; bytes in RAM space          \n'
 '34         020a                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020a                  ;  literally "Current address minus\n'
 '36         020a                  ;  address of BufferTable"    \n'
 '37         020a                                                \n'
 '38         020a                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         c002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         c002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         c002                                                \n'
 '46         c004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         c004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         C000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         c002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         c002                  jnz    Done                   \n'
 '76         c002                                                \n'
 '77         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '78         c002                  ;           End of main code  \n'
 '79         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '80         c002                                                \n'
 '81         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '82         c002                  ;           Subroutines       \n'
 '83         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '84         c002                                                \n'
 '85         c002                  ; none used here              \n'
 '86         c002                                                \n'
 '87         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '88         c002                  ;           End of all Subroutines\n'
 '89         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '90         c002                                                \n'
 '91         c002                                                \n'
 '92         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '93         c002                  ;           Definition of Program Data '
 'Memory\n'
 '94         c002                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         E000                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         e001                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         e002                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        e003                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        e004                  Row3    DB  '-'               \n"
 "102        e005                  Row4    DB  '3'               \n"
 "103        e006                  Row5    DB  '3'               \n"
 "104        e007                  Row6    DB  '6'               \n"
 "105        e008                  Row7    DB  '2'               \n"
 '106        e008                                                \n'
 '107        e009                  PatternTable2  DB "EXAMPLES"  \n'
 '108        e009                                                \n'
 '109        e009                  '
 ';-------------------------------------------------------------------------------\n'
 '110        e009                  ;           Interrupt Vectors \n'
 '111        e009                  '
 ';-------------------------------------------------------------------------------\n'
 '112        e009                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        FFFE                  DW      RESET                   ; '
 'establishes the label RESET as\n'
 '115        FFFE                  ; the starting point          \n'
 '116        FFFE                                                \n'
 '117        FFFE                  '
 ';-------------------------------------------------------------------------------\n')
DEBUG:BABY ASSEMBLER:Wrote to file
DEBUG:BABY ASSEMBLER:Set log level for console.
DEBUG:BABY ASSEMBLER:Getting the number of lines of code.
DEBUG:BABY ASSEMBLER:Found the END directive.
INFO:BABY ASSEMBLER:Determined there are 118 lines of code
DEBUG:BABY ASSEMBLER:Found ORG directive, line 27, address 0x0200
DEBUG:BABY ASSEMBLER:Found ORG directive, line 39, address 0xC000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 95, address 0xE000
DEBUG:BABY ASSEMBLER:Found ORG directive, line 113, address 0xFFFE
DEBUG:BABY ASSEMBLER:Found comment at line 0
DEBUG:BABY ASSEMBLER:No found previous value. Continuing.
DEBUG:BABY ASSEMBLER:Found comment at line 1
DEBUG:BABY ASSEMBLER:Found comment at line 2
DEBUG:BABY ASSEMBLER:Found comment at line 3
DEBUG:BABY ASSEMBLER:Found comment at line 4
DEBUG:BABY ASSEMBLER:Found comment at line 5
DEBUG:BABY ASSEMBLER:Found comment at line 6
DEBUG:BABY ASSEMBLER:Found comment at line 7
DEBUG:BABY ASSEMBLER:Found comment at line 8
DEBUG:BABY ASSEMBLER:Found comment at line 9
DEBUG:BABY ASSEMBLER:Found comment at line 10
DEBUG:BABY ASSEMBLER:Found comment at line 11
DEBUG:BABY ASSEMBLER:Found comment at line 12
DEBUG:BABY ASSEMBLER:Found comment at line 13
DEBUG:BABY ASSEMBLER:Found comment at line 14
DEBUG:BABY ASSEMBLER:Found comment at line 15
DEBUG:BABY ASSEMBLER:Found comment at line 16
DEBUG:BABY ASSEMBLER:Found comment at line 17
DEBUG:BABY ASSEMBLER:Found comment at line 18
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTCTL
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 19)
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTPW
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 20)
DEBUG:BABY ASSEMBLER:No other matches so far for instruction WDTHOLD
DEBUG:BABY ASSEMBLER:Storing previous val of 0x0200 into old val 0x0200 (line 21)
DEBUG:BABY ASSEMBLER:Found whitespace at line 22
DEBUG:BABY ASSEMBLER:Found comment at line 23
DEBUG:BABY ASSEMBLER:Found comment at line 24
DEBUG:BABY ASSEMBLER:Found comment at line 25
DEBUG:BABY ASSEMBLER:Found whitespace at line 26
DEBUG:BABY ASSEMBLER:No other matches so far for instruction LoopCount
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Count
DEBUG:BABY ASSEMBLER:Found whitespace at line 30
DEBUG:BABY ASSEMBLER:Found comment at line 31
DEBUG:BABY ASSEMBLER:No other matches so far for instruction BufferTable:
DEBUG:BABY ASSEMBLER:Found comment at line 33
DEBUG:BABY ASSEMBLER:No other matches so far for instruction BufferTableSize
DEBUG:BABY ASSEMBLER:Storing previous val of 0x020a into old val 0x0200 (line 34)
DEBUG:BABY ASSEMBLER:Found comment at line 35
DEBUG:BABY ASSEMBLER:Found comment at line 36
DEBUG:BABY ASSEMBLER:Found whitespace at line 37
DEBUG:BABY ASSEMBLER:Found comment at line 38
DEBUG:BABY ASSEMBLER:Found comment at line 40
DEBUG:BABY ASSEMBLER:Found comment at line 41
DEBUG:BABY ASSEMBLER:Found comment at line 42
DEBUG:BABY ASSEMBLER:No other matches so far for instruction RESET
DEBUG:BABY ASSEMBLER:Found comment at line 44
DEBUG:BABY ASSEMBLER:Found whitespace at line 45
DEBUG:BABY ASSEMBLER:No other matches so far for instruction StopWDT
DEBUG:BABY ASSEMBLER:Found whitespace at line 47
DEBUG:BABY ASSEMBLER:No other matches so far for instruction MainProgramStart
DEBUG:BABY ASSEMBLER:Found comment at line 49
DEBUG:BABY ASSEMBLER:No match found for ['mov', '#BufferTableSize,', 'R15', ';', 'R15', 'is', 'a', 'loop', 'counter'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No match found for ['mov', '#BufferTable,', 'R14', ';', 'R14', 'points', 'to', 'start', 'of', 'RAM', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction ClearNextByte
DEBUG:BABY ASSEMBLER:No match found for ['mov.b', '#0,', '0(R14)', ';', 'clear', 'the', 'location', 'to', 'zero'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:Found whitespace at line 54
DEBUG:BABY ASSEMBLER:No other matches so far for instruction inc
DEBUG:BABY ASSEMBLER:No match found for ['inc', 'R14', ';', 'point', 'to', 'next', 'byte', 'in', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction dec
DEBUG:BABY ASSEMBLER:No match found for ['dec', 'R15', ';', 'done', 'them', 'all', 'yet?'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No match found for ['jnz', 'ClearNextByte', ';', 'if', 'no,', 'do', 'some', 'more'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction FinishedClearingRAMtable
DEBUG:BABY ASSEMBLER:Found whitespace at line 59
DEBUG:BABY ASSEMBLER:Found comment at line 60
DEBUG:BABY ASSEMBLER:No match found for ['mov', '#BufferTableSize,', 'R15', ';', 'R15', 'is', 'a', 'loop', 'counter'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No match found for ['mov', '#BufferTable,', 'R14', ';', 'R14', 'points', 'to', 'start', 'of', 'RAM', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No match found for ['mov', '#PatternTable2,', 'R13', ';', 'R13', 'points', 'to', 'start', 'of', 'ROM', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:Found whitespace at line 64
DEBUG:BABY ASSEMBLER:No other matches so far for instruction GetNextByte
DEBUG:BABY ASSEMBLER:No match found for ['mov.b', '0(R13),', '0(R14)', ';', 'copy', 'byte', 'from', 'ROM', 'table', 'to', 'RAM', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:Found whitespace at line 67
DEBUG:BABY ASSEMBLER:No other matches so far for instruction inc
DEBUG:BABY ASSEMBLER:No match found for ['inc', 'R13', ';increment', 'source', 'addr'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction inc
DEBUG:BABY ASSEMBLER:No match found for ['inc', 'R14', ';', 'point', 'to', 'next', 'byte', 'in', 'RAM', 'table'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction dec
DEBUG:BABY ASSEMBLER:No match found for ['dec', 'R15', ';', 'done', 'them', 'all', 'yet?'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No match found for ['jnz', 'GetNextByte', ';', 'if', 'no,', 'do', 'some', 'more'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction FinishedCopyingTableToRAM
DEBUG:BABY ASSEMBLER:Found whitespace at line 73
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Done
DEBUG:BABY ASSEMBLER:No match found for ['jnz', 'Done'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:Found whitespace at line 76
DEBUG:BABY ASSEMBLER:Found comment at line 77
DEBUG:BABY ASSEMBLER:Found comment at line 78
DEBUG:BABY ASSEMBLER:Found comment at line 79
DEBUG:BABY ASSEMBLER:Found whitespace at line 80
DEBUG:BABY ASSEMBLER:Found comment at line 81
DEBUG:BABY ASSEMBLER:Found comment at line 82
DEBUG:BABY ASSEMBLER:Found comment at line 83
DEBUG:BABY ASSEMBLER:Found whitespace at line 84
DEBUG:BABY ASSEMBLER:Found comment at line 85
DEBUG:BABY ASSEMBLER:Found whitespace at line 86
DEBUG:BABY ASSEMBLER:Found comment at line 87
DEBUG:BABY ASSEMBLER:Found comment at line 88
DEBUG:BABY ASSEMBLER:Found comment at line 89
DEBUG:BABY ASSEMBLER:Found whitespace at line 90
DEBUG:BABY ASSEMBLER:Found whitespace at line 91
DEBUG:BABY ASSEMBLER:Found comment at line 92
DEBUG:BABY ASSEMBLER:Found comment at line 93
DEBUG:BABY ASSEMBLER:Found comment at line 94
DEBUG:BABY ASSEMBLER:Found whitespace at line 96
DEBUG:BABY ASSEMBLER:No other matches so far for instruction PatternTable1
DEBUG:BABY ASSEMBLER:No match found for ['PatternTable1', ';', 'this', 'is', 'just', 'an', 'example', 'table', '(or', 'perhaps', 'more'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row0
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row1
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row2
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row3
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row4
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row5
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row6
DEBUG:BABY ASSEMBLER:No other matches so far for instruction Row7
DEBUG:BABY ASSEMBLER:Found whitespace at line 106
DEBUG:BABY ASSEMBLER:No other matches so far for instruction PatternTable2
DEBUG:BABY ASSEMBLER:Found whitespace at line 108
DEBUG:BABY ASSEMBLER:Found comment at line 109
DEBUG:BABY ASSEMBLER:Found comment at line 110
DEBUG:BABY ASSEMBLER:Found comment at line 111
DEBUG:BABY ASSEMBLER:Found whitespace at line 112
DEBUG:BABY ASSEMBLER:No other matches so far for instruction DW
DEBUG:BABY ASSEMBLER:No match found for ['DW', 'RESET', ';', 'establishes', 'the', 'label', 'RESET', 'as'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:Found comment at line 115
DEBUG:BABY ASSEMBLER:Found whitespace at line 116
DEBUG:BABY ASSEMBLER:Found comment at line 117
DEBUG:BABY ASSEMBLER:No other matches so far for instruction END
DEBUG:BABY ASSEMBLER:No match found for ['END', ';', 'END', 'of', 'all', 'code', 'for', 'this', 'program'], assuming it's just be whitespace.
DEBUG:BABY ASSEMBLER:Found comment at line 119
DEBUG:BABY ASSEMBLER:Found comment at line 120
INFO:BABY ASSEMBLER:Labels:
{'BufferTable:': '0x0202',
 'BufferTableSize': '0x020a',
 'ClearNextByte': '0xC000',
 'Count': '0x0201',
 'DW': '0xFFFE',
 'Done': '0xC000',
 'END': '0xFFFE',
 'FinishedClearingRAMtable': '0xC000',
 'FinishedCopyingTableToRAM': '0xC000',
 'GetNextByte': '0xC000',
 'LoopCount': '0x0200',
 'MainProgramStart': '0xc004',
 'PatternTable1': '0xE000',
 'PatternTable2': '0xe008',
 'RESET': '0xC000',
 'Row0': '0xE000',
 'Row1': '0xe001',
 'Row2': '0xe002',
 'Row3': '0xe003',
 'Row4': '0xe004',
 'Row5': '0xe005',
 'Row6': '0xe006',
 'Row7': '0xe007',
 'StopWDT': '0xc002',
 'WDTCTL': '0x0200',
 'WDTHOLD': '0x0200',
 'WDTPW': '0x0200',
 'dec': '0xC000',
 'inc': '0xC000'}
INFO:BABY ASSEMBLER:Flines:
('0          0200                  '
 ';-------------------------------------------------------------------------------\n'
 '1          0200                  ;   Test source code for Advanced '
 'Microcontroller Software\n'
 '2          0200                  ;                             \n'
 '3          0200                  ;   Purpose:  To provide test code for the '
 'class Assembler Project\n'
 '4          0200                  ;                             \n'
 '5          0200                  ;   Target: TI MSP430 family - simulation\n'
 '6          0200                  ;                             \n'
 '7          0200                  ;       Date:           July 25, 2017\n'
 '8          0200                  ;       Last Revision:  1.1  July 26, 2017 '
 '- minor updates\n'
 '9          0200                  ;                             \n'
 '10         0200                  ;       Written by:     Dr. Michael Helm, '
 'ECE dept, Texas Tech University\n'
 '11         0200                  ;       Adapted from:   earlier example '
 'code\n'
 '12         0200                  ;       Assembler/IDE:  class assembler '
 'project\n'
 '13         0200                  ;                             \n'
 '14         0200                  ;       HW I/O assignments: none assigned '
 'for this example\n'
 '15         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '16         0200                  ; Definition of Constants     \n'
 '17         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '18         0200                  ; Watchdog timer definitions  \n'
 '19         0200                  WDTCTL     EQU     0x0120     \n'
 '20         0200                  WDTPW      EQU     0x5A00     \n'
 '21         0200                  WDTHOLD    EQU     0x0080     \n'
 '22         0200                                                \n'
 '23         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '24         0200                  ; Definition of Variables     \n'
 '25         0200                  '
 ';-------------------------------------------------------------------------------\n'
 '26         0200                                                \n'
 '27         0200                  ORG   0x0200     ; beginning of RAM space\n'
 '28         0201                  LoopCount       DB    0       \n'
 '29         0202                  Count           DB    0       \n'
 '30         0202                                                \n'
 '31         0202                  ;define a table (array) of 8 bytes\n'
 '32         020A                  BufferTable:    DS    8        ; this will '
 'allocate 8 bytes of uninitialized\n'
 '33         020A                  ; bytes in RAM space          \n'
 '34         020A                  BufferTableSize EQU $ - BufferTable   ; '
 'capture table size into a constant\n'
 '35         020A                  ;  literally "Current address minus\n'
 '36         020A                  ;  address of BufferTable"    \n'
 '37         020A                                                \n'
 '38         020A                  '
 ';-------------------------------------------------------------------------------\n'
 '39         C000                  ORG     0xC000                  ; Program '
 'Reset (prog memory start)\n'
 '40         C000                  ; this is Program memory start\n'
 '41         C000                  ; address for MSP430G2553 (16K)\n'
 '42         C000                  '
 ';-------------------------------------------------------------------------------\n'
 '43         C002                  RESET       mov.w   #0x0400, SP       ; '
 'Initialize stackpointer(to end of RAM +1)\n'
 '44         C002                  ; RAM is 512 bytes, last position is 3FFh\n'
 '45         C002                                                \n'
 '46         C004                  StopWDT     mov.w   #WDTPW+WDTHOLD, '
 '&WDTCTL  ; Stop WDT (Watchdog timer)\n'
 '47         C004                                                \n'
 '48         C000                  MainProgramStart              \n'
 '49         C000                  ; objective here is clear out the '
 'BufferTable in RAM to all zeros\n'
 '50         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '51         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '52         C000                  ClearNextByte                 \n'
 '53         C000                  mov.b #0,  0(R14)      ; clear the location '
 'to zero\n'
 '54         C000                                                \n'
 '55         C000                  inc R14                ; point to next byte '
 'in table\n'
 '56         C000                  dec R15                ; done them all '
 'yet?\n'
 '57         C000                  jnz  ClearNextByte     ; if no, do some '
 'more\n'
 '58         C000                  FinishedClearingRAMtable      \n'
 '59         C000                                                \n'
 '60         C000                  ; now copy fixed constant table from '
 'Program Memory into RAM table\n'
 '61         C000                  mov #BufferTableSize, R15    ; R15 is a '
 'loop counter\n'
 '62         C000                  mov #BufferTable, R14        ; R14 points '
 'to start of RAM table\n'
 '63         C000                  mov #PatternTable2, R13      ; R13 points '
 'to start of ROM table\n'
 '64         C000                                                \n'
 '65         C000                  GetNextByte                   \n'
 '66         C000                  mov.b 0(R13),  0(R14)      ; copy byte from '
 'ROM table to RAM table\n'
 '67         C000                                                \n'
 '68         C000                  inc R13                    ;increment '
 'source addr\n'
 '69         C000                  inc R14                ; point to next byte '
 'in RAM table\n'
 '70         C000                  dec R15                ; done them all '
 'yet?\n'
 '71         C000                  jnz  GetNextByte     ; if no, do some more\n'
 '72         C000                  FinishedCopyingTableToRAM     \n'
 '73         C000                                                \n'
 '74         C002                  Done        jz     Done           ;  halt '
 'here\n'
 '75         C002                  jnz    Done                   \n'
 '76         C002                                                \n'
 '77         C002                  '
 ';-------------------------------------------------------------------------------\n'
 '78         C002                  ;           End of main code  \n'
 '79         C002                  '
 ';-------------------------------------------------------------------------------\n'
 '80         C002                                                \n'
 '81         C002                  '
 ';-------------------------------------------------------------------------------\n'
 '82         C002                  ;           Subroutines       \n'
 '83         C002                  '
 ';-------------------------------------------------------------------------------\n'
 '84         C002                                                \n'
 '85         C002                  ; none used here              \n'
 '86         C002                                                \n'
 '87         C002                  '
 ';-------------------------------------------------------------------------------\n'
 '88         C002                  ;           End of all Subroutines\n'
 '89         C002                  '
 ';-------------------------------------------------------------------------------\n'
 '90         C002                                                \n'
 '91         C002                                                \n'
 '92         C002                  '
 ';-------------------------------------------------------------------------------\n'
 '93         C002                  ;           Definition of Program Data '
 'Memory\n'
 '94         C002                  '
 ';-------------------------------------------------------------------------------\n'
 '95         E000                  ORG   0xE000                  \n'
 '96         E000                                                \n'
 '97         E000                  PatternTable1           ; this is just an '
 'example table (or perhaps more\n'
 "98         E001                  Row0    DB  'E'   ; familar concept is this "
 'is an array of bytes\n'
 "99         E002                  Row1    DB  'C'   ; containing 8 bytes as "
 'defined here)\n'
 "100        E003                  Row2    DB  'E'   ;  PatternTable1 is the "
 'name of the table (or array)\n'
 "101        E004                  Row3    DB  '-'               \n"
 "102        E005                  Row4    DB  '3'               \n"
 "103        E006                  Row5    DB  '3'               \n"
 "104        E007                  Row6    DB  '6'               \n"
 "105        E008                  Row7    DB  '2'               \n"
 '106        E008                                                \n'
 '107        E009                  PatternTable2  DB "EXAMPLES"  \n'
 '108        E009                                                \n'
 '109        E009                  '
 ';-------------------------------------------------------------------------------\n'
 '110        E009                  ;           Interrupt Vectors \n'
 '111        E009                  '
 ';-------------------------------------------------------------------------------\n'
 '112        E009                                                \n'
 '113        FFFE                  ORG     0xFFFE                  ; MSP430 '
 'RESET Vector\n'
 '114        FFFE                  DW      RESET                   ; '
 'establishes the label RESET as\n'
 '115        FFFE                  ; the starting point          \n'
 '116        FFFE                                                \n'
 '117        FFFE                  '
 ';-------------------------------------------------------------------------------\n')
DEBUG:BABY ASSEMBLER:Wrote to file
